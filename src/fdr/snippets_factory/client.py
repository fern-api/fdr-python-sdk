# This file was auto-generated by Fern from our API Definition.

import typing

from ..commons.types.api_id import ApiId
from ..commons.types.org_id import OrgId
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawSnippetsFactoryClient, RawSnippetsFactoryClient
from .types.sdk_snippets_create import SdkSnippetsCreate

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SnippetsFactoryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSnippetsFactoryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSnippetsFactoryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSnippetsFactoryClient
        """
        return self._raw_client

    def create_snippets_for_sdk(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        snippets: SdkSnippetsCreate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        snippets : SdkSnippetsCreate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import TypeScriptSdk
        from fdr.snippets_factory import (
            SdkSnippetsCreate_Typescript,
            SingleTypescriptSnippetCreate,
            TypeScriptSnippetCode,
        )

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.snippets_factory.create_snippets_for_sdk(
            org_id="orgId",
            api_id="apiId",
            snippets=SdkSnippetsCreate_Typescript(
                sdk=TypeScriptSdk(
                    package="package",
                    version="version",
                ),
                snippets=[
                    SingleTypescriptSnippetCreate(
                        snippet=TypeScriptSnippetCode(
                            client="client",
                        ),
                        endpoint=EndpointIdentifier(
                            path="path",
                            method="GET",
                        ),
                    ),
                    SingleTypescriptSnippetCreate(
                        snippet=TypeScriptSnippetCode(
                            client="client",
                        ),
                        endpoint=EndpointIdentifier(
                            path="path",
                            method="GET",
                        ),
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.create_snippets_for_sdk(
            org_id=org_id, api_id=api_id, snippets=snippets, request_options=request_options
        )
        return _response.data


class AsyncSnippetsFactoryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSnippetsFactoryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSnippetsFactoryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSnippetsFactoryClient
        """
        return self._raw_client

    async def create_snippets_for_sdk(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        snippets: SdkSnippetsCreate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        snippets : SdkSnippetsCreate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import TypeScriptSdk
        from fdr.snippets_factory import (
            SdkSnippetsCreate_Typescript,
            SingleTypescriptSnippetCreate,
            TypeScriptSnippetCode,
        )

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snippets_factory.create_snippets_for_sdk(
                org_id="orgId",
                api_id="apiId",
                snippets=SdkSnippetsCreate_Typescript(
                    sdk=TypeScriptSdk(
                        package="package",
                        version="version",
                    ),
                    snippets=[
                        SingleTypescriptSnippetCreate(
                            snippet=TypeScriptSnippetCode(
                                client="client",
                            ),
                            endpoint=EndpointIdentifier(
                                path="path",
                                method="GET",
                            ),
                        ),
                        SingleTypescriptSnippetCreate(
                            snippet=TypeScriptSnippetCode(
                                client="client",
                            ),
                            endpoint=EndpointIdentifier(
                                path="path",
                                method="GET",
                            ),
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_snippets_for_sdk(
            org_id=org_id, api_id=api_id, snippets=snippets, request_options=request_options
        )
        return _response.data
