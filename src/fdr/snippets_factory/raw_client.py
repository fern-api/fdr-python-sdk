# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.unauthorized_error import UnauthorizedError
from ..commons.errors.user_not_in_org_error import UserNotInOrgError
from ..commons.types.api_id import ApiId
from ..commons.types.org_id import OrgId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..snippets.errors.org_id_not_found import OrgIdNotFound
from ..snippets.errors.sdk_not_found import SdkNotFound
from .types.sdk_snippets_create import SdkSnippetsCreate

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawSnippetsFactoryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_snippets_for_sdk(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        snippets: SdkSnippetsCreate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        snippets : SdkSnippetsCreate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "snippets/create",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "snippets": convert_and_respect_annotation_metadata(
                    object_=snippets, annotation=SdkSnippetsCreate, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSnippetsFactoryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_snippets_for_sdk(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        snippets: SdkSnippetsCreate,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        snippets : SdkSnippetsCreate

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snippets/create",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "snippets": convert_and_respect_annotation_metadata(
                    object_=snippets, annotation=SdkSnippetsCreate, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
