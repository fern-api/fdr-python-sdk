# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .csharp_snippet import CsharpSnippet
from .go_snippet import GoSnippet
from .java_snippet import JavaSnippet
from .python_snippet import PythonSnippet
from .ruby_snippet import RubySnippet
from .type_script_snippet import TypeScriptSnippet

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def typescript(self, value: TypeScriptSnippet) -> Snippet:
        if IS_PYDANTIC_V2:
            return Snippet(root=_Snippet.Typescript(**value.dict(exclude_unset=True), type="typescript"))  # type: ignore
        else:
            return Snippet(__root__=_Snippet.Typescript(**value.dict(exclude_unset=True), type="typescript"))  # type: ignore

    def python(self, value: PythonSnippet) -> Snippet:
        if IS_PYDANTIC_V2:
            return Snippet(root=_Snippet.Python(**value.dict(exclude_unset=True), type="python"))  # type: ignore
        else:
            return Snippet(__root__=_Snippet.Python(**value.dict(exclude_unset=True), type="python"))  # type: ignore

    def java(self, value: JavaSnippet) -> Snippet:
        if IS_PYDANTIC_V2:
            return Snippet(root=_Snippet.Java(**value.dict(exclude_unset=True), type="java"))  # type: ignore
        else:
            return Snippet(__root__=_Snippet.Java(**value.dict(exclude_unset=True), type="java"))  # type: ignore

    def go(self, value: GoSnippet) -> Snippet:
        if IS_PYDANTIC_V2:
            return Snippet(root=_Snippet.Go(**value.dict(exclude_unset=True), type="go"))  # type: ignore
        else:
            return Snippet(__root__=_Snippet.Go(**value.dict(exclude_unset=True), type="go"))  # type: ignore

    def ruby(self, value: RubySnippet) -> Snippet:
        if IS_PYDANTIC_V2:
            return Snippet(root=_Snippet.Ruby(**value.dict(exclude_unset=True), type="ruby"))  # type: ignore
        else:
            return Snippet(__root__=_Snippet.Ruby(**value.dict(exclude_unset=True), type="ruby"))  # type: ignore

    def csharp(self, value: CsharpSnippet) -> Snippet:
        if IS_PYDANTIC_V2:
            return Snippet(root=_Snippet.Csharp(**value.dict(exclude_unset=True), type="csharp"))  # type: ignore
        else:
            return Snippet(__root__=_Snippet.Csharp(**value.dict(exclude_unset=True), type="csharp"))  # type: ignore


class Snippet(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _Snippet.Typescript, _Snippet.Python, _Snippet.Java, _Snippet.Go, _Snippet.Ruby, _Snippet.Csharp
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _Snippet.Typescript, _Snippet.Python, _Snippet.Java, _Snippet.Go, _Snippet.Ruby, _Snippet.Csharp
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _Snippet.Typescript, _Snippet.Python, _Snippet.Java, _Snippet.Go, _Snippet.Ruby, _Snippet.Csharp
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _Snippet.Typescript, _Snippet.Python, _Snippet.Java, _Snippet.Go, _Snippet.Ruby, _Snippet.Csharp
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        typescript: typing.Callable[[TypeScriptSnippet], T_Result],
        python: typing.Callable[[PythonSnippet], T_Result],
        java: typing.Callable[[JavaSnippet], T_Result],
        go: typing.Callable[[GoSnippet], T_Result],
        ruby: typing.Callable[[RubySnippet], T_Result],
        csharp: typing.Callable[[CsharpSnippet], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "typescript":
            return typescript(TypeScriptSnippet(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "python":
            return python(PythonSnippet(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "java":
            return java(JavaSnippet(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "go":
            return go(GoSnippet(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "ruby":
            return ruby(RubySnippet(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "csharp":
            return csharp(CsharpSnippet(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _Snippet:
    class Typescript(TypeScriptSnippet):
        type: typing.Literal["typescript"] = "typescript"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Python(PythonSnippet):
        type: typing.Literal["python"] = "python"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Java(JavaSnippet):
        type: typing.Literal["java"] = "java"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Go(GoSnippet):
        type: typing.Literal["go"] = "go"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Ruby(RubySnippet):
        type: typing.Literal["ruby"] = "ruby"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Csharp(CsharpSnippet):
        type: typing.Literal["csharp"] = "csharp"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(Snippet)
