# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .csharp_sdk_request import CsharpSdkRequest
from .go_sdk_request import GoSdkRequest
from .java_sdk_request import JavaSdkRequest
from .python_sdk_request import PythonSdkRequest
from .ruby_sdk_request import RubySdkRequest
from .type_script_sdk_request import TypeScriptSdkRequest

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def typescript(self, value: TypeScriptSdkRequest) -> SdkRequest:
        if IS_PYDANTIC_V2:
            return SdkRequest(root=_SdkRequest.Typescript(**value.dict(exclude_unset=True), type="typescript"))  # type: ignore
        else:
            return SdkRequest(__root__=_SdkRequest.Typescript(**value.dict(exclude_unset=True), type="typescript"))  # type: ignore

    def python(self, value: PythonSdkRequest) -> SdkRequest:
        if IS_PYDANTIC_V2:
            return SdkRequest(root=_SdkRequest.Python(**value.dict(exclude_unset=True), type="python"))  # type: ignore
        else:
            return SdkRequest(__root__=_SdkRequest.Python(**value.dict(exclude_unset=True), type="python"))  # type: ignore

    def go(self, value: GoSdkRequest) -> SdkRequest:
        if IS_PYDANTIC_V2:
            return SdkRequest(root=_SdkRequest.Go(**value.dict(exclude_unset=True), type="go"))  # type: ignore
        else:
            return SdkRequest(__root__=_SdkRequest.Go(**value.dict(exclude_unset=True), type="go"))  # type: ignore

    def ruby(self, value: RubySdkRequest) -> SdkRequest:
        if IS_PYDANTIC_V2:
            return SdkRequest(root=_SdkRequest.Ruby(**value.dict(exclude_unset=True), type="ruby"))  # type: ignore
        else:
            return SdkRequest(__root__=_SdkRequest.Ruby(**value.dict(exclude_unset=True), type="ruby"))  # type: ignore

    def java(self, value: JavaSdkRequest) -> SdkRequest:
        if IS_PYDANTIC_V2:
            return SdkRequest(root=_SdkRequest.Java(**value.dict(exclude_unset=True), type="java"))  # type: ignore
        else:
            return SdkRequest(__root__=_SdkRequest.Java(**value.dict(exclude_unset=True), type="java"))  # type: ignore

    def csharp(self, value: CsharpSdkRequest) -> SdkRequest:
        if IS_PYDANTIC_V2:
            return SdkRequest(root=_SdkRequest.Csharp(**value.dict(exclude_unset=True), type="csharp"))  # type: ignore
        else:
            return SdkRequest(__root__=_SdkRequest.Csharp(**value.dict(exclude_unset=True), type="csharp"))  # type: ignore


class SdkRequest(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _SdkRequest.Typescript,
                _SdkRequest.Python,
                _SdkRequest.Go,
                _SdkRequest.Ruby,
                _SdkRequest.Java,
                _SdkRequest.Csharp,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _SdkRequest.Typescript,
            _SdkRequest.Python,
            _SdkRequest.Go,
            _SdkRequest.Ruby,
            _SdkRequest.Java,
            _SdkRequest.Csharp,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _SdkRequest.Typescript,
                _SdkRequest.Python,
                _SdkRequest.Go,
                _SdkRequest.Ruby,
                _SdkRequest.Java,
                _SdkRequest.Csharp,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _SdkRequest.Typescript,
            _SdkRequest.Python,
            _SdkRequest.Go,
            _SdkRequest.Ruby,
            _SdkRequest.Java,
            _SdkRequest.Csharp,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        typescript: typing.Callable[[TypeScriptSdkRequest], T_Result],
        python: typing.Callable[[PythonSdkRequest], T_Result],
        go: typing.Callable[[GoSdkRequest], T_Result],
        ruby: typing.Callable[[RubySdkRequest], T_Result],
        java: typing.Callable[[JavaSdkRequest], T_Result],
        csharp: typing.Callable[[CsharpSdkRequest], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "typescript":
            return typescript(TypeScriptSdkRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "python":
            return python(PythonSdkRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "go":
            return go(GoSdkRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "ruby":
            return ruby(RubySdkRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "java":
            return java(JavaSdkRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "csharp":
            return csharp(CsharpSdkRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _SdkRequest:
    class Typescript(TypeScriptSdkRequest):
        type: typing.Literal["typescript"] = "typescript"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Python(PythonSdkRequest):
        type: typing.Literal["python"] = "python"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Go(GoSdkRequest):
        type: typing.Literal["go"] = "go"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Ruby(RubySdkRequest):
        type: typing.Literal["ruby"] = "ruby"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Java(JavaSdkRequest):
        type: typing.Literal["java"] = "java"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Csharp(CsharpSdkRequest):
        type: typing.Literal["csharp"] = "csharp"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(SdkRequest)
