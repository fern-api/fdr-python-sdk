# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .auth_payload import AuthPayload
from .parameter_payload import ParameterPayload


class CustomSnippetPayload(UniversalBaseModel):
    headers: typing.Optional[typing.List[ParameterPayload]] = None
    path_parameters: typing_extensions.Annotated[
        typing.Optional[typing.List[ParameterPayload]], FieldMetadata(alias="pathParameters")
    ] = None
    query_parameters: typing_extensions.Annotated[
        typing.Optional[typing.List[ParameterPayload]], FieldMetadata(alias="queryParameters")
    ] = None
    request_body: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]], FieldMetadata(alias="requestBody")
    ] = None
    auth: typing.Optional[AuthPayload] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
