# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .csharp_sdk import CsharpSdk
from .go_sdk import GoSdk
from .java_sdk import JavaSdk
from .python_sdk import PythonSdk
from .ruby_sdk import RubySdk
from .type_script_sdk import TypeScriptSdk

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def typescript(self, value: TypeScriptSdk) -> Sdk:
        if IS_PYDANTIC_V2:
            return Sdk(root=_Sdk.Typescript(**value.dict(exclude_unset=True), type="typescript"))  # type: ignore
        else:
            return Sdk(__root__=_Sdk.Typescript(**value.dict(exclude_unset=True), type="typescript"))  # type: ignore

    def python(self, value: PythonSdk) -> Sdk:
        if IS_PYDANTIC_V2:
            return Sdk(root=_Sdk.Python(**value.dict(exclude_unset=True), type="python"))  # type: ignore
        else:
            return Sdk(__root__=_Sdk.Python(**value.dict(exclude_unset=True), type="python"))  # type: ignore

    def go(self, value: GoSdk) -> Sdk:
        if IS_PYDANTIC_V2:
            return Sdk(root=_Sdk.Go(**value.dict(exclude_unset=True), type="go"))  # type: ignore
        else:
            return Sdk(__root__=_Sdk.Go(**value.dict(exclude_unset=True), type="go"))  # type: ignore

    def ruby(self, value: RubySdk) -> Sdk:
        if IS_PYDANTIC_V2:
            return Sdk(root=_Sdk.Ruby(**value.dict(exclude_unset=True), type="ruby"))  # type: ignore
        else:
            return Sdk(__root__=_Sdk.Ruby(**value.dict(exclude_unset=True), type="ruby"))  # type: ignore

    def java(self, value: JavaSdk) -> Sdk:
        if IS_PYDANTIC_V2:
            return Sdk(root=_Sdk.Java(**value.dict(exclude_unset=True), type="java"))  # type: ignore
        else:
            return Sdk(__root__=_Sdk.Java(**value.dict(exclude_unset=True), type="java"))  # type: ignore

    def csharp(self, value: CsharpSdk) -> Sdk:
        if IS_PYDANTIC_V2:
            return Sdk(root=_Sdk.Csharp(**value.dict(exclude_unset=True), type="csharp"))  # type: ignore
        else:
            return Sdk(__root__=_Sdk.Csharp(**value.dict(exclude_unset=True), type="csharp"))  # type: ignore


class Sdk(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Sdk.Typescript, _Sdk.Python, _Sdk.Go, _Sdk.Ruby, _Sdk.Java, _Sdk.Csharp],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_Sdk.Typescript, _Sdk.Python, _Sdk.Go, _Sdk.Ruby, _Sdk.Java, _Sdk.Csharp]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Sdk.Typescript, _Sdk.Python, _Sdk.Go, _Sdk.Ruby, _Sdk.Java, _Sdk.Csharp],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_Sdk.Typescript, _Sdk.Python, _Sdk.Go, _Sdk.Ruby, _Sdk.Java, _Sdk.Csharp]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        typescript: typing.Callable[[TypeScriptSdk], T_Result],
        python: typing.Callable[[PythonSdk], T_Result],
        go: typing.Callable[[GoSdk], T_Result],
        ruby: typing.Callable[[RubySdk], T_Result],
        java: typing.Callable[[JavaSdk], T_Result],
        csharp: typing.Callable[[CsharpSdk], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "typescript":
            return typescript(TypeScriptSdk(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "python":
            return python(PythonSdk(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "go":
            return go(GoSdk(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "ruby":
            return ruby(RubySdk(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "java":
            return java(JavaSdk(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "csharp":
            return csharp(CsharpSdk(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _Sdk:
    class Typescript(TypeScriptSdk):
        type: typing.Literal["typescript"] = "typescript"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Python(PythonSdk):
        type: typing.Literal["python"] = "python"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Go(GoSdk):
        type: typing.Literal["go"] = "go"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Ruby(RubySdk):
        type: typing.Literal["ruby"] = "ruby"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Java(JavaSdk):
        type: typing.Literal["java"] = "java"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Csharp(CsharpSdk):
        type: typing.Literal["csharp"] = "csharp"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(Sdk)
