# This file was auto-generated by Fern from our API Definition.

import typing

from ..commons.types.url import Url
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawDocsCacheClient, RawDocsCacheClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DocsCacheClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDocsCacheClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDocsCacheClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDocsCacheClient
        """
        return self._raw_client

    def invalidate(self, *, url: Url, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.docs_cache.invalidate(
            url="url",
        )
        """
        _response = self._raw_client.invalidate(url=url, request_options=request_options)
        return _response.data


class AsyncDocsCacheClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDocsCacheClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDocsCacheClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDocsCacheClient
        """
        return self._raw_client

    async def invalidate(self, *, url: Url, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs_cache.invalidate(
                url="url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.invalidate(url=url, request_options=request_options)
        return _response.data
