# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2
from .....core.serialization import FieldMetadata
from ...commons.types.with_description import WithDescription


class HeaderAuth(WithDescription):
    name_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="nameOverride")] = None
    header_wire_value: typing_extensions.Annotated[str, FieldMetadata(alias="headerWireValue")]
    prefix: typing.Optional[str] = pydantic.Field(default=None)
    """
    The prefix that comes before the header
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
