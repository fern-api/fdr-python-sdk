# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def openapi(self) -> Source:
        if IS_PYDANTIC_V2:
            return Source(root=_Source.Openapi(type="openapi"))  # type: ignore
        else:
            return Source(__root__=_Source.Openapi(type="openapi"))  # type: ignore

    def asyncapi(self) -> Source:
        if IS_PYDANTIC_V2:
            return Source(root=_Source.Asyncapi(type="asyncapi"))  # type: ignore
        else:
            return Source(__root__=_Source.Asyncapi(type="asyncapi"))  # type: ignore

    def proto(self) -> Source:
        if IS_PYDANTIC_V2:
            return Source(root=_Source.Proto(type="proto"))  # type: ignore
        else:
            return Source(__root__=_Source.Proto(type="proto"))  # type: ignore


class Source(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Source.Openapi, _Source.Asyncapi, _Source.Proto], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Source.Openapi, _Source.Asyncapi, _Source.Proto]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Source.Openapi, _Source.Asyncapi, _Source.Proto], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Source.Openapi, _Source.Asyncapi, _Source.Proto]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        openapi: typing.Callable[[], T_Result],
        asyncapi: typing.Callable[[], T_Result],
        proto: typing.Callable[[], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "openapi":
            return openapi()
        if unioned_value.type == "asyncapi":
            return asyncapi()
        if unioned_value.type == "proto":
            return proto()

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _Source:
    class Openapi(UniversalBaseModel):
        type: typing.Literal["openapi"] = "openapi"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Asyncapi(UniversalBaseModel):
        type: typing.Literal["asyncapi"] = "asyncapi"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Proto(UniversalBaseModel):
        type: typing.Literal["proto"] = "proto"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(Source)
