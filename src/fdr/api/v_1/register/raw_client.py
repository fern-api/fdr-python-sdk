# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....commons.errors.unauthorized_error import UnauthorizedError
from ....commons.errors.user_not_in_org_error import UserNotInOrgError
from ....commons.types.api_id import ApiId
from ....commons.types.org_id import OrgId
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.pydantic_utilities import parse_obj_as
from ....core.request_options import RequestOptions
from ....core.serialization import convert_and_respect_annotation_metadata
from ...latest.types.api_definition import ApiDefinition as api_latest_types_api_definition_ApiDefinition
from .types.api_definition import ApiDefinition as api_v_1_register_types_api_definition_ApiDefinition
from .types.dynamic_ir import DynamicIr
from .types.register_api_definition_response import RegisterApiDefinitionResponse
from .types.source import Source
from .types.source_id import SourceId

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawRegisterClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def register_api_definition(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        definition: typing.Optional[api_v_1_register_types_api_definition_ApiDefinition] = OMIT,
        definition_v_2: typing.Optional[api_latest_types_api_definition_ApiDefinition] = OMIT,
        sources: typing.Optional[typing.Dict[SourceId, Source]] = OMIT,
        dynamic_i_rs: typing.Optional[typing.Dict[str, DynamicIr]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[RegisterApiDefinitionResponse]:
        """
        Parameters
        ----------
        org_id : OrgId

        api_id : ApiId

        definition : typing.Optional[api_v_1_register_types_api_definition_ApiDefinition]

        definition_v_2 : typing.Optional[api_latest_types_api_definition_ApiDefinition]

        sources : typing.Optional[typing.Dict[SourceId, Source]]

        dynamic_i_rs : typing.Optional[typing.Dict[str, DynamicIr]]
            A mapping of languages to dynamic IR.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[RegisterApiDefinitionResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "registry/api/register",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "definition": convert_and_respect_annotation_metadata(
                    object_=definition,
                    annotation=api_v_1_register_types_api_definition_ApiDefinition,
                    direction="write",
                ),
                "definitionV2": convert_and_respect_annotation_metadata(
                    object_=definition_v_2, annotation=api_latest_types_api_definition_ApiDefinition, direction="write"
                ),
                "sources": convert_and_respect_annotation_metadata(
                    object_=sources, annotation=typing.Dict[SourceId, Source], direction="write"
                ),
                "dynamicIRs": convert_and_respect_annotation_metadata(
                    object_=dynamic_i_rs, annotation=typing.Dict[str, DynamicIr], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                RegisterApiDefinitionResponse,
                parse_obj_as(
                    type_=RegisterApiDefinitionResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawRegisterClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def register_api_definition(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        definition: typing.Optional[api_v_1_register_types_api_definition_ApiDefinition] = OMIT,
        definition_v_2: typing.Optional[api_latest_types_api_definition_ApiDefinition] = OMIT,
        sources: typing.Optional[typing.Dict[SourceId, Source]] = OMIT,
        dynamic_i_rs: typing.Optional[typing.Dict[str, DynamicIr]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[RegisterApiDefinitionResponse]:
        """
        Parameters
        ----------
        org_id : OrgId

        api_id : ApiId

        definition : typing.Optional[api_v_1_register_types_api_definition_ApiDefinition]

        definition_v_2 : typing.Optional[api_latest_types_api_definition_ApiDefinition]

        sources : typing.Optional[typing.Dict[SourceId, Source]]

        dynamic_i_rs : typing.Optional[typing.Dict[str, DynamicIr]]
            A mapping of languages to dynamic IR.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[RegisterApiDefinitionResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "registry/api/register",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "definition": convert_and_respect_annotation_metadata(
                    object_=definition,
                    annotation=api_v_1_register_types_api_definition_ApiDefinition,
                    direction="write",
                ),
                "definitionV2": convert_and_respect_annotation_metadata(
                    object_=definition_v_2, annotation=api_latest_types_api_definition_ApiDefinition, direction="write"
                ),
                "sources": convert_and_respect_annotation_metadata(
                    object_=sources, annotation=typing.Dict[SourceId, Source], direction="write"
                ),
                "dynamicIRs": convert_and_respect_annotation_metadata(
                    object_=dynamic_i_rs, annotation=typing.Dict[str, DynamicIr], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                RegisterApiDefinitionResponse,
                parse_obj_as(
                    type_=RegisterApiDefinitionResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
