# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .example_server_sent_event import ExampleServerSentEvent

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def json(self, value: typing.Optional[typing.Any]) -> ExampleEndpointResponse:
        if IS_PYDANTIC_V2:
            return ExampleEndpointResponse(root=_ExampleEndpointResponse.Json(type="json", value=value))  # type: ignore
        else:
            return ExampleEndpointResponse(__root__=_ExampleEndpointResponse.Json(type="json", value=value))  # type: ignore

    def filename(self, value: str) -> ExampleEndpointResponse:
        if IS_PYDANTIC_V2:
            return ExampleEndpointResponse(root=_ExampleEndpointResponse.Filename(type="filename", value=value))  # type: ignore
        else:
            return ExampleEndpointResponse(__root__=_ExampleEndpointResponse.Filename(type="filename", value=value))  # type: ignore

    def stream(self, value: typing.List[typing.Optional[typing.Any]]) -> ExampleEndpointResponse:
        if IS_PYDANTIC_V2:
            return ExampleEndpointResponse(root=_ExampleEndpointResponse.Stream(type="stream", value=value))  # type: ignore
        else:
            return ExampleEndpointResponse(__root__=_ExampleEndpointResponse.Stream(type="stream", value=value))  # type: ignore

    def sse(self, value: typing.List[ExampleServerSentEvent]) -> ExampleEndpointResponse:
        if IS_PYDANTIC_V2:
            return ExampleEndpointResponse(root=_ExampleEndpointResponse.Sse(type="sse", value=value))  # type: ignore
        else:
            return ExampleEndpointResponse(__root__=_ExampleEndpointResponse.Sse(type="sse", value=value))  # type: ignore


class ExampleEndpointResponse(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _ExampleEndpointResponse.Json,
                _ExampleEndpointResponse.Filename,
                _ExampleEndpointResponse.Stream,
                _ExampleEndpointResponse.Sse,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _ExampleEndpointResponse.Json,
            _ExampleEndpointResponse.Filename,
            _ExampleEndpointResponse.Stream,
            _ExampleEndpointResponse.Sse,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _ExampleEndpointResponse.Json,
                _ExampleEndpointResponse.Filename,
                _ExampleEndpointResponse.Stream,
                _ExampleEndpointResponse.Sse,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _ExampleEndpointResponse.Json,
            _ExampleEndpointResponse.Filename,
            _ExampleEndpointResponse.Stream,
            _ExampleEndpointResponse.Sse,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        json: typing.Callable[[typing.Optional[typing.Any]], T_Result],
        filename: typing.Callable[[str], T_Result],
        stream: typing.Callable[[typing.List[typing.Optional[typing.Any]]], T_Result],
        sse: typing.Callable[[typing.List[ExampleServerSentEvent]], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "json":
            return json(unioned_value.value)
        if unioned_value.type == "filename":
            return filename(unioned_value.value)
        if unioned_value.type == "stream":
            return stream(unioned_value.value)
        if unioned_value.type == "sse":
            return sse(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _ExampleEndpointResponse:
    class Json(UniversalBaseModel):
        type: typing.Literal["json"] = "json"
        value: typing.Optional[typing.Any] = None

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Filename(UniversalBaseModel):
        type: typing.Literal["filename"] = "filename"
        value: str

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Stream(UniversalBaseModel):
        type: typing.Literal["stream"] = "stream"
        value: typing.List[typing.Optional[typing.Any]]

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Sse(UniversalBaseModel):
        type: typing.Literal["sse"] = "sse"
        value: typing.List[ExampleServerSentEvent]

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(ExampleEndpointResponse)
