# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from ...type.types.object_type import ObjectType

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def object(self, value: ObjectType) -> WebSocketMessageBodyShape:
        if IS_PYDANTIC_V2:
            return WebSocketMessageBodyShape(
                root=_WebSocketMessageBodyShape.Object(**value.dict(exclude_unset=True), type="object")
            )  # type: ignore
        else:
            return WebSocketMessageBodyShape(
                __root__=_WebSocketMessageBodyShape.Object(**value.dict(exclude_unset=True), type="object")
            )  # type: ignore

    def reference(self, value: TypeReference) -> WebSocketMessageBodyShape:
        if IS_PYDANTIC_V2:
            return WebSocketMessageBodyShape(root=_WebSocketMessageBodyShape.Reference(type="reference", value=value))  # type: ignore
        else:
            return WebSocketMessageBodyShape(
                __root__=_WebSocketMessageBodyShape.Reference(type="reference", value=value)
            )  # type: ignore


class WebSocketMessageBodyShape(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_WebSocketMessageBodyShape.Object, _WebSocketMessageBodyShape.Reference],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_WebSocketMessageBodyShape.Object, _WebSocketMessageBodyShape.Reference]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_WebSocketMessageBodyShape.Object, _WebSocketMessageBodyShape.Reference],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_WebSocketMessageBodyShape.Object, _WebSocketMessageBodyShape.Reference]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, object: typing.Callable[[ObjectType], T_Result], reference: typing.Callable[["TypeReference"], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "object":
            return object(ObjectType(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "reference":
            return reference(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


from ...type.types.type_reference import TypeReference  # noqa: E402, F401, I001


class _WebSocketMessageBodyShape:
    class Object(ObjectType):
        type: typing.Literal["object"] = "object"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Reference(UniversalBaseModel):
        type: typing.Literal["reference"] = "reference"
        value: TypeReference

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(WebSocketMessageBodyShape)
