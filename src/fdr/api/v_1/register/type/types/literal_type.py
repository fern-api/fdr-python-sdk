# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def boolean_literal(self, value: bool) -> LiteralType:
        if IS_PYDANTIC_V2:
            return LiteralType(root=_LiteralType.BooleanLiteral(type="booleanLiteral", value=value))  # type: ignore
        else:
            return LiteralType(__root__=_LiteralType.BooleanLiteral(type="booleanLiteral", value=value))  # type: ignore

    def string_literal(self, value: str) -> LiteralType:
        if IS_PYDANTIC_V2:
            return LiteralType(root=_LiteralType.StringLiteral(type="stringLiteral", value=value))  # type: ignore
        else:
            return LiteralType(__root__=_LiteralType.StringLiteral(type="stringLiteral", value=value))  # type: ignore


class LiteralType(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_LiteralType.BooleanLiteral, _LiteralType.StringLiteral], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_LiteralType.BooleanLiteral, _LiteralType.StringLiteral]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_LiteralType.BooleanLiteral, _LiteralType.StringLiteral], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_LiteralType.BooleanLiteral, _LiteralType.StringLiteral]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, boolean_literal: typing.Callable[[bool], T_Result], string_literal: typing.Callable[[str], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "booleanLiteral":
            return boolean_literal(unioned_value.value)
        if unioned_value.type == "stringLiteral":
            return string_literal(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _LiteralType:
    class BooleanLiteral(UniversalBaseModel):
        type: typing.Literal["booleanLiteral"] = "booleanLiteral"
        value: bool

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class StringLiteral(UniversalBaseModel):
        type: typing.Literal["stringLiteral"] = "stringLiteral"
        value: str

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(LiteralType)
