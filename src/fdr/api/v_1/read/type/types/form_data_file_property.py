# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .file_property_array import FilePropertyArray
from .file_property_single import FilePropertySingle

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def file(self, value: FilePropertySingle) -> FormDataFileProperty:
        if IS_PYDANTIC_V2:
            return FormDataFileProperty(root=_FormDataFileProperty.File(**value.dict(exclude_unset=True), type="file"))  # type: ignore
        else:
            return FormDataFileProperty(
                __root__=_FormDataFileProperty.File(**value.dict(exclude_unset=True), type="file")
            )  # type: ignore

    def file_array(self, value: FilePropertyArray) -> FormDataFileProperty:
        if IS_PYDANTIC_V2:
            return FormDataFileProperty(
                root=_FormDataFileProperty.FileArray(**value.dict(exclude_unset=True), type="fileArray")
            )  # type: ignore
        else:
            return FormDataFileProperty(
                __root__=_FormDataFileProperty.FileArray(**value.dict(exclude_unset=True), type="fileArray")
            )  # type: ignore


class FormDataFileProperty(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_FormDataFileProperty.File, _FormDataFileProperty.FileArray],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_FormDataFileProperty.File, _FormDataFileProperty.FileArray]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_FormDataFileProperty.File, _FormDataFileProperty.FileArray],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_FormDataFileProperty.File, _FormDataFileProperty.FileArray]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        file: typing.Callable[[FilePropertySingle], T_Result],
        file_array: typing.Callable[[FilePropertyArray], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "file":
            return file(FilePropertySingle(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "fileArray":
            return file_array(FilePropertyArray(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _FormDataFileProperty:
    class File(FilePropertySingle):
        type: typing.Literal["file"] = "file"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class FileArray(FilePropertyArray):
        type: typing.Literal["fileArray"] = "fileArray"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(FormDataFileProperty)
