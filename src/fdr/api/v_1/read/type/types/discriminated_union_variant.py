# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2
from ......core.serialization import FieldMetadata
from ....commons.types.with_availability import WithAvailability
from ....commons.types.with_description import WithDescription
from .object_type import ObjectType


class DiscriminatedUnionVariant(WithDescription, WithAvailability):
    discriminant_value: typing_extensions.Annotated[str, FieldMetadata(alias="discriminantValue")]
    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = None
    additional_properties: typing_extensions.Annotated[ObjectType, FieldMetadata(alias="additionalProperties")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
