# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....commons.errors.unauthorized_error import UnauthorizedError
from ....commons.types.api_definition_id import ApiDefinitionId
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.pydantic_utilities import parse_obj_as
from ....core.request_options import RequestOptions
from .errors.api_does_not_exist_error import ApiDoesNotExistError
from .types.api_definition import ApiDefinition


class RawReadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_api(
        self, api_definition_id: ApiDefinitionId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ApiDefinition]:
        """
        Parameters
        ----------
        api_definition_id : ApiDefinitionId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ApiDefinition]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"registry/api/load/{jsonable_encoder(api_definition_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                ApiDefinition,
                parse_obj_as(
                    type_=ApiDefinition,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "ApiDoesNotExistError":
                raise ApiDoesNotExistError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawReadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_api(
        self, api_definition_id: ApiDefinitionId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ApiDefinition]:
        """
        Parameters
        ----------
        api_definition_id : ApiDefinitionId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ApiDefinition]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"registry/api/load/{jsonable_encoder(api_definition_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                ApiDefinition,
                parse_obj_as(
                    type_=ApiDefinition,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "ApiDoesNotExistError":
                raise ApiDoesNotExistError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
