# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .basic_auth import BasicAuth as api_v_1_read_types_basic_auth_BasicAuth
from .bearer_auth import BearerAuth as api_v_1_read_types_bearer_auth_BearerAuth
from .header_auth import HeaderAuth
from .o_auth import OAuth as api_v_1_read_types_o_auth_OAuth

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def bearer_auth(self, value: api_v_1_read_types_bearer_auth_BearerAuth) -> ApiAuth:
        if IS_PYDANTIC_V2:
            return ApiAuth(root=_ApiAuth.BearerAuth(**value.dict(exclude_unset=True), type="bearerAuth"))  # type: ignore
        else:
            return ApiAuth(__root__=_ApiAuth.BearerAuth(**value.dict(exclude_unset=True), type="bearerAuth"))  # type: ignore

    def basic_auth(self, value: api_v_1_read_types_basic_auth_BasicAuth) -> ApiAuth:
        if IS_PYDANTIC_V2:
            return ApiAuth(root=_ApiAuth.BasicAuth(**value.dict(exclude_unset=True), type="basicAuth"))  # type: ignore
        else:
            return ApiAuth(__root__=_ApiAuth.BasicAuth(**value.dict(exclude_unset=True), type="basicAuth"))  # type: ignore

    def header(self, value: HeaderAuth) -> ApiAuth:
        if IS_PYDANTIC_V2:
            return ApiAuth(root=_ApiAuth.Header(**value.dict(exclude_unset=True), type="header"))  # type: ignore
        else:
            return ApiAuth(__root__=_ApiAuth.Header(**value.dict(exclude_unset=True), type="header"))  # type: ignore

    def o_auth(self, value: api_v_1_read_types_o_auth_OAuth) -> ApiAuth:
        if IS_PYDANTIC_V2:
            return ApiAuth(root=_ApiAuth.OAuth(type="oAuth", value=value))  # type: ignore
        else:
            return ApiAuth(__root__=_ApiAuth.OAuth(type="oAuth", value=value))  # type: ignore


class ApiAuth(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_ApiAuth.BearerAuth, _ApiAuth.BasicAuth, _ApiAuth.Header, _ApiAuth.OAuth],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_ApiAuth.BearerAuth, _ApiAuth.BasicAuth, _ApiAuth.Header, _ApiAuth.OAuth]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_ApiAuth.BearerAuth, _ApiAuth.BasicAuth, _ApiAuth.Header, _ApiAuth.OAuth],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_ApiAuth.BearerAuth, _ApiAuth.BasicAuth, _ApiAuth.Header, _ApiAuth.OAuth]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        bearer_auth: typing.Callable[[api_v_1_read_types_bearer_auth_BearerAuth], T_Result],
        basic_auth: typing.Callable[[api_v_1_read_types_basic_auth_BasicAuth], T_Result],
        header: typing.Callable[[HeaderAuth], T_Result],
        o_auth: typing.Callable[[api_v_1_read_types_o_auth_OAuth], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "bearerAuth":
            return bearer_auth(
                api_v_1_read_types_bearer_auth_BearerAuth(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "basicAuth":
            return basic_auth(
                api_v_1_read_types_basic_auth_BasicAuth(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "header":
            return header(HeaderAuth(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "oAuth":
            return o_auth(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _ApiAuth:
    class BearerAuth(api_v_1_read_types_bearer_auth_BearerAuth):
        type: typing.Literal["bearerAuth"] = "bearerAuth"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class BasicAuth(api_v_1_read_types_basic_auth_BasicAuth):
        type: typing.Literal["basicAuth"] = "basicAuth"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Header(HeaderAuth):
        type: typing.Literal["header"] = "header"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class OAuth(UniversalBaseModel):
        type: typing.Literal["oAuth"] = "oAuth"
        value: api_v_1_read_types_o_auth_OAuth

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(ApiAuth)
