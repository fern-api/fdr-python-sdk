# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .o_auth_client_credentials_referenced_endpoint import OAuthClientCredentialsReferencedEndpoint

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def referenced_endpoint(self, value: OAuthClientCredentialsReferencedEndpoint) -> OAuthClientCredentials:
        if IS_PYDANTIC_V2:
            return OAuthClientCredentials(
                root=_OAuthClientCredentials.ReferencedEndpoint(
                    **value.dict(exclude_unset=True), type="referencedEndpoint"
                )
            )  # type: ignore
        else:
            return OAuthClientCredentials(
                __root__=_OAuthClientCredentials.ReferencedEndpoint(
                    **value.dict(exclude_unset=True), type="referencedEndpoint"
                )
            )  # type: ignore


class OAuthClientCredentials(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_OAuthClientCredentials.ReferencedEndpoint]

        def get_as_union(self) -> typing.Union[_OAuthClientCredentials.ReferencedEndpoint]:
            return self.root
    else:
        __root__: typing.Union[_OAuthClientCredentials.ReferencedEndpoint]

        def get_as_union(self) -> typing.Union[_OAuthClientCredentials.ReferencedEndpoint]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, referenced_endpoint: typing.Callable[[OAuthClientCredentialsReferencedEndpoint], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "referencedEndpoint":
            return referenced_endpoint(
                OAuthClientCredentialsReferencedEndpoint(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _OAuthClientCredentials:
    class ReferencedEndpoint(OAuthClientCredentialsReferencedEndpoint):
        type: typing.Literal["referencedEndpoint"] = "referencedEndpoint"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(OAuthClientCredentials)
