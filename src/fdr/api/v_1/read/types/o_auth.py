# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .o_auth_client_credentials import OAuthClientCredentials

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def client_credentials(self, value: OAuthClientCredentials) -> OAuth:
        if IS_PYDANTIC_V2:
            return OAuth(root=_OAuth.ClientCredentials(type="clientCredentials", value=value))  # type: ignore
        else:
            return OAuth(__root__=_OAuth.ClientCredentials(type="clientCredentials", value=value))  # type: ignore


class OAuth(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_OAuth.ClientCredentials]

        def get_as_union(self) -> typing.Union[_OAuth.ClientCredentials]:
            return self.root
    else:
        __root__: typing.Union[_OAuth.ClientCredentials]

        def get_as_union(self) -> typing.Union[_OAuth.ClientCredentials]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, client_credentials: typing.Callable[[OAuthClientCredentials], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "clientCredentials":
            return client_credentials(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _OAuth:
    class ClientCredentials(UniversalBaseModel):
        type: typing.Literal["clientCredentials"] = "clientCredentials"
        value: OAuthClientCredentials

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(OAuth)
