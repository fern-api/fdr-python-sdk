# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from ...type.types.object_type import ObjectType
from .file_download_response_body_shape import FileDownloadResponseBodyShape
from .stream_condition_response import StreamConditionResponse
from .stream_response_v_2 import StreamResponseV2

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def object(self, value: ObjectType) -> HttpResponseBodyShape:
        if IS_PYDANTIC_V2:
            return HttpResponseBodyShape(
                root=_HttpResponseBodyShape.Object(**value.dict(exclude_unset=True), type="object")
            )  # type: ignore
        else:
            return HttpResponseBodyShape(
                __root__=_HttpResponseBodyShape.Object(**value.dict(exclude_unset=True), type="object")
            )  # type: ignore

    def reference(self, value: TypeReference) -> HttpResponseBodyShape:
        if IS_PYDANTIC_V2:
            return HttpResponseBodyShape(root=_HttpResponseBodyShape.Reference(type="reference", value=value))  # type: ignore
        else:
            return HttpResponseBodyShape(__root__=_HttpResponseBodyShape.Reference(type="reference", value=value))  # type: ignore

    def file_download(self, value: FileDownloadResponseBodyShape) -> HttpResponseBodyShape:
        if IS_PYDANTIC_V2:
            return HttpResponseBodyShape(
                root=_HttpResponseBodyShape.FileDownload(**value.dict(exclude_unset=True), type="fileDownload")
            )  # type: ignore
        else:
            return HttpResponseBodyShape(
                __root__=_HttpResponseBodyShape.FileDownload(**value.dict(exclude_unset=True), type="fileDownload")
            )  # type: ignore

    def streaming_text(self) -> HttpResponseBodyShape:
        if IS_PYDANTIC_V2:
            return HttpResponseBodyShape(root=_HttpResponseBodyShape.StreamingText(type="streamingText"))  # type: ignore
        else:
            return HttpResponseBodyShape(__root__=_HttpResponseBodyShape.StreamingText(type="streamingText"))  # type: ignore

    def stream(self, value: StreamResponseV2) -> HttpResponseBodyShape:
        if IS_PYDANTIC_V2:
            return HttpResponseBodyShape(
                root=_HttpResponseBodyShape.Stream(**value.dict(exclude_unset=True), type="stream")
            )  # type: ignore
        else:
            return HttpResponseBodyShape(
                __root__=_HttpResponseBodyShape.Stream(**value.dict(exclude_unset=True), type="stream")
            )  # type: ignore

    def stream_condition(self, value: StreamConditionResponse) -> HttpResponseBodyShape:
        if IS_PYDANTIC_V2:
            return HttpResponseBodyShape(
                root=_HttpResponseBodyShape.StreamCondition(**value.dict(exclude_unset=True), type="streamCondition")
            )  # type: ignore
        else:
            return HttpResponseBodyShape(
                __root__=_HttpResponseBodyShape.StreamCondition(
                    **value.dict(exclude_unset=True), type="streamCondition"
                )
            )  # type: ignore


class HttpResponseBodyShape(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _HttpResponseBodyShape.Object,
                _HttpResponseBodyShape.Reference,
                _HttpResponseBodyShape.FileDownload,
                _HttpResponseBodyShape.StreamingText,
                _HttpResponseBodyShape.Stream,
                _HttpResponseBodyShape.StreamCondition,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _HttpResponseBodyShape.Object,
            _HttpResponseBodyShape.Reference,
            _HttpResponseBodyShape.FileDownload,
            _HttpResponseBodyShape.StreamingText,
            _HttpResponseBodyShape.Stream,
            _HttpResponseBodyShape.StreamCondition,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _HttpResponseBodyShape.Object,
                _HttpResponseBodyShape.Reference,
                _HttpResponseBodyShape.FileDownload,
                _HttpResponseBodyShape.StreamingText,
                _HttpResponseBodyShape.Stream,
                _HttpResponseBodyShape.StreamCondition,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _HttpResponseBodyShape.Object,
            _HttpResponseBodyShape.Reference,
            _HttpResponseBodyShape.FileDownload,
            _HttpResponseBodyShape.StreamingText,
            _HttpResponseBodyShape.Stream,
            _HttpResponseBodyShape.StreamCondition,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        object: typing.Callable[[ObjectType], T_Result],
        reference: typing.Callable[["TypeReference"], T_Result],
        file_download: typing.Callable[[FileDownloadResponseBodyShape], T_Result],
        streaming_text: typing.Callable[[], T_Result],
        stream: typing.Callable[[StreamResponseV2], T_Result],
        stream_condition: typing.Callable[[StreamConditionResponse], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "object":
            return object(ObjectType(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "reference":
            return reference(unioned_value.value)
        if unioned_value.type == "fileDownload":
            return file_download(
                FileDownloadResponseBodyShape(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "streamingText":
            return streaming_text()
        if unioned_value.type == "stream":
            return stream(StreamResponseV2(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "streamCondition":
            return stream_condition(StreamConditionResponse(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


from ...type.types.type_reference import TypeReference  # noqa: E402, F401, I001


class _HttpResponseBodyShape:
    class Object(ObjectType):
        type: typing.Literal["object"] = "object"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Reference(UniversalBaseModel):
        type: typing.Literal["reference"] = "reference"
        value: TypeReference

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class FileDownload(FileDownloadResponseBodyShape):
        type: typing.Literal["fileDownload"] = "fileDownload"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class StreamingText(UniversalBaseModel):
        type: typing.Literal["streamingText"] = "streamingText"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Stream(StreamResponseV2):
        type: typing.Literal["stream"] = "stream"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class StreamCondition(StreamConditionResponse):
        type: typing.Literal["streamCondition"] = "streamCondition"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(HttpResponseBodyShape)
