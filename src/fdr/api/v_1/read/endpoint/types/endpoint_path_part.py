# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......commons.types.property_key import PropertyKey
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def literal(self, value: str) -> EndpointPathPart:
        if IS_PYDANTIC_V2:
            return EndpointPathPart(root=_EndpointPathPart.Literal(type="literal", value=value))  # type: ignore
        else:
            return EndpointPathPart(__root__=_EndpointPathPart.Literal(type="literal", value=value))  # type: ignore

    def path_parameter(self, value: PropertyKey) -> EndpointPathPart:
        if IS_PYDANTIC_V2:
            return EndpointPathPart(root=_EndpointPathPart.PathParameter(type="pathParameter", value=value))  # type: ignore
        else:
            return EndpointPathPart(__root__=_EndpointPathPart.PathParameter(type="pathParameter", value=value))  # type: ignore


class EndpointPathPart(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_EndpointPathPart.Literal, _EndpointPathPart.PathParameter],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_EndpointPathPart.Literal, _EndpointPathPart.PathParameter]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_EndpointPathPart.Literal, _EndpointPathPart.PathParameter],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_EndpointPathPart.Literal, _EndpointPathPart.PathParameter]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, literal: typing.Callable[[str], T_Result], path_parameter: typing.Callable[[PropertyKey], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "literal":
            return literal(unioned_value.value)
        if unioned_value.type == "pathParameter":
            return path_parameter(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _EndpointPathPart:
    class Literal(UniversalBaseModel):
        type: typing.Literal["literal"] = "literal"
        value: str

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class PathParameter(UniversalBaseModel):
        type: typing.Literal["pathParameter"] = "pathParameter"
        value: PropertyKey

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(EndpointPathPart)
