# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .form_data_file import FormDataFile
from .form_data_files import FormDataFiles
from .form_data_property import FormDataProperty

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def file(self, value: FormDataFile) -> FormDataField:
        if IS_PYDANTIC_V2:
            return FormDataField(root=_FormDataField.File(**value.dict(exclude_unset=True), type="file"))  # type: ignore
        else:
            return FormDataField(__root__=_FormDataField.File(**value.dict(exclude_unset=True), type="file"))  # type: ignore

    def files(self, value: FormDataFiles) -> FormDataField:
        if IS_PYDANTIC_V2:
            return FormDataField(root=_FormDataField.Files(**value.dict(exclude_unset=True), type="files"))  # type: ignore
        else:
            return FormDataField(__root__=_FormDataField.Files(**value.dict(exclude_unset=True), type="files"))  # type: ignore

    def property(self, value: FormDataProperty) -> FormDataField:
        if IS_PYDANTIC_V2:
            return FormDataField(root=_FormDataField.Property(**value.dict(exclude_unset=True), type="property"))  # type: ignore
        else:
            return FormDataField(__root__=_FormDataField.Property(**value.dict(exclude_unset=True), type="property"))  # type: ignore


class FormDataField(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_FormDataField.File, _FormDataField.Files, _FormDataField.Property],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_FormDataField.File, _FormDataField.Files, _FormDataField.Property]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_FormDataField.File, _FormDataField.Files, _FormDataField.Property],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_FormDataField.File, _FormDataField.Files, _FormDataField.Property]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        file: typing.Callable[[FormDataFile], T_Result],
        files: typing.Callable[[FormDataFiles], T_Result],
        property: typing.Callable[[FormDataProperty], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "file":
            return file(FormDataFile(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "files":
            return files(FormDataFiles(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "property":
            return property(FormDataProperty(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _FormDataField:
    class File(FormDataFile):
        type: typing.Literal["file"] = "file"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Files(FormDataFiles):
        type: typing.Literal["files"] = "files"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Property(FormDataProperty):
        type: typing.Literal["property"] = "property"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(FormDataField)
