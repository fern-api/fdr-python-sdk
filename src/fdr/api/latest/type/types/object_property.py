# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.property_key import PropertyKey
from .....core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from .....core.serialization import FieldMetadata
from ...commons.types.with_availability import WithAvailability
from ...commons.types.with_description import WithDescription
from .object_property_access import ObjectPropertyAccess


class ObjectProperty(WithDescription, WithAvailability):
    key: PropertyKey
    value_shape: typing_extensions.Annotated["TypeShape", FieldMetadata(alias="valueShape")]
    property_access: typing_extensions.Annotated[
        typing.Optional[ObjectPropertyAccess], FieldMetadata(alias="propertyAccess")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .type_shape import TypeShape  # noqa: E402, F401, I001

update_forward_refs(ObjectProperty)
