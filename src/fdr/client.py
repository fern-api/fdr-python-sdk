# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .api.client import ApiClient, AsyncApiClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .dashboard.client import AsyncDashboardClient, DashboardClient
from .diff.client import AsyncDiffClient, DiffClient
from .docs.client import AsyncDocsClient, DocsClient
from .docs_cache.client import AsyncDocsCacheClient, DocsCacheClient
from .environment import FdrClientEnvironment
from .generators.client import AsyncGeneratorsClient, GeneratorsClient
from .git.client import AsyncGitClient, GitClient
from .sdks.client import AsyncSdksClient, SdksClient
from .snippets.client import AsyncSnippetsClient, SnippetsClient
from .snippets_factory.client import AsyncSnippetsFactoryClient, SnippetsFactoryClient
from .templates.client import AsyncTemplatesClient, TemplatesClient
from .tokens.client import AsyncTokensClient, TokensClient


class FdrClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FdrClientEnvironment
        The environment to use for requests from the client. from .environment import FdrClientEnvironment



        Defaults to FdrClientEnvironment.PROD



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from fdr import FdrClient

    client = FdrClient(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FdrClientEnvironment = FdrClientEnvironment.PROD,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.api = ApiClient(client_wrapper=self._client_wrapper)
        self.dashboard = DashboardClient(client_wrapper=self._client_wrapper)
        self.docs = DocsClient(client_wrapper=self._client_wrapper)
        self.generators = GeneratorsClient(client_wrapper=self._client_wrapper)
        self.diff = DiffClient(client_wrapper=self._client_wrapper)
        self.docs_cache = DocsCacheClient(client_wrapper=self._client_wrapper)
        self.git = GitClient(client_wrapper=self._client_wrapper)
        self.sdks = SdksClient(client_wrapper=self._client_wrapper)
        self.snippets_factory = SnippetsFactoryClient(client_wrapper=self._client_wrapper)
        self.snippets = SnippetsClient(client_wrapper=self._client_wrapper)
        self.templates = TemplatesClient(client_wrapper=self._client_wrapper)
        self.tokens = TokensClient(client_wrapper=self._client_wrapper)


class AsyncFdrClient:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FdrClientEnvironment
        The environment to use for requests from the client. from .environment import FdrClientEnvironment



        Defaults to FdrClientEnvironment.PROD



    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from fdr import AsyncFdrClient

    client = AsyncFdrClient(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FdrClientEnvironment = FdrClientEnvironment.PROD,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.api = AsyncApiClient(client_wrapper=self._client_wrapper)
        self.dashboard = AsyncDashboardClient(client_wrapper=self._client_wrapper)
        self.docs = AsyncDocsClient(client_wrapper=self._client_wrapper)
        self.generators = AsyncGeneratorsClient(client_wrapper=self._client_wrapper)
        self.diff = AsyncDiffClient(client_wrapper=self._client_wrapper)
        self.docs_cache = AsyncDocsCacheClient(client_wrapper=self._client_wrapper)
        self.git = AsyncGitClient(client_wrapper=self._client_wrapper)
        self.sdks = AsyncSdksClient(client_wrapper=self._client_wrapper)
        self.snippets_factory = AsyncSnippetsFactoryClient(client_wrapper=self._client_wrapper)
        self.snippets = AsyncSnippetsClient(client_wrapper=self._client_wrapper)
        self.templates = AsyncTemplatesClient(client_wrapper=self._client_wrapper)
        self.tokens = AsyncTokensClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: FdrClientEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
