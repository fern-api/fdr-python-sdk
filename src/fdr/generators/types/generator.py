# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .generator_id import GeneratorId
from .generator_language import GeneratorLanguage
from .generator_scripts import GeneratorScripts
from .generator_type import GeneratorType


class Generator(UniversalBaseModel):
    id: GeneratorId
    display_name: typing_extensions.Annotated[str, FieldMetadata(alias="displayName")]
    generator_type: typing_extensions.Annotated[GeneratorType, FieldMetadata(alias="generatorType")]
    generator_language: typing_extensions.Annotated[
        typing.Optional[GeneratorLanguage], FieldMetadata(alias="generatorLanguage")
    ] = None
    docker_image: typing_extensions.Annotated[str, FieldMetadata(alias="dockerImage")] = pydantic.Field()
    """
    The name of the docker image to pull to run this generator.
    """

    scripts: typing.Optional[GeneratorScripts] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
