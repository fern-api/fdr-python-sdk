# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .script import Script


class GeneratorScripts(UniversalBaseModel):
    pre_install_script: typing_extensions.Annotated[
        typing.Optional[Script], FieldMetadata(alias="preInstallScript")
    ] = pydantic.Field(default=None)
    """
    The steps necessary to prepare the environment to run any of the scripts below, for example installing yarn itself.
    """

    install_script: typing_extensions.Annotated[typing.Optional[Script], FieldMetadata(alias="installScript")] = (
        pydantic.Field(default=None)
    )
    """
    The steps necessary for installing the generated resource, if any (ex - `yarn install`).
    """

    compile_script: typing_extensions.Annotated[typing.Optional[Script], FieldMetadata(alias="compileScript")] = (
        pydantic.Field(default=None)
    )
    """
    The steps for building the generated resource.
    """

    test_script: typing_extensions.Annotated[typing.Optional[Script], FieldMetadata(alias="testScript")] = (
        pydantic.Field(default=None)
    )
    """
    The steps for running tests for the generated resource.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
