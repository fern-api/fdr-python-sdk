# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .cli.client import AsyncCliClient, CliClient
from .raw_client import AsyncRawGeneratorsClient, RawGeneratorsClient
from .types.generator import Generator
from .types.generator_id import GeneratorId
from .types.generator_language import GeneratorLanguage
from .types.generator_scripts import GeneratorScripts
from .types.generator_type import GeneratorType
from .versions.client import AsyncVersionsClient, VersionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GeneratorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGeneratorsClient(client_wrapper=client_wrapper)
        self.cli = CliClient(client_wrapper=client_wrapper)

        self.versions = VersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGeneratorsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGeneratorsClient
        """
        return self._raw_client

    def upsert_generator(
        self,
        *,
        id: GeneratorId,
        display_name: str,
        generator_type: GeneratorType,
        docker_image: str,
        generator_language: typing.Optional[GeneratorLanguage] = OMIT,
        scripts: typing.Optional[GeneratorScripts] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified generator.

        Parameters
        ----------
        id : GeneratorId

        display_name : str

        generator_type : GeneratorType

        docker_image : str
            The name of the docker image to pull to run this generator.

        generator_language : typing.Optional[GeneratorLanguage]

        scripts : typing.Optional[GeneratorScripts]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient
        from fdr.generators import GeneratorType_Sdk

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.upsert_generator(
            id="id",
            display_name="displayName",
            generator_type=GeneratorType_Sdk(),
            docker_image="dockerImage",
        )
        """
        _response = self._raw_client.upsert_generator(
            id=id,
            display_name=display_name,
            generator_type=generator_type,
            docker_image=docker_image,
            generator_language=generator_language,
            scripts=scripts,
            request_options=request_options,
        )
        return _response.data

    def get_generator_by_image(
        self, *, docker_image: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Generator]:
        """
        Get the generator corresponding to the given docker image.

        Parameters
        ----------
        docker_image : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Generator]

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.get_generator_by_image(
            docker_image="dockerImage",
        )
        """
        _response = self._raw_client.get_generator_by_image(docker_image=docker_image, request_options=request_options)
        return _response.data

    def get_generator(
        self, generator_id: GeneratorId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Generator]:
        """
        Get the specified generator.

        Parameters
        ----------
        generator_id : GeneratorId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Generator]

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.get_generator(
            generator_id="generatorId",
        )
        """
        _response = self._raw_client.get_generator(generator_id, request_options=request_options)
        return _response.data

    def list_generators(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Generator]:
        """
        Get the all generators. This is currently not paginated since the list will be short, but there may in the future be need for pagination.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Generator]

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.list_generators()
        """
        _response = self._raw_client.list_generators(request_options=request_options)
        return _response.data


class AsyncGeneratorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGeneratorsClient(client_wrapper=client_wrapper)
        self.cli = AsyncCliClient(client_wrapper=client_wrapper)

        self.versions = AsyncVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGeneratorsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGeneratorsClient
        """
        return self._raw_client

    async def upsert_generator(
        self,
        *,
        id: GeneratorId,
        display_name: str,
        generator_type: GeneratorType,
        docker_image: str,
        generator_language: typing.Optional[GeneratorLanguage] = OMIT,
        scripts: typing.Optional[GeneratorScripts] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified generator.

        Parameters
        ----------
        id : GeneratorId

        display_name : str

        generator_type : GeneratorType

        docker_image : str
            The name of the docker image to pull to run this generator.

        generator_language : typing.Optional[GeneratorLanguage]

        scripts : typing.Optional[GeneratorScripts]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient
        from fdr.generators import GeneratorType_Sdk

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.upsert_generator(
                id="id",
                display_name="displayName",
                generator_type=GeneratorType_Sdk(),
                docker_image="dockerImage",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_generator(
            id=id,
            display_name=display_name,
            generator_type=generator_type,
            docker_image=docker_image,
            generator_language=generator_language,
            scripts=scripts,
            request_options=request_options,
        )
        return _response.data

    async def get_generator_by_image(
        self, *, docker_image: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Generator]:
        """
        Get the generator corresponding to the given docker image.

        Parameters
        ----------
        docker_image : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Generator]

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.get_generator_by_image(
                docker_image="dockerImage",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_generator_by_image(
            docker_image=docker_image, request_options=request_options
        )
        return _response.data

    async def get_generator(
        self, generator_id: GeneratorId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Generator]:
        """
        Get the specified generator.

        Parameters
        ----------
        generator_id : GeneratorId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Generator]

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.get_generator(
                generator_id="generatorId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_generator(generator_id, request_options=request_options)
        return _response.data

    async def list_generators(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Generator]:
        """
        Get the all generators. This is currently not paginated since the list will be short, but there may in the future be need for pagination.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Generator]

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.list_generators()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_generators(request_options=request_options)
        return _response.data
