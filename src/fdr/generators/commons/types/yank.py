# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata


class Yank(UniversalBaseModel):
    """
    A yank is a metadata object that declares if a version is safe to upgrade to, if present the answer is no.
    """

    remediation_verision: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="remediationVerision")
    ] = pydantic.Field(default=None)
    """
    The remediation strategy to be used when a yank is detected. If one is not specified, we'll likely go backwards by publishing time
    to find the last unyanked version.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
