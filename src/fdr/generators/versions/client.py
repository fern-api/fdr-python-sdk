# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.pagination import AsyncPager, SyncPager
from ...core.request_options import RequestOptions
from ..commons.types.changelog_entry import ChangelogEntry
from ..commons.types.get_changelog_response import GetChangelogResponse
from ..commons.types.release_type import ReleaseType
from ..commons.types.version_range import VersionRange
from ..commons.types.yank import Yank
from ..types.generator_id import GeneratorId
from .raw_client import AsyncRawVersionsClient, RawVersionsClient
from .types.generator_release import GeneratorRelease

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VersionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawVersionsClient
        """
        return self._raw_client

    def get_latest_generator_release(
        self,
        *,
        generator: GeneratorId,
        cli_version: typing.Optional[str] = OMIT,
        ir_version: typing.Optional[int] = OMIT,
        generator_major_version: typing.Optional[int] = OMIT,
        release_types: typing.Optional[typing.Sequence[ReleaseType]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneratorRelease:
        """
        Get the latest generator version that has not been yanked.

        Parameters
        ----------
        generator : GeneratorId

        cli_version : typing.Optional[str]
            The version of the CLI that is requesting the latest generator version. This is used to determine the latest IR version the generator must respect.

        ir_version : typing.Optional[int]
            The IR version that the generator must respect. If this is provided alongside `cliVersion`, `cliVersion` takes precedence.

        generator_major_version : typing.Optional[int]
            If specified, we will only return the latest version that is the same major version as provided. Useful while we do not support config migrations, etc.

        release_types : typing.Optional[typing.Sequence[ReleaseType]]
            A filter for the release type, specifically if you'd like to get RC releases only, etc. Defaults to GA releases.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneratorRelease

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.versions.get_latest_generator_release(
            generator="generator",
        )
        """
        _response = self._raw_client.get_latest_generator_release(
            generator=generator,
            cli_version=cli_version,
            ir_version=ir_version,
            generator_major_version=generator_major_version,
            release_types=release_types,
            request_options=request_options,
        )
        return _response.data

    def get_changelog(
        self,
        generator: GeneratorId,
        *,
        from_version: VersionRange,
        to_version: VersionRange,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetChangelogResponse:
        """
        Get the changelog for the specified generator upgrade. The response will be a map of the generator version to it's corresponding changelog.

        Parameters
        ----------
        generator : GeneratorId

        from_version : VersionRange

        to_version : VersionRange

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChangelogResponse

        Examples
        --------
        from fdr import FdrClient
        from fdr.generators.commons import VersionRange_Inclusive

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.versions.get_changelog(
            generator="generator",
            from_version=VersionRange_Inclusive(value="fromVersion"),
            to_version=VersionRange_Inclusive(value="toVersion"),
        )
        """
        _response = self._raw_client.get_changelog(
            generator, from_version=from_version, to_version=to_version, request_options=request_options
        )
        return _response.data

    def upsert_generator_release(
        self,
        *,
        version: str,
        generator_id: GeneratorId,
        ir_version: int,
        created_at: typing.Optional[dt.date] = OMIT,
        is_yanked: typing.Optional[Yank] = OMIT,
        changelog_entry: typing.Optional[typing.Sequence[ChangelogEntry]] = OMIT,
        migration: typing.Optional[str] = OMIT,
        custom_config_schema: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified generator version.

        Parameters
        ----------
        version : str

        generator_id : GeneratorId

        ir_version : int
            The major version of the IR that this generator version consumes.

        created_at : typing.Optional[dt.date]

        is_yanked : typing.Optional[Yank]

        changelog_entry : typing.Optional[typing.Sequence[ChangelogEntry]]

        migration : typing.Optional[str]
            The TypeScript file for the migration to run when upgrading to this version. Ideally this would be typed as a file, but we don't support file upload in the express generator.

        custom_config_schema : typing.Optional[str]
            The JSON schema (stringified) for the custom config that this generator version supports.

        tags : typing.Optional[typing.Sequence[str]]
            Tags to categorize the Generator release.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.versions.upsert_generator_release(
            version="version",
            generator_id="generatorId",
            ir_version=1,
        )
        """
        _response = self._raw_client.upsert_generator_release(
            version=version,
            generator_id=generator_id,
            ir_version=ir_version,
            created_at=created_at,
            is_yanked=is_yanked,
            changelog_entry=changelog_entry,
            migration=migration,
            custom_config_schema=custom_config_schema,
            tags=tags,
            request_options=request_options,
        )
        return _response.data

    def get_generator_release(
        self, generator: GeneratorId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneratorRelease:
        """
        Get the specified generator version.

        Parameters
        ----------
        generator : GeneratorId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneratorRelease

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.versions.get_generator_release(
            generator="generator",
            version="version",
        )
        """
        _response = self._raw_client.get_generator_release(generator, version, request_options=request_options)
        return _response.data

    def list_generator_releases(
        self,
        generator: GeneratorId,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[GeneratorRelease]:
        """
        Get all generator versions for the specified generator.

        Parameters
        ----------
        generator : GeneratorId

        page : typing.Optional[int]
            The page integer to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The integer of items to retrieve per page. Defaults to 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[GeneratorRelease]

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        response = client.generators.versions.list_generator_releases(
            generator="generator",
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.list_generator_releases(
            generator, page=page, page_size=page_size, request_options=request_options
        )


class AsyncVersionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawVersionsClient
        """
        return self._raw_client

    async def get_latest_generator_release(
        self,
        *,
        generator: GeneratorId,
        cli_version: typing.Optional[str] = OMIT,
        ir_version: typing.Optional[int] = OMIT,
        generator_major_version: typing.Optional[int] = OMIT,
        release_types: typing.Optional[typing.Sequence[ReleaseType]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GeneratorRelease:
        """
        Get the latest generator version that has not been yanked.

        Parameters
        ----------
        generator : GeneratorId

        cli_version : typing.Optional[str]
            The version of the CLI that is requesting the latest generator version. This is used to determine the latest IR version the generator must respect.

        ir_version : typing.Optional[int]
            The IR version that the generator must respect. If this is provided alongside `cliVersion`, `cliVersion` takes precedence.

        generator_major_version : typing.Optional[int]
            If specified, we will only return the latest version that is the same major version as provided. Useful while we do not support config migrations, etc.

        release_types : typing.Optional[typing.Sequence[ReleaseType]]
            A filter for the release type, specifically if you'd like to get RC releases only, etc. Defaults to GA releases.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneratorRelease

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.versions.get_latest_generator_release(
                generator="generator",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_latest_generator_release(
            generator=generator,
            cli_version=cli_version,
            ir_version=ir_version,
            generator_major_version=generator_major_version,
            release_types=release_types,
            request_options=request_options,
        )
        return _response.data

    async def get_changelog(
        self,
        generator: GeneratorId,
        *,
        from_version: VersionRange,
        to_version: VersionRange,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetChangelogResponse:
        """
        Get the changelog for the specified generator upgrade. The response will be a map of the generator version to it's corresponding changelog.

        Parameters
        ----------
        generator : GeneratorId

        from_version : VersionRange

        to_version : VersionRange

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChangelogResponse

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient
        from fdr.generators.commons import VersionRange_Inclusive

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.versions.get_changelog(
                generator="generator",
                from_version=VersionRange_Inclusive(value="fromVersion"),
                to_version=VersionRange_Inclusive(value="toVersion"),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_changelog(
            generator, from_version=from_version, to_version=to_version, request_options=request_options
        )
        return _response.data

    async def upsert_generator_release(
        self,
        *,
        version: str,
        generator_id: GeneratorId,
        ir_version: int,
        created_at: typing.Optional[dt.date] = OMIT,
        is_yanked: typing.Optional[Yank] = OMIT,
        changelog_entry: typing.Optional[typing.Sequence[ChangelogEntry]] = OMIT,
        migration: typing.Optional[str] = OMIT,
        custom_config_schema: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified generator version.

        Parameters
        ----------
        version : str

        generator_id : GeneratorId

        ir_version : int
            The major version of the IR that this generator version consumes.

        created_at : typing.Optional[dt.date]

        is_yanked : typing.Optional[Yank]

        changelog_entry : typing.Optional[typing.Sequence[ChangelogEntry]]

        migration : typing.Optional[str]
            The TypeScript file for the migration to run when upgrading to this version. Ideally this would be typed as a file, but we don't support file upload in the express generator.

        custom_config_schema : typing.Optional[str]
            The JSON schema (stringified) for the custom config that this generator version supports.

        tags : typing.Optional[typing.Sequence[str]]
            Tags to categorize the Generator release.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.versions.upsert_generator_release(
                version="version",
                generator_id="generatorId",
                ir_version=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_generator_release(
            version=version,
            generator_id=generator_id,
            ir_version=ir_version,
            created_at=created_at,
            is_yanked=is_yanked,
            changelog_entry=changelog_entry,
            migration=migration,
            custom_config_schema=custom_config_schema,
            tags=tags,
            request_options=request_options,
        )
        return _response.data

    async def get_generator_release(
        self, generator: GeneratorId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GeneratorRelease:
        """
        Get the specified generator version.

        Parameters
        ----------
        generator : GeneratorId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GeneratorRelease

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.versions.get_generator_release(
                generator="generator",
                version="version",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_generator_release(generator, version, request_options=request_options)
        return _response.data

    async def list_generator_releases(
        self,
        generator: GeneratorId,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[GeneratorRelease]:
        """
        Get all generator versions for the specified generator.

        Parameters
        ----------
        generator : GeneratorId

        page : typing.Optional[int]
            The page integer to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The integer of items to retrieve per page. Defaults to 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[GeneratorRelease]

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.generators.versions.list_generator_releases(
                generator="generator",
            )
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.list_generator_releases(
            generator, page=page, page_size=page_size, request_options=request_options
        )
