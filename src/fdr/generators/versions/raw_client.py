# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pagination import AsyncPager, BaseHttpResponse, SyncPager
from ...core.pydantic_utilities import parse_obj_as
from ...core.request_options import RequestOptions
from ...core.serialization import convert_and_respect_annotation_metadata
from ..commons.errors.invalid_version_error import InvalidVersionError
from ..commons.types.changelog_entry import ChangelogEntry
from ..commons.types.get_changelog_response import GetChangelogResponse
from ..commons.types.invalid_version_error_message import InvalidVersionErrorMessage
from ..commons.types.release_type import ReleaseType
from ..commons.types.version_range import VersionRange
from ..commons.types.yank import Yank
from ..types.generator_id import GeneratorId
from .errors.generator_version_not_found_error import GeneratorVersionNotFoundError
from .errors.no_valid_generators_found_error import NoValidGeneratorsFoundError
from .types.generator_release import GeneratorRelease
from .types.list_generator_releases_response import ListGeneratorReleasesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawVersionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_latest_generator_release(
        self,
        *,
        generator: GeneratorId,
        cli_version: typing.Optional[str] = OMIT,
        ir_version: typing.Optional[int] = OMIT,
        generator_major_version: typing.Optional[int] = OMIT,
        release_types: typing.Optional[typing.Sequence[ReleaseType]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GeneratorRelease]:
        """
        Get the latest generator version that has not been yanked.

        Parameters
        ----------
        generator : GeneratorId

        cli_version : typing.Optional[str]
            The version of the CLI that is requesting the latest generator version. This is used to determine the latest IR version the generator must respect.

        ir_version : typing.Optional[int]
            The IR version that the generator must respect. If this is provided alongside `cliVersion`, `cliVersion` takes precedence.

        generator_major_version : typing.Optional[int]
            If specified, we will only return the latest version that is the same major version as provided. Useful while we do not support config migrations, etc.

        release_types : typing.Optional[typing.Sequence[ReleaseType]]
            A filter for the release type, specifically if you'd like to get RC releases only, etc. Defaults to GA releases.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GeneratorRelease]
        """
        _response = self._client_wrapper.httpx_client.request(
            "generators/versions/latest",
            method="POST",
            json={
                "generator": generator,
                "cliVersion": cli_version,
                "irVersion": ir_version,
                "generatorMajorVersion": generator_major_version,
                "releaseTypes": release_types,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GeneratorRelease,
                parse_obj_as(
                    type_=GeneratorRelease,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "NoValidGeneratorsFoundError":
                raise NoValidGeneratorsFoundError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_changelog(
        self,
        generator: GeneratorId,
        *,
        from_version: VersionRange,
        to_version: VersionRange,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[GetChangelogResponse]:
        """
        Get the changelog for the specified generator upgrade. The response will be a map of the generator version to it's corresponding changelog.

        Parameters
        ----------
        generator : GeneratorId

        from_version : VersionRange

        to_version : VersionRange

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetChangelogResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"generators/versions/{jsonable_encoder(generator)}/changelog",
            method="POST",
            json={
                "fromVersion": convert_and_respect_annotation_metadata(
                    object_=from_version, annotation=VersionRange, direction="write"
                ),
                "toVersion": convert_and_respect_annotation_metadata(
                    object_=to_version, annotation=VersionRange, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GetChangelogResponse,
                parse_obj_as(
                    type_=GetChangelogResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def upsert_generator_release(
        self,
        *,
        version: str,
        generator_id: GeneratorId,
        ir_version: int,
        created_at: typing.Optional[dt.date] = OMIT,
        is_yanked: typing.Optional[Yank] = OMIT,
        changelog_entry: typing.Optional[typing.Sequence[ChangelogEntry]] = OMIT,
        migration: typing.Optional[str] = OMIT,
        custom_config_schema: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Update or create the specified generator version.

        Parameters
        ----------
        version : str

        generator_id : GeneratorId

        ir_version : int
            The major version of the IR that this generator version consumes.

        created_at : typing.Optional[dt.date]

        is_yanked : typing.Optional[Yank]

        changelog_entry : typing.Optional[typing.Sequence[ChangelogEntry]]

        migration : typing.Optional[str]
            The TypeScript file for the migration to run when upgrading to this version. Ideally this would be typed as a file, but we don't support file upload in the express generator.

        custom_config_schema : typing.Optional[str]
            The JSON schema (stringified) for the custom config that this generator version supports.

        tags : typing.Optional[typing.Sequence[str]]
            Tags to categorize the Generator release.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "generators/versions",
            method="PUT",
            json={
                "version": version,
                "createdAt": created_at,
                "isYanked": convert_and_respect_annotation_metadata(
                    object_=is_yanked, annotation=Yank, direction="write"
                ),
                "changelogEntry": convert_and_respect_annotation_metadata(
                    object_=changelog_entry, annotation=typing.Sequence[ChangelogEntry], direction="write"
                ),
                "generatorId": generator_id,
                "irVersion": ir_version,
                "migration": migration,
                "customConfigSchema": custom_config_schema,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "InvalidVersionError":
                raise InvalidVersionError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        InvalidVersionErrorMessage,
                        parse_obj_as(
                            type_=InvalidVersionErrorMessage,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_generator_release(
        self, generator: GeneratorId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GeneratorRelease]:
        """
        Get the specified generator version.

        Parameters
        ----------
        generator : GeneratorId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GeneratorRelease]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"generators/versions/{jsonable_encoder(generator)}/{jsonable_encoder(version)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GeneratorRelease,
                parse_obj_as(
                    type_=GeneratorRelease,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "GeneratorVersionNotFoundError":
                raise GeneratorVersionNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        InvalidVersionErrorMessage,
                        parse_obj_as(
                            type_=InvalidVersionErrorMessage,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_generator_releases(
        self,
        generator: GeneratorId,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[GeneratorRelease]:
        """
        Get all generator versions for the specified generator.

        Parameters
        ----------
        generator : GeneratorId

        page : typing.Optional[int]
            The page integer to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The integer of items to retrieve per page. Defaults to 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[GeneratorRelease]
        """
        page = page if page is not None else 1

        _response = self._client_wrapper.httpx_client.request(
            f"generators/versions/{jsonable_encoder(generator)}",
            method="GET",
            params={
                "page": page,
                "pageSize": page_size,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _parsed_response = typing.cast(
                ListGeneratorReleasesResponse,
                parse_obj_as(
                    type_=ListGeneratorReleasesResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            _items = _parsed_response.generator_releases
            _has_next = True
            _get_next = lambda: self.list_generator_releases(
                generator,
                page=page + 1,
                page_size=page_size,
                request_options=request_options,
            )
            return SyncPager(
                has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
            )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawVersionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_latest_generator_release(
        self,
        *,
        generator: GeneratorId,
        cli_version: typing.Optional[str] = OMIT,
        ir_version: typing.Optional[int] = OMIT,
        generator_major_version: typing.Optional[int] = OMIT,
        release_types: typing.Optional[typing.Sequence[ReleaseType]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GeneratorRelease]:
        """
        Get the latest generator version that has not been yanked.

        Parameters
        ----------
        generator : GeneratorId

        cli_version : typing.Optional[str]
            The version of the CLI that is requesting the latest generator version. This is used to determine the latest IR version the generator must respect.

        ir_version : typing.Optional[int]
            The IR version that the generator must respect. If this is provided alongside `cliVersion`, `cliVersion` takes precedence.

        generator_major_version : typing.Optional[int]
            If specified, we will only return the latest version that is the same major version as provided. Useful while we do not support config migrations, etc.

        release_types : typing.Optional[typing.Sequence[ReleaseType]]
            A filter for the release type, specifically if you'd like to get RC releases only, etc. Defaults to GA releases.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GeneratorRelease]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "generators/versions/latest",
            method="POST",
            json={
                "generator": generator,
                "cliVersion": cli_version,
                "irVersion": ir_version,
                "generatorMajorVersion": generator_major_version,
                "releaseTypes": release_types,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GeneratorRelease,
                parse_obj_as(
                    type_=GeneratorRelease,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "NoValidGeneratorsFoundError":
                raise NoValidGeneratorsFoundError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_changelog(
        self,
        generator: GeneratorId,
        *,
        from_version: VersionRange,
        to_version: VersionRange,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[GetChangelogResponse]:
        """
        Get the changelog for the specified generator upgrade. The response will be a map of the generator version to it's corresponding changelog.

        Parameters
        ----------
        generator : GeneratorId

        from_version : VersionRange

        to_version : VersionRange

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetChangelogResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"generators/versions/{jsonable_encoder(generator)}/changelog",
            method="POST",
            json={
                "fromVersion": convert_and_respect_annotation_metadata(
                    object_=from_version, annotation=VersionRange, direction="write"
                ),
                "toVersion": convert_and_respect_annotation_metadata(
                    object_=to_version, annotation=VersionRange, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GetChangelogResponse,
                parse_obj_as(
                    type_=GetChangelogResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def upsert_generator_release(
        self,
        *,
        version: str,
        generator_id: GeneratorId,
        ir_version: int,
        created_at: typing.Optional[dt.date] = OMIT,
        is_yanked: typing.Optional[Yank] = OMIT,
        changelog_entry: typing.Optional[typing.Sequence[ChangelogEntry]] = OMIT,
        migration: typing.Optional[str] = OMIT,
        custom_config_schema: typing.Optional[str] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Update or create the specified generator version.

        Parameters
        ----------
        version : str

        generator_id : GeneratorId

        ir_version : int
            The major version of the IR that this generator version consumes.

        created_at : typing.Optional[dt.date]

        is_yanked : typing.Optional[Yank]

        changelog_entry : typing.Optional[typing.Sequence[ChangelogEntry]]

        migration : typing.Optional[str]
            The TypeScript file for the migration to run when upgrading to this version. Ideally this would be typed as a file, but we don't support file upload in the express generator.

        custom_config_schema : typing.Optional[str]
            The JSON schema (stringified) for the custom config that this generator version supports.

        tags : typing.Optional[typing.Sequence[str]]
            Tags to categorize the Generator release.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "generators/versions",
            method="PUT",
            json={
                "version": version,
                "createdAt": created_at,
                "isYanked": convert_and_respect_annotation_metadata(
                    object_=is_yanked, annotation=Yank, direction="write"
                ),
                "changelogEntry": convert_and_respect_annotation_metadata(
                    object_=changelog_entry, annotation=typing.Sequence[ChangelogEntry], direction="write"
                ),
                "generatorId": generator_id,
                "irVersion": ir_version,
                "migration": migration,
                "customConfigSchema": custom_config_schema,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "InvalidVersionError":
                raise InvalidVersionError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        InvalidVersionErrorMessage,
                        parse_obj_as(
                            type_=InvalidVersionErrorMessage,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_generator_release(
        self, generator: GeneratorId, version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GeneratorRelease]:
        """
        Get the specified generator version.

        Parameters
        ----------
        generator : GeneratorId

        version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GeneratorRelease]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"generators/versions/{jsonable_encoder(generator)}/{jsonable_encoder(version)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GeneratorRelease,
                parse_obj_as(
                    type_=GeneratorRelease,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "GeneratorVersionNotFoundError":
                raise GeneratorVersionNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        InvalidVersionErrorMessage,
                        parse_obj_as(
                            type_=InvalidVersionErrorMessage,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_generator_releases(
        self,
        generator: GeneratorId,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[GeneratorRelease]:
        """
        Get all generator versions for the specified generator.

        Parameters
        ----------
        generator : GeneratorId

        page : typing.Optional[int]
            The page integer to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The integer of items to retrieve per page. Defaults to 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[GeneratorRelease]
        """
        page = page if page is not None else 1

        _response = await self._client_wrapper.httpx_client.request(
            f"generators/versions/{jsonable_encoder(generator)}",
            method="GET",
            params={
                "page": page,
                "pageSize": page_size,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _parsed_response = typing.cast(
                ListGeneratorReleasesResponse,
                parse_obj_as(
                    type_=ListGeneratorReleasesResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            _items = _parsed_response.generator_releases
            _has_next = True

            async def _get_next():
                return await self.list_generator_releases(
                    generator,
                    page=page + 1,
                    page_size=page_size,
                    request_options=request_options,
                )

            return AsyncPager(
                has_next=_has_next, items=_items, get_next=_get_next, response=BaseHttpResponse(response=_response)
            )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
