# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.pagination import AsyncPager, SyncPager
from ...core.request_options import RequestOptions
from ..commons.types.changelog_entry import ChangelogEntry
from ..commons.types.get_changelog_response import GetChangelogResponse
from ..commons.types.release_type import ReleaseType
from ..commons.types.version_range import VersionRange
from ..commons.types.yank import Yank
from .raw_client import AsyncRawCliClient, RawCliClient
from .types.cli_release import CliRelease

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CliClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCliClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCliClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCliClient
        """
        return self._raw_client

    def get_latest_cli_release(
        self,
        *,
        release_types: typing.Optional[typing.Sequence[ReleaseType]] = OMIT,
        ir_version: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CliRelease:
        """
        Get the latest CLI version that has not been yanked.

        Parameters
        ----------
        release_types : typing.Optional[typing.Sequence[ReleaseType]]
            A filter for the release type, specifically if you'd like to get RC releases only, etc. Defaults to GA releases.

        ir_version : typing.Optional[int]
            The IR version that the CLI must respect.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CliRelease

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.cli.get_latest_cli_release()
        """
        _response = self._raw_client.get_latest_cli_release(
            release_types=release_types, ir_version=ir_version, request_options=request_options
        )
        return _response.data

    def get_changelog(
        self,
        *,
        from_version: VersionRange,
        to_version: VersionRange,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetChangelogResponse:
        """
        Get the changelog for the specified CLI upgrade. The response will be a map of the generator version to it's corresponding changelog.

        Parameters
        ----------
        from_version : VersionRange

        to_version : VersionRange

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChangelogResponse

        Examples
        --------
        from fdr import FdrClient
        from fdr.generators.commons import VersionRange_Inclusive

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.cli.get_changelog(
            from_version=VersionRange_Inclusive(value="fromVersion"),
            to_version=VersionRange_Inclusive(value="toVersion"),
        )
        """
        _response = self._raw_client.get_changelog(
            from_version=from_version, to_version=to_version, request_options=request_options
        )
        return _response.data

    def get_min_cli_for_ir(
        self, ir_version: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CliRelease:
        """
        Get the minimum CLI version that supports the given IR version. This does not include RCs.

        Parameters
        ----------
        ir_version : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CliRelease

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.cli.get_min_cli_for_ir(
            ir_version=1,
        )
        """
        _response = self._raw_client.get_min_cli_for_ir(ir_version, request_options=request_options)
        return _response.data

    def upsert_cli_release(
        self,
        *,
        version: str,
        ir_version: int,
        created_at: typing.Optional[dt.date] = OMIT,
        is_yanked: typing.Optional[Yank] = OMIT,
        changelog_entry: typing.Optional[typing.Sequence[ChangelogEntry]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified CLI version.

        Parameters
        ----------
        version : str

        ir_version : int
            The major version of the IR that this CLI exposes.

        created_at : typing.Optional[dt.date]

        is_yanked : typing.Optional[Yank]

        changelog_entry : typing.Optional[typing.Sequence[ChangelogEntry]]

        tags : typing.Optional[typing.Sequence[str]]
            Tags to categorize the CLI release.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.cli.upsert_cli_release(
            version="version",
            ir_version=1,
        )
        """
        _response = self._raw_client.upsert_cli_release(
            version=version,
            ir_version=ir_version,
            created_at=created_at,
            is_yanked=is_yanked,
            changelog_entry=changelog_entry,
            tags=tags,
            request_options=request_options,
        )
        return _response.data

    def get_cli_release(
        self, cli_version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CliRelease:
        """
        Get the specified CLI version.

        Parameters
        ----------
        cli_version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CliRelease

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.generators.cli.get_cli_release(
            cli_version="cliVersion",
        )
        """
        _response = self._raw_client.get_cli_release(cli_version, request_options=request_options)
        return _response.data

    def list_cli_releases(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[CliRelease]:
        """
        Get all CLI versions.

        Parameters
        ----------
        page : typing.Optional[int]
            The page integer to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The integer of items to retrieve per page. Defaults to 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[CliRelease]

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        response = client.generators.cli.list_cli_releases()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.list_cli_releases(page=page, page_size=page_size, request_options=request_options)


class AsyncCliClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCliClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCliClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCliClient
        """
        return self._raw_client

    async def get_latest_cli_release(
        self,
        *,
        release_types: typing.Optional[typing.Sequence[ReleaseType]] = OMIT,
        ir_version: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CliRelease:
        """
        Get the latest CLI version that has not been yanked.

        Parameters
        ----------
        release_types : typing.Optional[typing.Sequence[ReleaseType]]
            A filter for the release type, specifically if you'd like to get RC releases only, etc. Defaults to GA releases.

        ir_version : typing.Optional[int]
            The IR version that the CLI must respect.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CliRelease

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.cli.get_latest_cli_release()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_latest_cli_release(
            release_types=release_types, ir_version=ir_version, request_options=request_options
        )
        return _response.data

    async def get_changelog(
        self,
        *,
        from_version: VersionRange,
        to_version: VersionRange,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetChangelogResponse:
        """
        Get the changelog for the specified CLI upgrade. The response will be a map of the generator version to it's corresponding changelog.

        Parameters
        ----------
        from_version : VersionRange

        to_version : VersionRange

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetChangelogResponse

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient
        from fdr.generators.commons import VersionRange_Inclusive

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.cli.get_changelog(
                from_version=VersionRange_Inclusive(value="fromVersion"),
                to_version=VersionRange_Inclusive(value="toVersion"),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_changelog(
            from_version=from_version, to_version=to_version, request_options=request_options
        )
        return _response.data

    async def get_min_cli_for_ir(
        self, ir_version: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CliRelease:
        """
        Get the minimum CLI version that supports the given IR version. This does not include RCs.

        Parameters
        ----------
        ir_version : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CliRelease

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.cli.get_min_cli_for_ir(
                ir_version=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_min_cli_for_ir(ir_version, request_options=request_options)
        return _response.data

    async def upsert_cli_release(
        self,
        *,
        version: str,
        ir_version: int,
        created_at: typing.Optional[dt.date] = OMIT,
        is_yanked: typing.Optional[Yank] = OMIT,
        changelog_entry: typing.Optional[typing.Sequence[ChangelogEntry]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified CLI version.

        Parameters
        ----------
        version : str

        ir_version : int
            The major version of the IR that this CLI exposes.

        created_at : typing.Optional[dt.date]

        is_yanked : typing.Optional[Yank]

        changelog_entry : typing.Optional[typing.Sequence[ChangelogEntry]]

        tags : typing.Optional[typing.Sequence[str]]
            Tags to categorize the CLI release.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.cli.upsert_cli_release(
                version="version",
                ir_version=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_cli_release(
            version=version,
            ir_version=ir_version,
            created_at=created_at,
            is_yanked=is_yanked,
            changelog_entry=changelog_entry,
            tags=tags,
            request_options=request_options,
        )
        return _response.data

    async def get_cli_release(
        self, cli_version: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CliRelease:
        """
        Get the specified CLI version.

        Parameters
        ----------
        cli_version : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CliRelease

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.generators.cli.get_cli_release(
                cli_version="cliVersion",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_cli_release(cli_version, request_options=request_options)
        return _response.data

    async def list_cli_releases(
        self,
        *,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[CliRelease]:
        """
        Get all CLI versions.

        Parameters
        ----------
        page : typing.Optional[int]
            The page integer to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The integer of items to retrieve per page. Defaults to 20.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[CliRelease]

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.generators.cli.list_cli_releases()
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.list_cli_releases(page=page, page_size=page_size, request_options=request_options)
