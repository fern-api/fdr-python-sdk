# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.generator import Generator
from .types.generator_id import GeneratorId
from .types.generator_language import GeneratorLanguage
from .types.generator_scripts import GeneratorScripts
from .types.generator_type import GeneratorType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawGeneratorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def upsert_generator(
        self,
        *,
        id: GeneratorId,
        display_name: str,
        generator_type: GeneratorType,
        docker_image: str,
        generator_language: typing.Optional[GeneratorLanguage] = OMIT,
        scripts: typing.Optional[GeneratorScripts] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Update or create the specified generator.

        Parameters
        ----------
        id : GeneratorId

        display_name : str

        generator_type : GeneratorType

        docker_image : str
            The name of the docker image to pull to run this generator.

        generator_language : typing.Optional[GeneratorLanguage]

        scripts : typing.Optional[GeneratorScripts]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "generators",
            method="PUT",
            json={
                "id": id,
                "displayName": display_name,
                "generatorType": convert_and_respect_annotation_metadata(
                    object_=generator_type, annotation=GeneratorType, direction="write"
                ),
                "generatorLanguage": generator_language,
                "dockerImage": docker_image,
                "scripts": convert_and_respect_annotation_metadata(
                    object_=scripts, annotation=GeneratorScripts, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_generator_by_image(
        self, *, docker_image: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.Optional[Generator]]:
        """
        Get the generator corresponding to the given docker image.

        Parameters
        ----------
        docker_image : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[Generator]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "generators/by-image",
            method="POST",
            json={
                "dockerImage": docker_image,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.Optional[Generator],
                parse_obj_as(
                    type_=typing.Optional[Generator],  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_generator(
        self, generator_id: GeneratorId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.Optional[Generator]]:
        """
        Get the specified generator.

        Parameters
        ----------
        generator_id : GeneratorId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[Generator]]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"generators/{jsonable_encoder(generator_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.Optional[Generator],
                parse_obj_as(
                    type_=typing.Optional[Generator],  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_generators(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.List[Generator]]:
        """
        Get the all generators. This is currently not paginated since the list will be short, but there may in the future be need for pagination.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Generator]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "generators",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.List[Generator],
                parse_obj_as(
                    type_=typing.List[Generator],  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawGeneratorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def upsert_generator(
        self,
        *,
        id: GeneratorId,
        display_name: str,
        generator_type: GeneratorType,
        docker_image: str,
        generator_language: typing.Optional[GeneratorLanguage] = OMIT,
        scripts: typing.Optional[GeneratorScripts] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Update or create the specified generator.

        Parameters
        ----------
        id : GeneratorId

        display_name : str

        generator_type : GeneratorType

        docker_image : str
            The name of the docker image to pull to run this generator.

        generator_language : typing.Optional[GeneratorLanguage]

        scripts : typing.Optional[GeneratorScripts]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "generators",
            method="PUT",
            json={
                "id": id,
                "displayName": display_name,
                "generatorType": convert_and_respect_annotation_metadata(
                    object_=generator_type, annotation=GeneratorType, direction="write"
                ),
                "generatorLanguage": generator_language,
                "dockerImage": docker_image,
                "scripts": convert_and_respect_annotation_metadata(
                    object_=scripts, annotation=GeneratorScripts, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_generator_by_image(
        self, *, docker_image: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.Optional[Generator]]:
        """
        Get the generator corresponding to the given docker image.

        Parameters
        ----------
        docker_image : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[Generator]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "generators/by-image",
            method="POST",
            json={
                "dockerImage": docker_image,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.Optional[Generator],
                parse_obj_as(
                    type_=typing.Optional[Generator],  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_generator(
        self, generator_id: GeneratorId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.Optional[Generator]]:
        """
        Get the specified generator.

        Parameters
        ----------
        generator_id : GeneratorId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[Generator]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"generators/{jsonable_encoder(generator_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.Optional[Generator],
                parse_obj_as(
                    type_=typing.Optional[Generator],  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_generators(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[Generator]]:
        """
        Get the all generators. This is currently not paginated since the list will be short, but there may in the future be need for pagination.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Generator]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "generators",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.List[Generator],
                parse_obj_as(
                    type_=typing.List[Generator],  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
