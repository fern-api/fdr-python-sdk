# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .github_repository_id import GithubRepositoryId

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def github(self, value: GithubRepositoryId) -> RepositoryId:
        if IS_PYDANTIC_V2:
            return RepositoryId(root=_RepositoryId.Github(**value.dict(exclude_unset=True), type="github"))  # type: ignore
        else:
            return RepositoryId(__root__=_RepositoryId.Github(**value.dict(exclude_unset=True), type="github"))  # type: ignore


class RepositoryId(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_RepositoryId.Github]

        def get_as_union(self) -> typing.Union[_RepositoryId.Github]:
            return self.root
    else:
        __root__: typing.Union[_RepositoryId.Github]

        def get_as_union(self) -> typing.Union[_RepositoryId.Github]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, github: typing.Callable[[GithubRepositoryId], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "github":
            return github(GithubRepositoryId(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _RepositoryId:
    class Github(GithubRepositoryId):
        type: typing.Literal["github"] = "github"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(RepositoryId)
