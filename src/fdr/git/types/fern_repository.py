# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .fern_config_repository import FernConfigRepository
from .sdk_repository import SdkRepository

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def sdk(self, value: SdkRepository) -> FernRepository:
        if IS_PYDANTIC_V2:
            return FernRepository(root=_FernRepository.Sdk(**value.dict(exclude_unset=True), type="sdk"))  # type: ignore
        else:
            return FernRepository(__root__=_FernRepository.Sdk(**value.dict(exclude_unset=True), type="sdk"))  # type: ignore

    def config(self, value: FernConfigRepository) -> FernRepository:
        if IS_PYDANTIC_V2:
            return FernRepository(root=_FernRepository.Config(**value.dict(exclude_unset=True), type="config"))  # type: ignore
        else:
            return FernRepository(__root__=_FernRepository.Config(**value.dict(exclude_unset=True), type="config"))  # type: ignore


class FernRepository(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_FernRepository.Sdk, _FernRepository.Config], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_FernRepository.Sdk, _FernRepository.Config]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_FernRepository.Sdk, _FernRepository.Config], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_FernRepository.Sdk, _FernRepository.Config]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, sdk: typing.Callable[[SdkRepository], T_Result], config: typing.Callable[[FernConfigRepository], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "sdk":
            return sdk(SdkRepository(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "config":
            return config(FernConfigRepository(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _FernRepository:
    class Sdk(SdkRepository):
        type: typing.Literal["sdk"] = "sdk"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Config(FernConfigRepository):
        type: typing.Literal["config"] = "config"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(FernRepository)
