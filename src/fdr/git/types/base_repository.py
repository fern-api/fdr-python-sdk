# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...commons.types.org_id import OrgId
from ...commons.types.url import Url
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .check_run import CheckRun
from .repository_id import RepositoryId


class BaseRepository(UniversalBaseModel):
    id: RepositoryId
    name: str
    owner: str = pydantic.Field()
    """
    The organization name within Github, e.g. fern-api.
    """

    full_name: typing_extensions.Annotated[str, FieldMetadata(alias="fullName")] = pydantic.Field()
    """
    The full name of the repository, e.g. fern-api/fern. It includes the owner, as well as the name of the repository.
    """

    url: Url
    repository_owner_organization_id: typing_extensions.Annotated[
        OrgId, FieldMetadata(alias="repositoryOwnerOrganizationId")
    ] = pydantic.Field()
    """
    The Fern organization ID of the repository owner.
    """

    default_branch_checks: typing_extensions.Annotated[
        typing.List[CheckRun], FieldMetadata(alias="defaultBranchChecks")
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
