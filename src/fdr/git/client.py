# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..commons.types.org_id import OrgId
from ..commons.types.url import Url
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawGitClient, RawGitClient
from .types.check_run import CheckRun
from .types.fern_repository import FernRepository
from .types.github_user import GithubUser
from .types.pull_request import PullRequest
from .types.pull_request_reviewer import PullRequestReviewer
from .types.pull_request_state import PullRequestState

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GitClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGitClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGitClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGitClient
        """
        return self._raw_client

    def get_repository(
        self, repository_owner: str, repository_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FernRepository:
        """
        Get a repository by its name (mirroring the Github API, this is the main get request).

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FernRepository

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.git.get_repository(
            repository_owner="repositoryOwner",
            repository_name="repositoryName",
        )
        """
        _response = self._raw_client.get_repository(repository_owner, repository_name, request_options=request_options)
        return _response.data

    def list_repositories(
        self,
        *,
        page: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        organization_id: typing.Optional[OrgId] = OMIT,
        repository_name: typing.Optional[str] = OMIT,
        repository_owner: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[FernRepository]:
        """
        Get all repositories.

        Parameters
        ----------
        page : typing.Optional[int]
            The page number to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The number of items to retrieve per page. Defaults to 20.

        organization_id : typing.Optional[OrgId]
            The Fern organization ID to filter repositories by.

        repository_name : typing.Optional[str]
            The name of the repository to filter pull requests by (ex: full-platform).

        repository_owner : typing.Optional[str]
            The organization name of the repository owner to filter pull requests by (ex: fern-api).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[FernRepository]

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        response = client.git.list_repositories()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.list_repositories(
            page=page,
            page_size=page_size,
            organization_id=organization_id,
            repository_name=repository_name,
            repository_owner=repository_owner,
            request_options=request_options,
        )

    def upsert_repository(
        self, *, request: FernRepository, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update or create the specified repository.

        Parameters
        ----------
        request : FernRepository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import datetime

        from fdr import FdrClient
        from fdr.git import CheckRun, FernRepository_Sdk, RepositoryId_Github

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.git.upsert_repository(
            request=FernRepository_Sdk(
                sdk_language="sdkLanguage",
                id=RepositoryId_Github(
                    id="id",
                ),
                name="name",
                owner="owner",
                full_name="fullName",
                url="url",
                repository_owner_organization_id="repositoryOwnerOrganizationId",
                default_branch_checks=[
                    CheckRun(
                        check_id="checkId",
                        repository_owner="repositoryOwner",
                        repository_name="repositoryName",
                        ref="ref",
                        name="name",
                        status="status",
                        conclusion="conclusion",
                        check_run_url="checkRunUrl",
                        created_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                        raw_check_run={"key": "value"},
                    ),
                    CheckRun(
                        check_id="checkId",
                        repository_owner="repositoryOwner",
                        repository_name="repositoryName",
                        ref="ref",
                        name="name",
                        status="status",
                        conclusion="conclusion",
                        check_run_url="checkRunUrl",
                        created_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                        raw_check_run={"key": "value"},
                    ),
                ],
            ),
        )
        """
        _response = self._raw_client.upsert_repository(request=request, request_options=request_options)
        return _response.data

    def delete_repository(
        self, repository_owner: str, repository_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete specified repository.

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.git.delete_repository(
            repository_owner="repositoryOwner",
            repository_name="repositoryName",
        )
        """
        _response = self._raw_client.delete_repository(
            repository_owner, repository_name, request_options=request_options
        )
        return _response.data

    def get_pull_request(
        self,
        repository_owner: str,
        repository_name: str,
        pull_request_number: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PullRequest:
        """
        Get a pull request by its ID.

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        pull_request_number : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PullRequest

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.git.get_pull_request(
            repository_owner="repositoryOwner",
            repository_name="repositoryName",
            pull_request_number=1,
        )
        """
        _response = self._raw_client.get_pull_request(
            repository_owner, repository_name, pull_request_number, request_options=request_options
        )
        return _response.data

    def list_pull_requests(
        self,
        *,
        page: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        repository_name: typing.Optional[str] = OMIT,
        repository_owner: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[OrgId] = OMIT,
        state: typing.Optional[typing.Sequence[PullRequestState]] = OMIT,
        author: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[PullRequest]:
        """
        Get all pull requests.

        Parameters
        ----------
        page : typing.Optional[int]
            The page number to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The number of items to retrieve per page. Defaults to 20.

        repository_name : typing.Optional[str]
            The name of the repository to filter pull requests by (ex: full-platform).

        repository_owner : typing.Optional[str]
            The organization name of the repository owner to filter pull requests by (ex: fern-api).

        organization_id : typing.Optional[OrgId]
            The Fern organization ID to filter repositories by.

        state : typing.Optional[typing.Sequence[PullRequestState]]
            The status(es) of the pull request to filter by.

        author : typing.Optional[typing.Sequence[str]]
            The login (github username) of the author(s) to filter by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[PullRequest]

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        response = client.git.list_pull_requests()
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        return self._raw_client.list_pull_requests(
            page=page,
            page_size=page_size,
            repository_name=repository_name,
            repository_owner=repository_owner,
            organization_id=organization_id,
            state=state,
            author=author,
            request_options=request_options,
        )

    def upsert_pull_request(
        self,
        *,
        pull_request_number: int,
        repository_name: str,
        repository_owner: str,
        reviewers: typing.Sequence[PullRequestReviewer],
        title: str,
        url: Url,
        checks: typing.Sequence[CheckRun],
        state: PullRequestState,
        created_at: dt.datetime,
        author: typing.Optional[GithubUser] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        merged_at: typing.Optional[dt.datetime] = OMIT,
        closed_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified pull request.

        Parameters
        ----------
        pull_request_number : int

        repository_name : str

        repository_owner : str

        reviewers : typing.Sequence[PullRequestReviewer]

        title : str

        url : Url

        checks : typing.Sequence[CheckRun]

        state : PullRequestState

        created_at : dt.datetime

        author : typing.Optional[GithubUser]

        updated_at : typing.Optional[dt.datetime]

        merged_at : typing.Optional[dt.datetime]

        closed_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import datetime

        from fdr import FdrClient
        from fdr.git import CheckRun, PullRequestReviewer_User

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.git.upsert_pull_request(
            pull_request_number=1,
            repository_name="repositoryName",
            repository_owner="repositoryOwner",
            reviewers=[
                PullRequestReviewer_User(
                    username="username",
                ),
                PullRequestReviewer_User(
                    username="username",
                ),
            ],
            title="title",
            url="url",
            checks=[
                CheckRun(
                    check_id="checkId",
                    repository_owner="repositoryOwner",
                    repository_name="repositoryName",
                    ref="ref",
                    name="name",
                    status="status",
                    conclusion="conclusion",
                    check_run_url="checkRunUrl",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    raw_check_run={"key": "value"},
                ),
                CheckRun(
                    check_id="checkId",
                    repository_owner="repositoryOwner",
                    repository_name="repositoryName",
                    ref="ref",
                    name="name",
                    status="status",
                    conclusion="conclusion",
                    check_run_url="checkRunUrl",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    raw_check_run={"key": "value"},
                ),
            ],
            state="open",
            created_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.upsert_pull_request(
            pull_request_number=pull_request_number,
            repository_name=repository_name,
            repository_owner=repository_owner,
            reviewers=reviewers,
            title=title,
            url=url,
            checks=checks,
            state=state,
            created_at=created_at,
            author=author,
            updated_at=updated_at,
            merged_at=merged_at,
            closed_at=closed_at,
            request_options=request_options,
        )
        return _response.data

    def delete_pull_request(
        self,
        repository_owner: str,
        repository_name: str,
        pull_request_number: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete specified pull request.

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        pull_request_number : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.git.delete_pull_request(
            repository_owner="repositoryOwner",
            repository_name="repositoryName",
            pull_request_number=1,
        )
        """
        _response = self._raw_client.delete_pull_request(
            repository_owner, repository_name, pull_request_number, request_options=request_options
        )
        return _response.data


class AsyncGitClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGitClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGitClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGitClient
        """
        return self._raw_client

    async def get_repository(
        self, repository_owner: str, repository_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FernRepository:
        """
        Get a repository by its name (mirroring the Github API, this is the main get request).

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FernRepository

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.git.get_repository(
                repository_owner="repositoryOwner",
                repository_name="repositoryName",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_repository(
            repository_owner, repository_name, request_options=request_options
        )
        return _response.data

    async def list_repositories(
        self,
        *,
        page: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        organization_id: typing.Optional[OrgId] = OMIT,
        repository_name: typing.Optional[str] = OMIT,
        repository_owner: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[FernRepository]:
        """
        Get all repositories.

        Parameters
        ----------
        page : typing.Optional[int]
            The page number to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The number of items to retrieve per page. Defaults to 20.

        organization_id : typing.Optional[OrgId]
            The Fern organization ID to filter repositories by.

        repository_name : typing.Optional[str]
            The name of the repository to filter pull requests by (ex: full-platform).

        repository_owner : typing.Optional[str]
            The organization name of the repository owner to filter pull requests by (ex: fern-api).

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[FernRepository]

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.git.list_repositories()
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.list_repositories(
            page=page,
            page_size=page_size,
            organization_id=organization_id,
            repository_name=repository_name,
            repository_owner=repository_owner,
            request_options=request_options,
        )

    async def upsert_repository(
        self, *, request: FernRepository, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Update or create the specified repository.

        Parameters
        ----------
        request : FernRepository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import datetime

        from fdr import AsyncFdrClient
        from fdr.git import CheckRun, FernRepository_Sdk, RepositoryId_Github

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.git.upsert_repository(
                request=FernRepository_Sdk(
                    sdk_language="sdkLanguage",
                    id=RepositoryId_Github(
                        id="id",
                    ),
                    name="name",
                    owner="owner",
                    full_name="fullName",
                    url="url",
                    repository_owner_organization_id="repositoryOwnerOrganizationId",
                    default_branch_checks=[
                        CheckRun(
                            check_id="checkId",
                            repository_owner="repositoryOwner",
                            repository_name="repositoryName",
                            ref="ref",
                            name="name",
                            status="status",
                            conclusion="conclusion",
                            check_run_url="checkRunUrl",
                            created_at=datetime.datetime.fromisoformat(
                                "2024-01-15 09:30:00+00:00",
                            ),
                            raw_check_run={"key": "value"},
                        ),
                        CheckRun(
                            check_id="checkId",
                            repository_owner="repositoryOwner",
                            repository_name="repositoryName",
                            ref="ref",
                            name="name",
                            status="status",
                            conclusion="conclusion",
                            check_run_url="checkRunUrl",
                            created_at=datetime.datetime.fromisoformat(
                                "2024-01-15 09:30:00+00:00",
                            ),
                            raw_check_run={"key": "value"},
                        ),
                    ],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_repository(request=request, request_options=request_options)
        return _response.data

    async def delete_repository(
        self, repository_owner: str, repository_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete specified repository.

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.git.delete_repository(
                repository_owner="repositoryOwner",
                repository_name="repositoryName",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_repository(
            repository_owner, repository_name, request_options=request_options
        )
        return _response.data

    async def get_pull_request(
        self,
        repository_owner: str,
        repository_name: str,
        pull_request_number: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PullRequest:
        """
        Get a pull request by its ID.

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        pull_request_number : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PullRequest

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.git.get_pull_request(
                repository_owner="repositoryOwner",
                repository_name="repositoryName",
                pull_request_number=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_pull_request(
            repository_owner, repository_name, pull_request_number, request_options=request_options
        )
        return _response.data

    async def list_pull_requests(
        self,
        *,
        page: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        repository_name: typing.Optional[str] = OMIT,
        repository_owner: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[OrgId] = OMIT,
        state: typing.Optional[typing.Sequence[PullRequestState]] = OMIT,
        author: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[PullRequest]:
        """
        Get all pull requests.

        Parameters
        ----------
        page : typing.Optional[int]
            The page number to retrieve. Defaults to 0.

        page_size : typing.Optional[int]
            The number of items to retrieve per page. Defaults to 20.

        repository_name : typing.Optional[str]
            The name of the repository to filter pull requests by (ex: full-platform).

        repository_owner : typing.Optional[str]
            The organization name of the repository owner to filter pull requests by (ex: fern-api).

        organization_id : typing.Optional[OrgId]
            The Fern organization ID to filter repositories by.

        state : typing.Optional[typing.Sequence[PullRequestState]]
            The status(es) of the pull request to filter by.

        author : typing.Optional[typing.Sequence[str]]
            The login (github username) of the author(s) to filter by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[PullRequest]

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            response = await client.git.list_pull_requests()
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        return await self._raw_client.list_pull_requests(
            page=page,
            page_size=page_size,
            repository_name=repository_name,
            repository_owner=repository_owner,
            organization_id=organization_id,
            state=state,
            author=author,
            request_options=request_options,
        )

    async def upsert_pull_request(
        self,
        *,
        pull_request_number: int,
        repository_name: str,
        repository_owner: str,
        reviewers: typing.Sequence[PullRequestReviewer],
        title: str,
        url: Url,
        checks: typing.Sequence[CheckRun],
        state: PullRequestState,
        created_at: dt.datetime,
        author: typing.Optional[GithubUser] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        merged_at: typing.Optional[dt.datetime] = OMIT,
        closed_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update or create the specified pull request.

        Parameters
        ----------
        pull_request_number : int

        repository_name : str

        repository_owner : str

        reviewers : typing.Sequence[PullRequestReviewer]

        title : str

        url : Url

        checks : typing.Sequence[CheckRun]

        state : PullRequestState

        created_at : dt.datetime

        author : typing.Optional[GithubUser]

        updated_at : typing.Optional[dt.datetime]

        merged_at : typing.Optional[dt.datetime]

        closed_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import datetime

        from fdr import AsyncFdrClient
        from fdr.git import CheckRun, PullRequestReviewer_User

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.git.upsert_pull_request(
                pull_request_number=1,
                repository_name="repositoryName",
                repository_owner="repositoryOwner",
                reviewers=[
                    PullRequestReviewer_User(
                        username="username",
                    ),
                    PullRequestReviewer_User(
                        username="username",
                    ),
                ],
                title="title",
                url="url",
                checks=[
                    CheckRun(
                        check_id="checkId",
                        repository_owner="repositoryOwner",
                        repository_name="repositoryName",
                        ref="ref",
                        name="name",
                        status="status",
                        conclusion="conclusion",
                        check_run_url="checkRunUrl",
                        created_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                        raw_check_run={"key": "value"},
                    ),
                    CheckRun(
                        check_id="checkId",
                        repository_owner="repositoryOwner",
                        repository_name="repositoryName",
                        ref="ref",
                        name="name",
                        status="status",
                        conclusion="conclusion",
                        check_run_url="checkRunUrl",
                        created_at=datetime.datetime.fromisoformat(
                            "2024-01-15 09:30:00+00:00",
                        ),
                        raw_check_run={"key": "value"},
                    ),
                ],
                state="open",
                created_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_pull_request(
            pull_request_number=pull_request_number,
            repository_name=repository_name,
            repository_owner=repository_owner,
            reviewers=reviewers,
            title=title,
            url=url,
            checks=checks,
            state=state,
            created_at=created_at,
            author=author,
            updated_at=updated_at,
            merged_at=merged_at,
            closed_at=closed_at,
            request_options=request_options,
        )
        return _response.data

    async def delete_pull_request(
        self,
        repository_owner: str,
        repository_name: str,
        pull_request_number: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete specified pull request.

        Parameters
        ----------
        repository_owner : str

        repository_name : str

        pull_request_number : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.git.delete_pull_request(
                repository_owner="repositoryOwner",
                repository_name="repositoryName",
                pull_request_number=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_pull_request(
            repository_owner, repository_name, pull_request_number, request_options=request_options
        )
        return _response.data
