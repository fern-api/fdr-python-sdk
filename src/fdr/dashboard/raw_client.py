# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.unauthorized_error import UnauthorizedError
from ..commons.errors.user_not_in_org_error import UserNotInOrgError
from ..commons.types.org_id import OrgId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.get_docs_sites_for_org_response import GetDocsSitesForOrgResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawDashboardClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_docs_sites_for_org(
        self, *, org_id: OrgId, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetDocsSitesForOrgResponse]:
        """
        Get all docs sites that belong to a given organization

        Parameters
        ----------
        org_id : OrgId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDocsSitesForOrgResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "dashboard/get-docs-sites-for-org",
            method="POST",
            json={
                "orgId": org_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GetDocsSitesForOrgResponse,
                parse_obj_as(
                    type_=GetDocsSitesForOrgResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawDashboardClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_docs_sites_for_org(
        self, *, org_id: OrgId, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetDocsSitesForOrgResponse]:
        """
        Get all docs sites that belong to a given organization

        Parameters
        ----------
        org_id : OrgId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDocsSitesForOrgResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "dashboard/get-docs-sites-for-org",
            method="POST",
            json={
                "orgId": org_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GetDocsSitesForOrgResponse,
                parse_obj_as(
                    type_=GetDocsSitesForOrgResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
