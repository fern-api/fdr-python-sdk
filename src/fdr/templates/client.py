# This file was auto-generated by Fern from our API Definition.

import typing

from ..commons.types.api_definition_id import ApiDefinitionId
from ..commons.types.api_id import ApiId
from ..commons.types.endpoint_identifier import EndpointIdentifier
from ..commons.types.org_id import OrgId
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..snippets.types.sdk_request import SdkRequest
from .raw_client import AsyncRawTemplatesClient, RawTemplatesClient
from .types.endpoint_snippet_template import EndpointSnippetTemplate
from .types.snippet_registry_entry import SnippetRegistryEntry

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TemplatesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTemplatesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTemplatesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTemplatesClient
        """
        return self._raw_client

    def register(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippet: SnippetRegistryEntry,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Store endpoint snippet for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippet : SnippetRegistryEntry

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from fdr import FdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import Sdk_Typescript
        from fdr.templates import (
            SnippetRegistryEntry,
            Template_Generic,
            VersionedSnippetTemplate_V1,
        )

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.templates.register(
            org_id="orgId",
            api_id="apiId",
            api_definition_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            snippet=SnippetRegistryEntry(
                sdk=Sdk_Typescript(
                    package="package",
                    version="version",
                ),
                endpoint_id=EndpointIdentifier(
                    path="path",
                    method="GET",
                ),
                snippet_template=VersionedSnippetTemplate_V1(
                    client_instantiation="clientInstantiation",
                    function_invocation=Template_Generic(
                        is_optional=True,
                        template_string="templateString",
                    ),
                ),
            ),
        )
        """
        _response = self._raw_client.register(
            org_id=org_id,
            api_id=api_id,
            api_definition_id=api_definition_id,
            snippet=snippet,
            request_options=request_options,
        )
        return _response.data

    def register_batch(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippets: typing.Sequence[SnippetRegistryEntry],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippets : typing.Sequence[SnippetRegistryEntry]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from fdr import FdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import Sdk_Typescript
        from fdr.templates import (
            SnippetRegistryEntry,
            Template_Generic,
            VersionedSnippetTemplate_V1,
        )

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.templates.register_batch(
            org_id="orgId",
            api_id="apiId",
            api_definition_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            snippets=[
                SnippetRegistryEntry(
                    sdk=Sdk_Typescript(
                        package="package",
                        version="version",
                    ),
                    endpoint_id=EndpointIdentifier(
                        path="path",
                        method="GET",
                    ),
                    snippet_template=VersionedSnippetTemplate_V1(
                        client_instantiation="clientInstantiation",
                        function_invocation=Template_Generic(
                            is_optional=True,
                            template_string="templateString",
                        ),
                    ),
                ),
                SnippetRegistryEntry(
                    sdk=Sdk_Typescript(
                        package="package",
                        version="version",
                    ),
                    endpoint_id=EndpointIdentifier(
                        path="path",
                        method="GET",
                    ),
                    snippet_template=VersionedSnippetTemplate_V1(
                        client_instantiation="clientInstantiation",
                        function_invocation=Template_Generic(
                            is_optional=True,
                            template_string="templateString",
                        ),
                    ),
                ),
            ],
        )
        """
        _response = self._raw_client.register_batch(
            org_id=org_id,
            api_id=api_id,
            api_definition_id=api_definition_id,
            snippets=snippets,
            request_options=request_options,
        )
        return _response.data

    def get(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        sdk: SdkRequest,
        endpoint_id: EndpointIdentifier,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EndpointSnippetTemplate:
        """
        Get the endpoint's snippet template for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        sdk : SdkRequest

        endpoint_id : EndpointIdentifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EndpointSnippetTemplate

        Examples
        --------
        from fdr import FdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import SdkRequest_Typescript

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.templates.get(
            org_id="orgId",
            api_id="apiId",
            sdk=SdkRequest_Typescript(
                package="package",
            ),
            endpoint_id=EndpointIdentifier(
                path="path",
                method="GET",
            ),
        )
        """
        _response = self._raw_client.get(
            org_id=org_id, api_id=api_id, sdk=sdk, endpoint_id=endpoint_id, request_options=request_options
        )
        return _response.data


class AsyncTemplatesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTemplatesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTemplatesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTemplatesClient
        """
        return self._raw_client

    async def register(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippet: SnippetRegistryEntry,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Store endpoint snippet for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippet : SnippetRegistryEntry

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from fdr import AsyncFdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import Sdk_Typescript
        from fdr.templates import (
            SnippetRegistryEntry,
            Template_Generic,
            VersionedSnippetTemplate_V1,
        )

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.templates.register(
                org_id="orgId",
                api_id="apiId",
                api_definition_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                snippet=SnippetRegistryEntry(
                    sdk=Sdk_Typescript(
                        package="package",
                        version="version",
                    ),
                    endpoint_id=EndpointIdentifier(
                        path="path",
                        method="GET",
                    ),
                    snippet_template=VersionedSnippetTemplate_V1(
                        client_instantiation="clientInstantiation",
                        function_invocation=Template_Generic(
                            is_optional=True,
                            template_string="templateString",
                        ),
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.register(
            org_id=org_id,
            api_id=api_id,
            api_definition_id=api_definition_id,
            snippet=snippet,
            request_options=request_options,
        )
        return _response.data

    async def register_batch(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippets: typing.Sequence[SnippetRegistryEntry],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippets : typing.Sequence[SnippetRegistryEntry]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from fdr import AsyncFdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import Sdk_Typescript
        from fdr.templates import (
            SnippetRegistryEntry,
            Template_Generic,
            VersionedSnippetTemplate_V1,
        )

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.templates.register_batch(
                org_id="orgId",
                api_id="apiId",
                api_definition_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                snippets=[
                    SnippetRegistryEntry(
                        sdk=Sdk_Typescript(
                            package="package",
                            version="version",
                        ),
                        endpoint_id=EndpointIdentifier(
                            path="path",
                            method="GET",
                        ),
                        snippet_template=VersionedSnippetTemplate_V1(
                            client_instantiation="clientInstantiation",
                            function_invocation=Template_Generic(
                                is_optional=True,
                                template_string="templateString",
                            ),
                        ),
                    ),
                    SnippetRegistryEntry(
                        sdk=Sdk_Typescript(
                            package="package",
                            version="version",
                        ),
                        endpoint_id=EndpointIdentifier(
                            path="path",
                            method="GET",
                        ),
                        snippet_template=VersionedSnippetTemplate_V1(
                            client_instantiation="clientInstantiation",
                            function_invocation=Template_Generic(
                                is_optional=True,
                                template_string="templateString",
                            ),
                        ),
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.register_batch(
            org_id=org_id,
            api_id=api_id,
            api_definition_id=api_definition_id,
            snippets=snippets,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        sdk: SdkRequest,
        endpoint_id: EndpointIdentifier,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> EndpointSnippetTemplate:
        """
        Get the endpoint's snippet template for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        sdk : SdkRequest

        endpoint_id : EndpointIdentifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        EndpointSnippetTemplate

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient
        from fdr.commons import EndpointIdentifier
        from fdr.snippets import SdkRequest_Typescript

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.templates.get(
                org_id="orgId",
                api_id="apiId",
                sdk=SdkRequest_Typescript(
                    package="package",
                ),
                endpoint_id=EndpointIdentifier(
                    path="path",
                    method="GET",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            org_id=org_id, api_id=api_id, sdk=sdk, endpoint_id=endpoint_id, request_options=request_options
        )
        return _response.data
