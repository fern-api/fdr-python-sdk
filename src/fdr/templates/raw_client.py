# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.unauthorized_error import UnauthorizedError
from ..commons.types.api_definition_id import ApiDefinitionId
from ..commons.types.api_id import ApiId
from ..commons.types.endpoint_identifier import EndpointIdentifier
from ..commons.types.org_id import OrgId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..snippets.types.sdk_request import SdkRequest
from .errors.snippet_not_found import SnippetNotFound
from .types.endpoint_snippet_template import EndpointSnippetTemplate
from .types.snippet_registry_entry import SnippetRegistryEntry

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTemplatesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def register(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippet: SnippetRegistryEntry,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Store endpoint snippet for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippet : SnippetRegistryEntry

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "snippet-template/register",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "apiDefinitionId": api_definition_id,
                "snippet": convert_and_respect_annotation_metadata(
                    object_=snippet, annotation=SnippetRegistryEntry, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def register_batch(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippets: typing.Sequence[SnippetRegistryEntry],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippets : typing.Sequence[SnippetRegistryEntry]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "snippet-template/register/batch",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "apiDefinitionId": api_definition_id,
                "snippets": convert_and_respect_annotation_metadata(
                    object_=snippets, annotation=typing.Sequence[SnippetRegistryEntry], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        sdk: SdkRequest,
        endpoint_id: EndpointIdentifier,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[EndpointSnippetTemplate]:
        """
        Get the endpoint's snippet template for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        sdk : SdkRequest

        endpoint_id : EndpointIdentifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[EndpointSnippetTemplate]
        """
        _response = self._client_wrapper.httpx_client.request(
            "snippet-template/get",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "sdk": convert_and_respect_annotation_metadata(object_=sdk, annotation=SdkRequest, direction="write"),
                "endpointId": convert_and_respect_annotation_metadata(
                    object_=endpoint_id, annotation=EndpointIdentifier, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                EndpointSnippetTemplate,
                parse_obj_as(
                    type_=EndpointSnippetTemplate,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SnippetNotFound":
                raise SnippetNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawTemplatesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def register(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippet: SnippetRegistryEntry,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Store endpoint snippet for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippet : SnippetRegistryEntry

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snippet-template/register",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "apiDefinitionId": api_definition_id,
                "snippet": convert_and_respect_annotation_metadata(
                    object_=snippet, annotation=SnippetRegistryEntry, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def register_batch(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        api_definition_id: ApiDefinitionId,
        snippets: typing.Sequence[SnippetRegistryEntry],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Store endpoint snippets for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        api_definition_id : ApiDefinitionId

        snippets : typing.Sequence[SnippetRegistryEntry]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snippet-template/register/batch",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "apiDefinitionId": api_definition_id,
                "snippets": convert_and_respect_annotation_metadata(
                    object_=snippets, annotation=typing.Sequence[SnippetRegistryEntry], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        sdk: SdkRequest,
        endpoint_id: EndpointIdentifier,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[EndpointSnippetTemplate]:
        """
        Get the endpoint's snippet template for a particular SDK.

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        api_id : ApiId
            The API name.

        sdk : SdkRequest

        endpoint_id : EndpointIdentifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[EndpointSnippetTemplate]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snippet-template/get",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "sdk": convert_and_respect_annotation_metadata(object_=sdk, annotation=SdkRequest, direction="write"),
                "endpointId": convert_and_respect_annotation_metadata(
                    object_=endpoint_id, annotation=EndpointIdentifier, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                EndpointSnippetTemplate,
                parse_obj_as(
                    type_=EndpointSnippetTemplate,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SnippetNotFound":
                raise SnippetNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
