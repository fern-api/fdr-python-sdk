# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...commons.types.api_definition_id import ApiDefinitionId
from ...commons.types.endpoint_identifier import EndpointIdentifier
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...snippets.types.sdk import Sdk
from .versioned_snippet_template import VersionedSnippetTemplate


class EndpointSnippetTemplate(UniversalBaseModel):
    sdk: Sdk
    endpoint_id: typing_extensions.Annotated[EndpointIdentifier, FieldMetadata(alias="endpointId")]
    api_definition_id: typing_extensions.Annotated[
        typing.Optional[ApiDefinitionId], FieldMetadata(alias="apiDefinitionId")
    ] = None
    snippet_template: typing_extensions.Annotated[VersionedSnippetTemplate, FieldMetadata(alias="snippetTemplate")] = (
        pydantic.Field()
    )
    """
    The default snippet template to use
    """

    additional_templates: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, VersionedSnippetTemplate]], FieldMetadata(alias="additionalTemplates")
    ] = pydantic.Field(default=None)
    """
    Additional templates to use for this endpoint, for example if you wanted
    an async example, you could have { "async": Template(...) }.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
