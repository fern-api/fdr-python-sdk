# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .snippet_template import SnippetTemplate

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def v_1(self, value: SnippetTemplate) -> VersionedSnippetTemplate:
        if IS_PYDANTIC_V2:
            return VersionedSnippetTemplate(
                root=_VersionedSnippetTemplate.V1(**value.dict(exclude_unset=True), type="v1")
            )  # type: ignore
        else:
            return VersionedSnippetTemplate(
                __root__=_VersionedSnippetTemplate.V1(**value.dict(exclude_unset=True), type="v1")
            )  # type: ignore


class VersionedSnippetTemplate(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_VersionedSnippetTemplate.V1]

        def get_as_union(self) -> typing.Union[_VersionedSnippetTemplate.V1]:
            return self.root
    else:
        __root__: typing.Union[_VersionedSnippetTemplate.V1]

        def get_as_union(self) -> typing.Union[_VersionedSnippetTemplate.V1]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, v_1: typing.Callable[[SnippetTemplate], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "v1":
            return v_1(SnippetTemplate(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _VersionedSnippetTemplate:
    class V1(SnippetTemplate):
        type: typing.Literal["v1"] = "v1"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(VersionedSnippetTemplate)
