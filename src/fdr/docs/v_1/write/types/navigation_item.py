# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .api_section import ApiSection
from .api_section_v_2 import ApiSectionV2
from .changelog_section_v_2 import ChangelogSectionV2
from .changelog_section_v_3 import ChangelogSectionV3
from .link_metadata import LinkMetadata
from .page_metadata import PageMetadata

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def page(self, value: PageMetadata) -> NavigationItem:
        if IS_PYDANTIC_V2:
            return NavigationItem(root=_NavigationItem.Page(**value.dict(exclude_unset=True), type="page"))  # type: ignore
        else:
            return NavigationItem(__root__=_NavigationItem.Page(**value.dict(exclude_unset=True), type="page"))  # type: ignore

    def api(self, value: ApiSection) -> NavigationItem:
        if IS_PYDANTIC_V2:
            return NavigationItem(root=_NavigationItem.Api(**value.dict(exclude_unset=True), type="api"))  # type: ignore
        else:
            return NavigationItem(__root__=_NavigationItem.Api(**value.dict(exclude_unset=True), type="api"))  # type: ignore

    def api_v_2(self, value: ApiSectionV2) -> NavigationItem:
        if IS_PYDANTIC_V2:
            return NavigationItem(root=_NavigationItem.ApiV2(**value.dict(exclude_unset=True), type="apiV2"))  # type: ignore
        else:
            return NavigationItem(__root__=_NavigationItem.ApiV2(**value.dict(exclude_unset=True), type="apiV2"))  # type: ignore

    def section(self, value: DocsSection) -> NavigationItem:
        if IS_PYDANTIC_V2:
            return NavigationItem(root=_NavigationItem.Section(**value.dict(exclude_unset=True), type="section"))  # type: ignore
        else:
            return NavigationItem(__root__=_NavigationItem.Section(**value.dict(exclude_unset=True), type="section"))  # type: ignore

    def link(self, value: LinkMetadata) -> NavigationItem:
        if IS_PYDANTIC_V2:
            return NavigationItem(root=_NavigationItem.Link(**value.dict(exclude_unset=True), type="link"))  # type: ignore
        else:
            return NavigationItem(__root__=_NavigationItem.Link(**value.dict(exclude_unset=True), type="link"))  # type: ignore

    def changelog(self, value: ChangelogSectionV2) -> NavigationItem:
        if IS_PYDANTIC_V2:
            return NavigationItem(root=_NavigationItem.Changelog(**value.dict(exclude_unset=True), type="changelog"))  # type: ignore
        else:
            return NavigationItem(
                __root__=_NavigationItem.Changelog(**value.dict(exclude_unset=True), type="changelog")
            )  # type: ignore

    def changelog_v_3(self, value: ChangelogSectionV3) -> NavigationItem:
        if IS_PYDANTIC_V2:
            return NavigationItem(
                root=_NavigationItem.ChangelogV3(**value.dict(exclude_unset=True), type="changelogV3")
            )  # type: ignore
        else:
            return NavigationItem(
                __root__=_NavigationItem.ChangelogV3(**value.dict(exclude_unset=True), type="changelogV3")
            )  # type: ignore


class NavigationItem(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _NavigationItem.Page,
                _NavigationItem.Api,
                _NavigationItem.ApiV2,
                _NavigationItem.Section,
                _NavigationItem.Link,
                _NavigationItem.Changelog,
                _NavigationItem.ChangelogV3,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _NavigationItem.Page,
            _NavigationItem.Api,
            _NavigationItem.ApiV2,
            _NavigationItem.Section,
            _NavigationItem.Link,
            _NavigationItem.Changelog,
            _NavigationItem.ChangelogV3,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _NavigationItem.Page,
                _NavigationItem.Api,
                _NavigationItem.ApiV2,
                _NavigationItem.Section,
                _NavigationItem.Link,
                _NavigationItem.Changelog,
                _NavigationItem.ChangelogV3,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _NavigationItem.Page,
            _NavigationItem.Api,
            _NavigationItem.ApiV2,
            _NavigationItem.Section,
            _NavigationItem.Link,
            _NavigationItem.Changelog,
            _NavigationItem.ChangelogV3,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        page: typing.Callable[[PageMetadata], T_Result],
        api: typing.Callable[[ApiSection], T_Result],
        api_v_2: typing.Callable[[ApiSectionV2], T_Result],
        section: typing.Callable[["DocsSection"], T_Result],
        link: typing.Callable[[LinkMetadata], T_Result],
        changelog: typing.Callable[[ChangelogSectionV2], T_Result],
        changelog_v_3: typing.Callable[[ChangelogSectionV3], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "page":
            return page(PageMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "api":
            return api(ApiSection(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "apiV2":
            return api_v_2(ApiSectionV2(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "section":
            return section(DocsSection(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "link":
            return link(LinkMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "changelog":
            return changelog(ChangelogSectionV2(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "changelogV3":
            return changelog_v_3(ChangelogSectionV3(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


from .docs_section import DocsSection  # noqa: E402, F401, I001


class _NavigationItem:
    class Page(PageMetadata):
        type: typing.Literal["page"] = "page"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Api(ApiSection):
        type: typing.Literal["api"] = "api"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class ApiV2(ApiSectionV2):
        type: typing.Literal["apiV2"] = "apiV2"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Section(DocsSection):
        type: typing.Literal["section"] = "section"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Link(LinkMetadata):
        type: typing.Literal["link"] = "link"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Changelog(ChangelogSectionV2):
        type: typing.Literal["changelog"] = "changelog"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class ChangelogV3(ChangelogSectionV3):
        type: typing.Literal["changelogV3"] = "changelogV3"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(_NavigationItem.Section)
update_forward_refs(NavigationItem)
