# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .maven_package import MavenPackage
from .npm_package import NpmPackage
from .pypi_package import PypiPackage

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def npm(self, value: NpmPackage) -> PublishedSdk:
        if IS_PYDANTIC_V2:
            return PublishedSdk(root=_PublishedSdk.Npm(**value.dict(exclude_unset=True), type="npm"))  # type: ignore
        else:
            return PublishedSdk(__root__=_PublishedSdk.Npm(**value.dict(exclude_unset=True), type="npm"))  # type: ignore

    def maven(self, value: MavenPackage) -> PublishedSdk:
        if IS_PYDANTIC_V2:
            return PublishedSdk(root=_PublishedSdk.Maven(**value.dict(exclude_unset=True), type="maven"))  # type: ignore
        else:
            return PublishedSdk(__root__=_PublishedSdk.Maven(**value.dict(exclude_unset=True), type="maven"))  # type: ignore

    def pypi(self, value: PypiPackage) -> PublishedSdk:
        if IS_PYDANTIC_V2:
            return PublishedSdk(root=_PublishedSdk.Pypi(**value.dict(exclude_unset=True), type="pypi"))  # type: ignore
        else:
            return PublishedSdk(__root__=_PublishedSdk.Pypi(**value.dict(exclude_unset=True), type="pypi"))  # type: ignore


class PublishedSdk(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_PublishedSdk.Npm, _PublishedSdk.Maven, _PublishedSdk.Pypi],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_PublishedSdk.Npm, _PublishedSdk.Maven, _PublishedSdk.Pypi]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_PublishedSdk.Npm, _PublishedSdk.Maven, _PublishedSdk.Pypi],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_PublishedSdk.Npm, _PublishedSdk.Maven, _PublishedSdk.Pypi]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        npm: typing.Callable[[NpmPackage], T_Result],
        maven: typing.Callable[[MavenPackage], T_Result],
        pypi: typing.Callable[[PypiPackage], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "npm":
            return npm(NpmPackage(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "maven":
            return maven(MavenPackage(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "pypi":
            return pypi(PypiPackage(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _PublishedSdk:
    class Npm(NpmPackage):
        type: typing.Literal["npm"] = "npm"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Maven(MavenPackage):
        type: typing.Literal["maven"] = "maven"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Pypi(PypiPackage):
        type: typing.Literal["pypi"] = "pypi"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(PublishedSdk)
