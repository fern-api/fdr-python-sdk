# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....commons.errors.unauthorized_error import UnauthorizedError
from ....commons.errors.user_not_in_org_error import UserNotInOrgError
from ....commons.types.org_id import OrgId
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.pydantic_utilities import parse_obj_as
from ....core.request_options import RequestOptions
from ....core.serialization import convert_and_respect_annotation_metadata
from .errors.docs_registration_id_not_found import DocsRegistrationIdNotFound
from .types.docs_definition import DocsDefinition
from .types.docs_registration_id import DocsRegistrationId
from .types.file_path import FilePath
from .types.start_docs_register_response import StartDocsRegisterResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawWriteClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def start_docs_register(
        self,
        *,
        domain: str,
        org_id: OrgId,
        filepaths: typing.Sequence[FilePath],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[StartDocsRegisterResponse]:
        """
        Parameters
        ----------
        domain : str

        org_id : OrgId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[StartDocsRegisterResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "registry/docs/init",
            method="POST",
            json={
                "domain": domain,
                "orgId": org_id,
                "filepaths": filepaths,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                StartDocsRegisterResponse,
                parse_obj_as(
                    type_=StartDocsRegisterResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def finish_docs_register(
        self,
        docs_registration_id: DocsRegistrationId,
        *,
        docs_definition: DocsDefinition,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        docs_registration_id : DocsRegistrationId

        docs_definition : DocsDefinition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"registry/docs/register/{jsonable_encoder(docs_registration_id)}",
            method="POST",
            json={
                "docsDefinition": convert_and_respect_annotation_metadata(
                    object_=docs_definition, annotation=DocsDefinition, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "DocsRegistrationIdNotFound":
                raise DocsRegistrationIdNotFound(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawWriteClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def start_docs_register(
        self,
        *,
        domain: str,
        org_id: OrgId,
        filepaths: typing.Sequence[FilePath],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[StartDocsRegisterResponse]:
        """
        Parameters
        ----------
        domain : str

        org_id : OrgId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[StartDocsRegisterResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "registry/docs/init",
            method="POST",
            json={
                "domain": domain,
                "orgId": org_id,
                "filepaths": filepaths,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                StartDocsRegisterResponse,
                parse_obj_as(
                    type_=StartDocsRegisterResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def finish_docs_register(
        self,
        docs_registration_id: DocsRegistrationId,
        *,
        docs_definition: DocsDefinition,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        docs_registration_id : DocsRegistrationId

        docs_definition : DocsDefinition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"registry/docs/register/{jsonable_encoder(docs_registration_id)}",
            method="POST",
            json={
                "docsDefinition": convert_and_respect_annotation_metadata(
                    object_=docs_definition, annotation=DocsDefinition, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "DocsRegistrationIdNotFound":
                raise DocsRegistrationIdNotFound(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
