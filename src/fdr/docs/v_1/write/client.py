# This file was auto-generated by Fern from our API Definition.

import typing

from ....commons.types.org_id import OrgId
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from .raw_client import AsyncRawWriteClient, RawWriteClient
from .types.docs_definition import DocsDefinition
from .types.docs_registration_id import DocsRegistrationId
from .types.file_path import FilePath
from .types.start_docs_register_response import StartDocsRegisterResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WriteClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawWriteClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawWriteClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawWriteClient
        """
        return self._raw_client

    def start_docs_register(
        self,
        *,
        domain: str,
        org_id: OrgId,
        filepaths: typing.Sequence[FilePath],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StartDocsRegisterResponse:
        """
        Parameters
        ----------
        domain : str

        org_id : OrgId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StartDocsRegisterResponse

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.docs.v_1.write.start_docs_register(
            domain="domain",
            org_id="orgId",
            filepaths=["filepaths", "filepaths"],
        )
        """
        _response = self._raw_client.start_docs_register(
            domain=domain, org_id=org_id, filepaths=filepaths, request_options=request_options
        )
        return _response.data

    def finish_docs_register(
        self,
        docs_registration_id: DocsRegistrationId,
        *,
        docs_definition: DocsDefinition,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        docs_registration_id : DocsRegistrationId

        docs_definition : DocsDefinition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fdr import FdrClient
        from fdr.docs.v_1.write import DocsConfig, DocsDefinition, PageContent

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.docs.v_1.write.finish_docs_register(
            docs_registration_id="docsRegistrationId",
            docs_definition=DocsDefinition(
                pages={
                    "pages": PageContent(
                        markdown="markdown",
                    )
                },
                config=DocsConfig(),
            ),
        )
        """
        _response = self._raw_client.finish_docs_register(
            docs_registration_id, docs_definition=docs_definition, request_options=request_options
        )
        return _response.data


class AsyncWriteClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawWriteClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawWriteClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawWriteClient
        """
        return self._raw_client

    async def start_docs_register(
        self,
        *,
        domain: str,
        org_id: OrgId,
        filepaths: typing.Sequence[FilePath],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StartDocsRegisterResponse:
        """
        Parameters
        ----------
        domain : str

        org_id : OrgId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StartDocsRegisterResponse

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_1.write.start_docs_register(
                domain="domain",
                org_id="orgId",
                filepaths=["filepaths", "filepaths"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.start_docs_register(
            domain=domain, org_id=org_id, filepaths=filepaths, request_options=request_options
        )
        return _response.data

    async def finish_docs_register(
        self,
        docs_registration_id: DocsRegistrationId,
        *,
        docs_definition: DocsDefinition,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        docs_registration_id : DocsRegistrationId

        docs_definition : DocsDefinition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient
        from fdr.docs.v_1.write import DocsConfig, DocsDefinition, PageContent

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_1.write.finish_docs_register(
                docs_registration_id="docsRegistrationId",
                docs_definition=DocsDefinition(
                    pages={
                        "pages": PageContent(
                            markdown="markdown",
                        )
                    },
                    config=DocsConfig(),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.finish_docs_register(
            docs_registration_id, docs_definition=docs_definition, request_options=request_options
        )
        return _response.data
