# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .navbar_github_metadata import NavbarGithubMetadata
from .navbar_link_metadata import NavbarLinkMetadata

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def filled(self, value: NavbarLinkMetadata) -> NavbarLink:
        if IS_PYDANTIC_V2:
            return NavbarLink(root=_NavbarLink.Filled(**value.dict(exclude_unset=True), type="filled"))  # type: ignore
        else:
            return NavbarLink(__root__=_NavbarLink.Filled(**value.dict(exclude_unset=True), type="filled"))  # type: ignore

    def outlined(self, value: NavbarLinkMetadata) -> NavbarLink:
        if IS_PYDANTIC_V2:
            return NavbarLink(root=_NavbarLink.Outlined(**value.dict(exclude_unset=True), type="outlined"))  # type: ignore
        else:
            return NavbarLink(__root__=_NavbarLink.Outlined(**value.dict(exclude_unset=True), type="outlined"))  # type: ignore

    def minimal(self, value: NavbarLinkMetadata) -> NavbarLink:
        if IS_PYDANTIC_V2:
            return NavbarLink(root=_NavbarLink.Minimal(**value.dict(exclude_unset=True), type="minimal"))  # type: ignore
        else:
            return NavbarLink(__root__=_NavbarLink.Minimal(**value.dict(exclude_unset=True), type="minimal"))  # type: ignore

    def github(self, value: NavbarGithubMetadata) -> NavbarLink:
        if IS_PYDANTIC_V2:
            return NavbarLink(root=_NavbarLink.Github(**value.dict(exclude_unset=True), type="github"))  # type: ignore
        else:
            return NavbarLink(__root__=_NavbarLink.Github(**value.dict(exclude_unset=True), type="github"))  # type: ignore

    def primary(self, value: NavbarLinkMetadata) -> NavbarLink:
        if IS_PYDANTIC_V2:
            return NavbarLink(root=_NavbarLink.Primary(**value.dict(exclude_unset=True), type="primary"))  # type: ignore
        else:
            return NavbarLink(__root__=_NavbarLink.Primary(**value.dict(exclude_unset=True), type="primary"))  # type: ignore

    def secondary(self, value: NavbarLinkMetadata) -> NavbarLink:
        if IS_PYDANTIC_V2:
            return NavbarLink(root=_NavbarLink.Secondary(**value.dict(exclude_unset=True), type="secondary"))  # type: ignore
        else:
            return NavbarLink(__root__=_NavbarLink.Secondary(**value.dict(exclude_unset=True), type="secondary"))  # type: ignore


class NavbarLink(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _NavbarLink.Filled,
                _NavbarLink.Outlined,
                _NavbarLink.Minimal,
                _NavbarLink.Github,
                _NavbarLink.Primary,
                _NavbarLink.Secondary,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _NavbarLink.Filled,
            _NavbarLink.Outlined,
            _NavbarLink.Minimal,
            _NavbarLink.Github,
            _NavbarLink.Primary,
            _NavbarLink.Secondary,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _NavbarLink.Filled,
                _NavbarLink.Outlined,
                _NavbarLink.Minimal,
                _NavbarLink.Github,
                _NavbarLink.Primary,
                _NavbarLink.Secondary,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _NavbarLink.Filled,
            _NavbarLink.Outlined,
            _NavbarLink.Minimal,
            _NavbarLink.Github,
            _NavbarLink.Primary,
            _NavbarLink.Secondary,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        filled: typing.Callable[[NavbarLinkMetadata], T_Result],
        outlined: typing.Callable[[NavbarLinkMetadata], T_Result],
        minimal: typing.Callable[[NavbarLinkMetadata], T_Result],
        github: typing.Callable[[NavbarGithubMetadata], T_Result],
        primary: typing.Callable[[NavbarLinkMetadata], T_Result],
        secondary: typing.Callable[[NavbarLinkMetadata], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "filled":
            return filled(NavbarLinkMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "outlined":
            return outlined(NavbarLinkMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "minimal":
            return minimal(NavbarLinkMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "github":
            return github(NavbarGithubMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "primary":
            return primary(NavbarLinkMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "secondary":
            return secondary(NavbarLinkMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _NavbarLink:
    class Filled(NavbarLinkMetadata):
        type: typing.Literal["filled"] = "filled"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Outlined(NavbarLinkMetadata):
        type: typing.Literal["outlined"] = "outlined"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Minimal(NavbarLinkMetadata):
        type: typing.Literal["minimal"] = "minimal"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Github(NavbarGithubMetadata):
        type: typing.Literal["github"] = "github"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Primary(NavbarLinkMetadata):
        type: typing.Literal["primary"] = "primary"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Secondary(NavbarLinkMetadata):
        type: typing.Literal["secondary"] = "secondary"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(NavbarLink)
