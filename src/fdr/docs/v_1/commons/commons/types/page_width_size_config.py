# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def px(self, value: float) -> PageWidthSizeConfig:
        if IS_PYDANTIC_V2:
            return PageWidthSizeConfig(root=_PageWidthSizeConfig.Px(type="px", value=value))  # type: ignore
        else:
            return PageWidthSizeConfig(__root__=_PageWidthSizeConfig.Px(type="px", value=value))  # type: ignore

    def rem(self, value: float) -> PageWidthSizeConfig:
        if IS_PYDANTIC_V2:
            return PageWidthSizeConfig(root=_PageWidthSizeConfig.Rem(type="rem", value=value))  # type: ignore
        else:
            return PageWidthSizeConfig(__root__=_PageWidthSizeConfig.Rem(type="rem", value=value))  # type: ignore

    def full(self) -> PageWidthSizeConfig:
        if IS_PYDANTIC_V2:
            return PageWidthSizeConfig(root=_PageWidthSizeConfig.Full(type="full"))  # type: ignore
        else:
            return PageWidthSizeConfig(__root__=_PageWidthSizeConfig.Full(type="full"))  # type: ignore


class PageWidthSizeConfig(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_PageWidthSizeConfig.Px, _PageWidthSizeConfig.Rem, _PageWidthSizeConfig.Full],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_PageWidthSizeConfig.Px, _PageWidthSizeConfig.Rem, _PageWidthSizeConfig.Full]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_PageWidthSizeConfig.Px, _PageWidthSizeConfig.Rem, _PageWidthSizeConfig.Full],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_PageWidthSizeConfig.Px, _PageWidthSizeConfig.Rem, _PageWidthSizeConfig.Full]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        px: typing.Callable[[float], T_Result],
        rem: typing.Callable[[float], T_Result],
        full: typing.Callable[[], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "px":
            return px(unioned_value.value)
        if unioned_value.type == "rem":
            return rem(unioned_value.value)
        if unioned_value.type == "full":
            return full()

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _PageWidthSizeConfig:
    class Px(UniversalBaseModel):
        type: typing.Literal["px"] = "px"
        value: float

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Rem(UniversalBaseModel):
        type: typing.Literal["rem"] = "rem"
        value: float

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Full(UniversalBaseModel):
        type: typing.Literal["full"] = "full"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(PageWidthSizeConfig)
