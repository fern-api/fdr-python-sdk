# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .color_themed_config import ColorThemedConfig
from .color_unthemed_config import ColorUnthemedConfig

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def unthemed(self, value: ColorUnthemedConfig) -> ColorConfig:
        if IS_PYDANTIC_V2:
            return ColorConfig(root=_ColorConfig.Unthemed(**value.dict(exclude_unset=True), type="unthemed"))  # type: ignore
        else:
            return ColorConfig(__root__=_ColorConfig.Unthemed(**value.dict(exclude_unset=True), type="unthemed"))  # type: ignore

    def themed(self, value: ColorThemedConfig) -> ColorConfig:
        if IS_PYDANTIC_V2:
            return ColorConfig(root=_ColorConfig.Themed(**value.dict(exclude_unset=True), type="themed"))  # type: ignore
        else:
            return ColorConfig(__root__=_ColorConfig.Themed(**value.dict(exclude_unset=True), type="themed"))  # type: ignore


class ColorConfig(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_ColorConfig.Unthemed, _ColorConfig.Themed], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_ColorConfig.Unthemed, _ColorConfig.Themed]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_ColorConfig.Unthemed, _ColorConfig.Themed], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_ColorConfig.Unthemed, _ColorConfig.Themed]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        unthemed: typing.Callable[[ColorUnthemedConfig], T_Result],
        themed: typing.Callable[[ColorThemedConfig], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "unthemed":
            return unthemed(ColorUnthemedConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "themed":
            return themed(ColorThemedConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _ColorConfig:
    class Unthemed(ColorUnthemedConfig):
        type: typing.Literal["unthemed"] = "unthemed"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Themed(ColorThemedConfig):
        type: typing.Literal["themed"] = "themed"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(ColorConfig)
