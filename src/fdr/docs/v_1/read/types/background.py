# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from ...commons.commons.types.rgba_color import RgbaColor

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def solid(self, value: RgbaColor) -> Background:
        if IS_PYDANTIC_V2:
            return Background(root=_Background.Solid(**value.dict(exclude_unset=True), type="solid"))  # type: ignore
        else:
            return Background(__root__=_Background.Solid(**value.dict(exclude_unset=True), type="solid"))  # type: ignore

    def gradient(self) -> Background:
        if IS_PYDANTIC_V2:
            return Background(root=_Background.Gradient(type="gradient"))  # type: ignore
        else:
            return Background(__root__=_Background.Gradient(type="gradient"))  # type: ignore


class Background(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Background.Solid, _Background.Gradient], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Background.Solid, _Background.Gradient]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Background.Solid, _Background.Gradient], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Background.Solid, _Background.Gradient]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, solid: typing.Callable[[RgbaColor], T_Result], gradient: typing.Callable[[], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "solid":
            return solid(RgbaColor(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "gradient":
            return gradient()

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _Background:
    class Solid(RgbaColor):
        type: typing.Literal["solid"] = "solid"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Gradient(UniversalBaseModel):
        type: typing.Literal["gradient"] = "gradient"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(Background)
