# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .image_file import ImageFile
from .url_file import UrlFile

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def url(self, value: UrlFile) -> File:
        if IS_PYDANTIC_V2:
            return File(root=_File.Url(**value.dict(exclude_unset=True), type="url"))  # type: ignore
        else:
            return File(__root__=_File.Url(**value.dict(exclude_unset=True), type="url"))  # type: ignore

    def image(self, value: ImageFile) -> File:
        if IS_PYDANTIC_V2:
            return File(root=_File.Image(**value.dict(exclude_unset=True), type="image"))  # type: ignore
        else:
            return File(__root__=_File.Image(**value.dict(exclude_unset=True), type="image"))  # type: ignore


class File(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[typing.Union[_File.Url, _File.Image], pydantic.Field(discriminator="type")]

        def get_as_union(self) -> typing.Union[_File.Url, _File.Image]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_File.Url, _File.Image], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_File.Url, _File.Image]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, url: typing.Callable[[UrlFile], T_Result], image: typing.Callable[[ImageFile], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "url":
            return url(UrlFile(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "image":
            return image(ImageFile(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _File:
    class Url(UrlFile):
        type: typing.Literal["url"] = "url"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Image(ImageFile):
        type: typing.Literal["image"] = "image"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(File)
