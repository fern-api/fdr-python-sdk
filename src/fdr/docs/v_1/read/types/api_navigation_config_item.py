# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.endpoint_id import EndpointId as commons_types_endpoint_id_EndpointId
from .....commons.types.web_socket_id import WebSocketId
from .....commons.types.webhook_id import WebhookId as commons_types_webhook_id_WebhookId
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .page_metadata import PageMetadata

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def subpackage(self, value: ApiNavigationConfigSubpackage) -> ApiNavigationConfigItem:
        if IS_PYDANTIC_V2:
            return ApiNavigationConfigItem(
                root=_ApiNavigationConfigItem.Subpackage(**value.dict(exclude_unset=True), type="subpackage")
            )  # type: ignore
        else:
            return ApiNavigationConfigItem(
                __root__=_ApiNavigationConfigItem.Subpackage(**value.dict(exclude_unset=True), type="subpackage")
            )  # type: ignore

    def endpoint_id(self, value: commons_types_endpoint_id_EndpointId) -> ApiNavigationConfigItem:
        if IS_PYDANTIC_V2:
            return ApiNavigationConfigItem(root=_ApiNavigationConfigItem.EndpointId(type="endpointId", value=value))  # type: ignore
        else:
            return ApiNavigationConfigItem(__root__=_ApiNavigationConfigItem.EndpointId(type="endpointId", value=value))  # type: ignore

    def websocket_id(self, value: WebSocketId) -> ApiNavigationConfigItem:
        if IS_PYDANTIC_V2:
            return ApiNavigationConfigItem(root=_ApiNavigationConfigItem.WebsocketId(type="websocketId", value=value))  # type: ignore
        else:
            return ApiNavigationConfigItem(
                __root__=_ApiNavigationConfigItem.WebsocketId(type="websocketId", value=value)
            )  # type: ignore

    def webhook_id(self, value: commons_types_webhook_id_WebhookId) -> ApiNavigationConfigItem:
        if IS_PYDANTIC_V2:
            return ApiNavigationConfigItem(root=_ApiNavigationConfigItem.WebhookId(type="webhookId", value=value))  # type: ignore
        else:
            return ApiNavigationConfigItem(__root__=_ApiNavigationConfigItem.WebhookId(type="webhookId", value=value))  # type: ignore

    def page(self, value: PageMetadata) -> ApiNavigationConfigItem:
        if IS_PYDANTIC_V2:
            return ApiNavigationConfigItem(
                root=_ApiNavigationConfigItem.Page(**value.dict(exclude_unset=True), type="page")
            )  # type: ignore
        else:
            return ApiNavigationConfigItem(
                __root__=_ApiNavigationConfigItem.Page(**value.dict(exclude_unset=True), type="page")
            )  # type: ignore


class ApiNavigationConfigItem(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _ApiNavigationConfigItem.Subpackage,
                _ApiNavigationConfigItem.EndpointId,
                _ApiNavigationConfigItem.WebsocketId,
                _ApiNavigationConfigItem.WebhookId,
                _ApiNavigationConfigItem.Page,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _ApiNavigationConfigItem.Subpackage,
            _ApiNavigationConfigItem.EndpointId,
            _ApiNavigationConfigItem.WebsocketId,
            _ApiNavigationConfigItem.WebhookId,
            _ApiNavigationConfigItem.Page,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _ApiNavigationConfigItem.Subpackage,
                _ApiNavigationConfigItem.EndpointId,
                _ApiNavigationConfigItem.WebsocketId,
                _ApiNavigationConfigItem.WebhookId,
                _ApiNavigationConfigItem.Page,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _ApiNavigationConfigItem.Subpackage,
            _ApiNavigationConfigItem.EndpointId,
            _ApiNavigationConfigItem.WebsocketId,
            _ApiNavigationConfigItem.WebhookId,
            _ApiNavigationConfigItem.Page,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        subpackage: typing.Callable[["ApiNavigationConfigSubpackage"], T_Result],
        endpoint_id: typing.Callable[[commons_types_endpoint_id_EndpointId], T_Result],
        websocket_id: typing.Callable[[WebSocketId], T_Result],
        webhook_id: typing.Callable[[commons_types_webhook_id_WebhookId], T_Result],
        page: typing.Callable[[PageMetadata], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "subpackage":
            return subpackage(ApiNavigationConfigSubpackage(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "endpointId":
            return endpoint_id(unioned_value.value)
        if unioned_value.type == "websocketId":
            return websocket_id(unioned_value.value)
        if unioned_value.type == "webhookId":
            return webhook_id(unioned_value.value)
        if unioned_value.type == "page":
            return page(PageMetadata(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


from .api_navigation_config_subpackage import ApiNavigationConfigSubpackage  # noqa: E402, F401, I001


class _ApiNavigationConfigItem:
    class Subpackage(ApiNavigationConfigSubpackage):
        type: typing.Literal["subpackage"] = "subpackage"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class EndpointId(UniversalBaseModel):
        type: typing.Literal["endpointId"] = "endpointId"
        value: commons_types_endpoint_id_EndpointId

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class WebsocketId(UniversalBaseModel):
        type: typing.Literal["websocketId"] = "websocketId"
        value: WebSocketId

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class WebhookId(UniversalBaseModel):
        type: typing.Literal["webhookId"] = "webhookId"
        value: commons_types_webhook_id_WebhookId

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Page(PageMetadata):
        type: typing.Literal["page"] = "page"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(_ApiNavigationConfigItem.Subpackage)
update_forward_refs(ApiNavigationConfigItem)
