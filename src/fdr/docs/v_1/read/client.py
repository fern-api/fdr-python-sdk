# This file was auto-generated by Fern from our API Definition.

import typing

from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from .raw_client import AsyncRawReadClient, RawReadClient
from .types.docs_definition import DocsDefinition

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawReadClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawReadClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawReadClient
        """
        return self._raw_client

    def get_docs_for_domain_legacy(
        self, domain: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocsDefinition:
        """
        Parameters
        ----------
        domain : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocsDefinition

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.docs.v_1.read.get_docs_for_domain_legacy(
            domain="domain",
        )
        """
        _response = self._raw_client.get_docs_for_domain_legacy(domain, request_options=request_options)
        return _response.data

    def get_docs_for_domain(
        self, *, domain: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DocsDefinition:
        """
        Parameters
        ----------
        domain : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocsDefinition

        Examples
        --------
        from fdr import FdrClient

        client = FdrClient(
            token="YOUR_TOKEN",
        )
        client.docs.v_1.read.get_docs_for_domain(
            domain="domain",
        )
        """
        _response = self._raw_client.get_docs_for_domain(domain=domain, request_options=request_options)
        return _response.data


class AsyncReadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawReadClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawReadClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawReadClient
        """
        return self._raw_client

    async def get_docs_for_domain_legacy(
        self, domain: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DocsDefinition:
        """
        Parameters
        ----------
        domain : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocsDefinition

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_1.read.get_docs_for_domain_legacy(
                domain="domain",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_docs_for_domain_legacy(domain, request_options=request_options)
        return _response.data

    async def get_docs_for_domain(
        self, *, domain: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DocsDefinition:
        """
        Parameters
        ----------
        domain : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocsDefinition

        Examples
        --------
        import asyncio

        from fdr import AsyncFdrClient

        client = AsyncFdrClient(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_1.read.get_docs_for_domain(
                domain="domain",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_docs_for_domain(domain=domain, request_options=request_options)
        return _response.data
