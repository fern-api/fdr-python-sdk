# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .docs_definition_db_v_1 import DocsDefinitionDbV1
from .docs_definition_db_v_2 import DocsDefinitionDbV2
from .docs_definition_db_v_3 import DocsDefinitionDbV3

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def v_1(self, value: DocsDefinitionDbV1) -> DocsDefinitionDb:
        if IS_PYDANTIC_V2:
            return DocsDefinitionDb(root=_DocsDefinitionDb.V1(**value.dict(exclude_unset=True), type="v1"))  # type: ignore
        else:
            return DocsDefinitionDb(__root__=_DocsDefinitionDb.V1(**value.dict(exclude_unset=True), type="v1"))  # type: ignore

    def v_2(self, value: DocsDefinitionDbV2) -> DocsDefinitionDb:
        if IS_PYDANTIC_V2:
            return DocsDefinitionDb(root=_DocsDefinitionDb.V2(**value.dict(exclude_unset=True), type="v2"))  # type: ignore
        else:
            return DocsDefinitionDb(__root__=_DocsDefinitionDb.V2(**value.dict(exclude_unset=True), type="v2"))  # type: ignore

    def v_3(self, value: DocsDefinitionDbV3) -> DocsDefinitionDb:
        if IS_PYDANTIC_V2:
            return DocsDefinitionDb(root=_DocsDefinitionDb.V3(**value.dict(exclude_unset=True), type="v3"))  # type: ignore
        else:
            return DocsDefinitionDb(__root__=_DocsDefinitionDb.V3(**value.dict(exclude_unset=True), type="v3"))  # type: ignore


class DocsDefinitionDb(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_DocsDefinitionDb.V1, _DocsDefinitionDb.V2, _DocsDefinitionDb.V3],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_DocsDefinitionDb.V1, _DocsDefinitionDb.V2, _DocsDefinitionDb.V3]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_DocsDefinitionDb.V1, _DocsDefinitionDb.V2, _DocsDefinitionDb.V3],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_DocsDefinitionDb.V1, _DocsDefinitionDb.V2, _DocsDefinitionDb.V3]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        v_1: typing.Callable[[DocsDefinitionDbV1], T_Result],
        v_2: typing.Callable[[DocsDefinitionDbV2], T_Result],
        v_3: typing.Callable[[DocsDefinitionDbV3], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "v1":
            return v_1(DocsDefinitionDbV1(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "v2":
            return v_2(DocsDefinitionDbV2(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "v3":
            return v_3(DocsDefinitionDbV3(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _DocsDefinitionDb:
    class V1(DocsDefinitionDbV1):
        type: typing.Literal["v1"] = "v1"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class V2(DocsDefinitionDbV2):
        type: typing.Literal["v2"] = "v2"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class V3(DocsDefinitionDbV3):
        type: typing.Literal["v3"] = "v3"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(DocsDefinitionDb)
