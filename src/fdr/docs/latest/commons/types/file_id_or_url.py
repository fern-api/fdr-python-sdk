# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.file_id import FileId as commons_types_file_id_FileId
from .....commons.types.url import Url as commons_types_url_Url
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def file_id(self, value: commons_types_file_id_FileId) -> FileIdOrUrl:
        if IS_PYDANTIC_V2:
            return FileIdOrUrl(root=_FileIdOrUrl.FileId(type="fileId", value=value))  # type: ignore
        else:
            return FileIdOrUrl(__root__=_FileIdOrUrl.FileId(type="fileId", value=value))  # type: ignore

    def url(self, value: commons_types_url_Url) -> FileIdOrUrl:
        if IS_PYDANTIC_V2:
            return FileIdOrUrl(root=_FileIdOrUrl.Url(type="url", value=value))  # type: ignore
        else:
            return FileIdOrUrl(__root__=_FileIdOrUrl.Url(type="url", value=value))  # type: ignore


class FileIdOrUrl(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_FileIdOrUrl.FileId, _FileIdOrUrl.Url], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_FileIdOrUrl.FileId, _FileIdOrUrl.Url]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_FileIdOrUrl.FileId, _FileIdOrUrl.Url], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_FileIdOrUrl.FileId, _FileIdOrUrl.Url]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        file_id: typing.Callable[[commons_types_file_id_FileId], T_Result],
        url: typing.Callable[[commons_types_url_Url], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "fileId":
            return file_id(unioned_value.value)
        if unioned_value.type == "url":
            return url(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _FileIdOrUrl:
    class FileId(UniversalBaseModel):
        type: typing.Literal["fileId"] = "fileId"
        value: commons_types_file_id_FileId

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Url(UniversalBaseModel):
        type: typing.Literal["url"] = "url"
        value: commons_types_url_Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(FileIdOrUrl)
