# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....commons.errors.unauthorized_error import UnauthorizedError
from ....commons.types.docs_config_id import DocsConfigId
from ....commons.types.org_id import OrgId
from ....commons.types.url import Url
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.pydantic_utilities import parse_obj_as
from ....core.request_options import RequestOptions
from .errors.docs_definition_not_found_error import DocsDefinitionNotFoundError
from .errors.domain_not_registered_error import DomainNotRegisteredError
from .types.docs_url_metadata import DocsUrlMetadata
from .types.get_docs_config_by_id_response import GetDocsConfigByIdResponse
from .types.list_all_docs_urls_response import ListAllDocsUrlsResponse
from .types.load_docs_for_url_response import LoadDocsForUrlResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawReadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_organization_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[OrgId]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[OrgId]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/organization-for-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                OrgId,
                parse_obj_as(
                    type_=OrgId,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_docs_url_metadata(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[DocsUrlMetadata]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DocsUrlMetadata]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/metadata-for-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                DocsUrlMetadata,
                parse_obj_as(
                    type_=DocsUrlMetadata,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[LoadDocsForUrlResponse]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[LoadDocsForUrlResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/load-with-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                LoadDocsForUrlResponse,
                parse_obj_as(
                    type_=LoadDocsForUrlResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_private_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[LoadDocsForUrlResponse]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[LoadDocsForUrlResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/private/load-with-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                LoadDocsForUrlResponse,
                parse_obj_as(
                    type_=LoadDocsForUrlResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_all_docs_urls(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        custom: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ListAllDocsUrlsResponse]:
        """
        Returns a list of all public docs.

        Parameters
        ----------
        page : typing.Optional[int]

        limit : typing.Optional[int]

        custom : typing.Optional[bool]
            If true, filters to only docs with a custom URL.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ListAllDocsUrlsResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/urls/list",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "custom": custom,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                ListAllDocsUrlsResponse,
                parse_obj_as(
                    type_=ListAllDocsUrlsResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_docs_config_by_id(
        self, docs_config_id: DocsConfigId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetDocsConfigByIdResponse]:
        """
        Loads the Docs Config and any referenced APIs by ID.

        Parameters
        ----------
        docs_config_id : DocsConfigId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetDocsConfigByIdResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/registry/docs/{jsonable_encoder(docs_config_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GetDocsConfigByIdResponse,
                parse_obj_as(
                    type_=GetDocsConfigByIdResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DocsDefinitionNotFoundError":
                raise DocsDefinitionNotFoundError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def prepopulate_fdr_read_s_3_bucket(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Prepopulates the FDR read S3 bucket with docs definitions

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/prepopulate-s3-bucket",
            method="POST",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawReadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_organization_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[OrgId]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[OrgId]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/organization-for-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                OrgId,
                parse_obj_as(
                    type_=OrgId,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_docs_url_metadata(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[DocsUrlMetadata]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DocsUrlMetadata]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/metadata-for-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                DocsUrlMetadata,
                parse_obj_as(
                    type_=DocsUrlMetadata,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[LoadDocsForUrlResponse]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[LoadDocsForUrlResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/load-with-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                LoadDocsForUrlResponse,
                parse_obj_as(
                    type_=LoadDocsForUrlResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_private_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[LoadDocsForUrlResponse]:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[LoadDocsForUrlResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/private/load-with-url",
            method="POST",
            json={
                "url": url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                LoadDocsForUrlResponse,
                parse_obj_as(
                    type_=LoadDocsForUrlResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DomainNotRegisteredError":
                raise DomainNotRegisteredError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_all_docs_urls(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        custom: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ListAllDocsUrlsResponse]:
        """
        Returns a list of all public docs.

        Parameters
        ----------
        page : typing.Optional[int]

        limit : typing.Optional[int]

        custom : typing.Optional[bool]
            If true, filters to only docs with a custom URL.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ListAllDocsUrlsResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/urls/list",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "custom": custom,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                ListAllDocsUrlsResponse,
                parse_obj_as(
                    type_=ListAllDocsUrlsResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_docs_config_by_id(
        self, docs_config_id: DocsConfigId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetDocsConfigByIdResponse]:
        """
        Loads the Docs Config and any referenced APIs by ID.

        Parameters
        ----------
        docs_config_id : DocsConfigId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetDocsConfigByIdResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/registry/docs/{jsonable_encoder(docs_config_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GetDocsConfigByIdResponse,
                parse_obj_as(
                    type_=GetDocsConfigByIdResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "DocsDefinitionNotFoundError":
                raise DocsDefinitionNotFoundError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def prepopulate_fdr_read_s_3_bucket(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Prepopulates the FDR read S3 bucket with docs definitions

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/prepopulate-s3-bucket",
            method="POST",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
