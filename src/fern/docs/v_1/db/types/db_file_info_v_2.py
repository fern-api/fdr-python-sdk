# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .db_file_info import DbFileInfo
from .db_image_file_info import DbImageFileInfo

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def s_3_key(self, value: DbFileInfo) -> DbFileInfoV2:
        if IS_PYDANTIC_V2:
            return DbFileInfoV2(root=_DbFileInfoV2.S3Key(**value.dict(exclude_unset=True), type="s3Key"))  # type: ignore
        else:
            return DbFileInfoV2(__root__=_DbFileInfoV2.S3Key(**value.dict(exclude_unset=True), type="s3Key"))  # type: ignore

    def image(self, value: DbImageFileInfo) -> DbFileInfoV2:
        if IS_PYDANTIC_V2:
            return DbFileInfoV2(root=_DbFileInfoV2.Image(**value.dict(exclude_unset=True), type="image"))  # type: ignore
        else:
            return DbFileInfoV2(__root__=_DbFileInfoV2.Image(**value.dict(exclude_unset=True), type="image"))  # type: ignore


class DbFileInfoV2(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_DbFileInfoV2.S3Key, _DbFileInfoV2.Image], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_DbFileInfoV2.S3Key, _DbFileInfoV2.Image]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_DbFileInfoV2.S3Key, _DbFileInfoV2.Image], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_DbFileInfoV2.S3Key, _DbFileInfoV2.Image]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, s_3_key: typing.Callable[[DbFileInfo], T_Result], image: typing.Callable[[DbImageFileInfo], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "s3Key":
            return s_3_key(DbFileInfo(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "image":
            return image(DbImageFileInfo(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _DbFileInfoV2:
    class S3Key(DbFileInfo):
        type: typing.Literal["s3Key"] = "s3Key"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Image(DbImageFileInfo):
        type: typing.Literal["image"] = "image"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(DbFileInfoV2)
