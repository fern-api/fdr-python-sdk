# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .changelog_section import ChangelogSection
from .changelog_section_v_3 import ChangelogSectionV3
from .navigation_tab_group import NavigationTabGroup
from .navigation_tab_link import NavigationTabLink

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def group(self, value: NavigationTabGroup) -> NavigationTab:
        if IS_PYDANTIC_V2:
            return NavigationTab(root=_NavigationTab.Group(**value.dict(exclude_unset=True), type="group"))  # type: ignore
        else:
            return NavigationTab(__root__=_NavigationTab.Group(**value.dict(exclude_unset=True), type="group"))  # type: ignore

    def link(self, value: NavigationTabLink) -> NavigationTab:
        if IS_PYDANTIC_V2:
            return NavigationTab(root=_NavigationTab.Link(**value.dict(exclude_unset=True), type="link"))  # type: ignore
        else:
            return NavigationTab(__root__=_NavigationTab.Link(**value.dict(exclude_unset=True), type="link"))  # type: ignore

    def changelog(self, value: ChangelogSection) -> NavigationTab:
        if IS_PYDANTIC_V2:
            return NavigationTab(root=_NavigationTab.Changelog(**value.dict(exclude_unset=True), type="changelog"))  # type: ignore
        else:
            return NavigationTab(__root__=_NavigationTab.Changelog(**value.dict(exclude_unset=True), type="changelog"))  # type: ignore

    def changelog_v_3(self, value: ChangelogSectionV3) -> NavigationTab:
        if IS_PYDANTIC_V2:
            return NavigationTab(root=_NavigationTab.ChangelogV3(**value.dict(exclude_unset=True), type="changelogV3"))  # type: ignore
        else:
            return NavigationTab(
                __root__=_NavigationTab.ChangelogV3(**value.dict(exclude_unset=True), type="changelogV3")
            )  # type: ignore


class NavigationTab(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _NavigationTab.Group, _NavigationTab.Link, _NavigationTab.Changelog, _NavigationTab.ChangelogV3
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _NavigationTab.Group, _NavigationTab.Link, _NavigationTab.Changelog, _NavigationTab.ChangelogV3
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _NavigationTab.Group, _NavigationTab.Link, _NavigationTab.Changelog, _NavigationTab.ChangelogV3
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _NavigationTab.Group, _NavigationTab.Link, _NavigationTab.Changelog, _NavigationTab.ChangelogV3
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        group: typing.Callable[[NavigationTabGroup], T_Result],
        link: typing.Callable[[NavigationTabLink], T_Result],
        changelog: typing.Callable[[ChangelogSection], T_Result],
        changelog_v_3: typing.Callable[[ChangelogSectionV3], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "group":
            return group(NavigationTabGroup(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "link":
            return link(NavigationTabLink(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "changelog":
            return changelog(ChangelogSection(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "changelogV3":
            return changelog_v_3(ChangelogSectionV3(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _NavigationTab:
    class Group(NavigationTabGroup):
        type: typing.Literal["group"] = "group"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Link(NavigationTabLink):
        type: typing.Literal["link"] = "link"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Changelog(ChangelogSection):
        type: typing.Literal["changelog"] = "changelog"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class ChangelogV3(ChangelogSectionV3):
        type: typing.Literal["changelogV3"] = "changelogV3"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(NavigationTab)
