# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.file_id import FileId
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .....core.serialization import FieldMetadata
from ...commons.commons.types.rgba_color import RgbaColor
from .background import Background
from .theme_config import ThemeConfig


class ColorsConfigV3_Dark(UniversalBaseModel):
    type: typing.Literal["dark"] = "dark"
    logo: typing.Optional[FileId] = None
    background_image: typing_extensions.Annotated[typing.Optional[FileId], FieldMetadata(alias="backgroundImage")] = (
        None
    )
    accent_primary: typing_extensions.Annotated[RgbaColor, FieldMetadata(alias="accentPrimary")]
    background: Background
    border: typing.Optional[RgbaColor] = None
    sidebar_background: typing_extensions.Annotated[
        typing.Optional[RgbaColor], FieldMetadata(alias="sidebarBackground")
    ] = None
    header_background: typing_extensions.Annotated[
        typing.Optional[RgbaColor], FieldMetadata(alias="headerBackground")
    ] = None
    card_background: typing_extensions.Annotated[typing.Optional[RgbaColor], FieldMetadata(alias="cardBackground")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ColorsConfigV3_Light(UniversalBaseModel):
    type: typing.Literal["light"] = "light"
    logo: typing.Optional[FileId] = None
    background_image: typing_extensions.Annotated[typing.Optional[FileId], FieldMetadata(alias="backgroundImage")] = (
        None
    )
    accent_primary: typing_extensions.Annotated[RgbaColor, FieldMetadata(alias="accentPrimary")]
    background: Background
    border: typing.Optional[RgbaColor] = None
    sidebar_background: typing_extensions.Annotated[
        typing.Optional[RgbaColor], FieldMetadata(alias="sidebarBackground")
    ] = None
    header_background: typing_extensions.Annotated[
        typing.Optional[RgbaColor], FieldMetadata(alias="headerBackground")
    ] = None
    card_background: typing_extensions.Annotated[typing.Optional[RgbaColor], FieldMetadata(alias="cardBackground")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ColorsConfigV3_DarkAndLight(UniversalBaseModel):
    type: typing.Literal["darkAndLight"] = "darkAndLight"
    dark: ThemeConfig
    light: ThemeConfig

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ColorsConfigV3 = typing.Union[ColorsConfigV3_Dark, ColorsConfigV3_Light, ColorsConfigV3_DarkAndLight]
