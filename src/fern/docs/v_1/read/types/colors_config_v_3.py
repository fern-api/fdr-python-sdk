# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .dark_and_light_mode_config import DarkAndLightModeConfig
from .theme_config import ThemeConfig

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def dark(self, value: ThemeConfig) -> ColorsConfigV3:
        if IS_PYDANTIC_V2:
            return ColorsConfigV3(root=_ColorsConfigV3.Dark(**value.dict(exclude_unset=True), type="dark"))  # type: ignore
        else:
            return ColorsConfigV3(__root__=_ColorsConfigV3.Dark(**value.dict(exclude_unset=True), type="dark"))  # type: ignore

    def light(self, value: ThemeConfig) -> ColorsConfigV3:
        if IS_PYDANTIC_V2:
            return ColorsConfigV3(root=_ColorsConfigV3.Light(**value.dict(exclude_unset=True), type="light"))  # type: ignore
        else:
            return ColorsConfigV3(__root__=_ColorsConfigV3.Light(**value.dict(exclude_unset=True), type="light"))  # type: ignore

    def dark_and_light(self, value: DarkAndLightModeConfig) -> ColorsConfigV3:
        if IS_PYDANTIC_V2:
            return ColorsConfigV3(
                root=_ColorsConfigV3.DarkAndLight(**value.dict(exclude_unset=True), type="darkAndLight")
            )  # type: ignore
        else:
            return ColorsConfigV3(
                __root__=_ColorsConfigV3.DarkAndLight(**value.dict(exclude_unset=True), type="darkAndLight")
            )  # type: ignore


class ColorsConfigV3(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_ColorsConfigV3.Dark, _ColorsConfigV3.Light, _ColorsConfigV3.DarkAndLight],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_ColorsConfigV3.Dark, _ColorsConfigV3.Light, _ColorsConfigV3.DarkAndLight]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_ColorsConfigV3.Dark, _ColorsConfigV3.Light, _ColorsConfigV3.DarkAndLight],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_ColorsConfigV3.Dark, _ColorsConfigV3.Light, _ColorsConfigV3.DarkAndLight]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        dark: typing.Callable[[ThemeConfig], T_Result],
        light: typing.Callable[[ThemeConfig], T_Result],
        dark_and_light: typing.Callable[[DarkAndLightModeConfig], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "dark":
            return dark(ThemeConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "light":
            return light(ThemeConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "darkAndLight":
            return dark_and_light(DarkAndLightModeConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _ColorsConfigV3:
    class Dark(ThemeConfig):
        type: typing.Literal["dark"] = "dark"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Light(ThemeConfig):
        type: typing.Literal["light"] = "light"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class DarkAndLight(DarkAndLightModeConfig):
        type: typing.Literal["darkAndLight"] = "darkAndLight"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(ColorsConfigV3)
