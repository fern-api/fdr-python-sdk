# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from .....commons.types.file_id import FileId
from .....commons.types.url import Url
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .....core.serialization import FieldMetadata
from .....navigation.v_1.types.root_node import RootNode
from ...commons.commons.types.ai_chat_config import AiChatConfig
from ...commons.commons.types.analytics_config import AnalyticsConfig
from ...commons.commons.types.announcement_config import AnnouncementConfig
from ...commons.commons.types.css_config import CssConfig
from ...commons.commons.types.docs_layout_config import DocsLayoutConfig
from ...commons.commons.types.docs_typography_config_v_2 import DocsTypographyConfigV2
from ...commons.commons.types.footer_link import FooterLink
from ...commons.commons.types.integrations_config import IntegrationsConfig
from ...commons.commons.types.js_config import JsConfig
from ...commons.commons.types.metadata_config import MetadataConfig
from ...commons.commons.types.navbar_link import NavbarLink
from ...commons.commons.types.programming_language import ProgrammingLanguage
from ...commons.commons.types.redirect_config import RedirectConfig
from .colors_config_v_3 import ColorsConfigV3
from .height import Height
from .navigation_config import NavigationConfig


class DocsConfig(UniversalBaseModel):
    title: typing.Optional[str] = None
    default_language: typing_extensions.Annotated[
        typing.Optional[ProgrammingLanguage], FieldMetadata(alias="defaultLanguage")
    ] = None
    announcement: typing.Optional[AnnouncementConfig] = None
    navigation: typing.Optional[NavigationConfig] = None
    root: typing.Optional[RootNode] = None
    navbar_links: typing_extensions.Annotated[
        typing.Optional[typing.List[NavbarLink]], FieldMetadata(alias="navbarLinks")
    ] = None
    footer_links: typing_extensions.Annotated[
        typing.Optional[typing.List[FooterLink]], FieldMetadata(alias="footerLinks")
    ] = None
    hide_nav_links: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hideNavLinks")] = None
    logo_height: typing_extensions.Annotated[typing.Optional[Height], FieldMetadata(alias="logoHeight")] = None
    logo_href: typing_extensions.Annotated[typing.Optional[Url], FieldMetadata(alias="logoHref")] = None
    favicon: typing.Optional[FileId] = None
    metadata: typing.Optional[MetadataConfig] = None
    redirects: typing.Optional[typing.List[RedirectConfig]] = None
    colors_v_3: typing_extensions.Annotated[typing.Optional[ColorsConfigV3], FieldMetadata(alias="colorsV3")] = None
    layout: typing.Optional[DocsLayoutConfig] = None
    typography_v_2: typing_extensions.Annotated[
        typing.Optional[DocsTypographyConfigV2], FieldMetadata(alias="typographyV2")
    ] = None
    analytics_config: typing_extensions.Annotated[
        typing.Optional[AnalyticsConfig], FieldMetadata(alias="analyticsConfig")
    ] = None
    integrations: typing.Optional[IntegrationsConfig] = None
    css: typing.Optional[CssConfig] = None
    js: typing.Optional[JsConfig] = None
    ai_chat_config: typing_extensions.Annotated[typing.Optional[AiChatConfig], FieldMetadata(alias="aiChatConfig")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
