# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.api_definition_id import ApiDefinitionId
from .....commons.types.page_id import PageId
from .....commons.types.url import Url
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from .....core.serialization import FieldMetadata
from .....navigation.v_1.types.api_reference_node import ApiReferenceNode
from .....navigation.v_1.types.changelog_node import ChangelogNode
from .api_artifacts import ApiArtifacts
from .api_navigation_config_root import ApiNavigationConfigRoot
from .changelog_item import ChangelogItem
from .changelog_section import ChangelogSection
from .changelog_section_v_2 import ChangelogSectionV2


class NavigationItem_Page(UniversalBaseModel):
    type: typing.Literal["page"] = "page"
    id: PageId
    title: str
    icon: typing.Optional[str] = None
    hidden: typing.Optional[bool] = None
    url_slug_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="urlSlugOverride")] = None
    full_slug: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="fullSlug")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavigationItem_Api(UniversalBaseModel):
    type: typing.Literal["api"] = "api"
    title: str
    api: ApiDefinitionId
    artifacts: typing.Optional[ApiArtifacts] = None
    skip_url_slug: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="skipUrlSlug")] = None
    show_errors: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="showErrors")] = None
    changelog: typing.Optional[ChangelogSection] = None
    changelog_v_2: typing_extensions.Annotated[
        typing.Optional[ChangelogSectionV2], FieldMetadata(alias="changelogV2")
    ] = None
    navigation: typing.Optional[ApiNavigationConfigRoot] = None
    long_scrolling: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="longScrolling")] = None
    flattened: typing.Optional[bool] = None
    icon: typing.Optional[str] = None
    hidden: typing.Optional[bool] = None
    url_slug_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="urlSlugOverride")] = None
    full_slug: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="fullSlug")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavigationItem_ApiV2(UniversalBaseModel):
    type: typing.Literal["apiV2"] = "apiV2"
    node: ApiReferenceNode

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavigationItem_Section(UniversalBaseModel):
    type: typing.Literal["section"] = "section"
    title: str
    items: typing.List["NavigationItem"]
    collapsed: typing.Optional[bool] = None
    skip_url_slug: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="skipUrlSlug")] = None
    overview_page_id: typing_extensions.Annotated[typing.Optional[PageId], FieldMetadata(alias="overviewPageId")] = None
    icon: typing.Optional[str] = None
    hidden: typing.Optional[bool] = None
    url_slug_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="urlSlugOverride")] = None
    full_slug: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="fullSlug")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .api_navigation_config_subpackage import ApiNavigationConfigSubpackage  # noqa: E402, F401, I001
from .....navigation.v_1.types.api_package_node import ApiPackageNode  # noqa: E402, F401, I001
from .docs_section import DocsSection  # noqa: E402, F401, I001


class NavigationItem_Link(UniversalBaseModel):
    type: typing.Literal["link"] = "link"
    title: str
    icon: typing.Optional[str] = None
    url: Url

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavigationItem_Changelog(UniversalBaseModel):
    type: typing.Literal["changelog"] = "changelog"
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    page_id: typing_extensions.Annotated[typing.Optional[PageId], FieldMetadata(alias="pageId")] = None
    items: typing.List[ChangelogItem]
    icon: typing.Optional[str] = None
    hidden: typing.Optional[bool] = None
    url_slug_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="urlSlugOverride")] = None
    full_slug: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="fullSlug")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavigationItem_ChangelogV3(UniversalBaseModel):
    type: typing.Literal["changelogV3"] = "changelogV3"
    node: ChangelogNode

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


NavigationItem = typing.Union[
    NavigationItem_Page,
    NavigationItem_Api,
    NavigationItem_ApiV2,
    NavigationItem_Section,
    NavigationItem_Link,
    NavigationItem_Changelog,
    NavigationItem_ChangelogV3,
]
update_forward_refs(NavigationItem_Api)
update_forward_refs(NavigationItem_ApiV2)
update_forward_refs(NavigationItem_Section)
