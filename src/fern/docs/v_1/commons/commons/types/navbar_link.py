# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......commons.types.url import Url
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ......core.serialization import FieldMetadata


class NavbarLink_Filled(UniversalBaseModel):
    type: typing.Literal["filled"] = "filled"
    url: Url
    text: typing.Optional[str] = None
    icon: typing.Optional[str] = None
    right_icon: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="rightIcon")] = None
    rounded: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavbarLink_Outlined(UniversalBaseModel):
    type: typing.Literal["outlined"] = "outlined"
    url: Url
    text: typing.Optional[str] = None
    icon: typing.Optional[str] = None
    right_icon: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="rightIcon")] = None
    rounded: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavbarLink_Minimal(UniversalBaseModel):
    type: typing.Literal["minimal"] = "minimal"
    url: Url
    text: typing.Optional[str] = None
    icon: typing.Optional[str] = None
    right_icon: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="rightIcon")] = None
    rounded: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavbarLink_Github(UniversalBaseModel):
    type: typing.Literal["github"] = "github"
    url: Url

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavbarLink_Primary(UniversalBaseModel):
    type: typing.Literal["primary"] = "primary"
    url: Url
    text: typing.Optional[str] = None
    icon: typing.Optional[str] = None
    right_icon: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="rightIcon")] = None
    rounded: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NavbarLink_Secondary(UniversalBaseModel):
    type: typing.Literal["secondary"] = "secondary"
    url: Url
    text: typing.Optional[str] = None
    icon: typing.Optional[str] = None
    right_icon: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="rightIcon")] = None
    rounded: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


NavbarLink = typing.Union[
    NavbarLink_Filled,
    NavbarLink_Outlined,
    NavbarLink_Minimal,
    NavbarLink_Github,
    NavbarLink_Primary,
    NavbarLink_Secondary,
]
