# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .rgba_color import RgbaColor


class ColorConfig_Unthemed(UniversalBaseModel):
    type: typing.Literal["unthemed"] = "unthemed"
    color: typing.Optional[RgbaColor] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ColorConfig_Themed(UniversalBaseModel):
    type: typing.Literal["themed"] = "themed"
    dark: typing.Optional[RgbaColor] = None
    light: typing.Optional[RgbaColor] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ColorConfig = typing.Union[ColorConfig_Unthemed, ColorConfig_Themed]
