# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .custom_font_config import CustomFontConfig

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def custom(self, value: CustomFontConfig) -> FontConfigV2:
        if IS_PYDANTIC_V2:
            return FontConfigV2(root=_FontConfigV2.Custom(**value.dict(exclude_unset=True), type="custom"))  # type: ignore
        else:
            return FontConfigV2(__root__=_FontConfigV2.Custom(**value.dict(exclude_unset=True), type="custom"))  # type: ignore


class FontConfigV2(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_FontConfigV2.Custom]

        def get_as_union(self) -> typing.Union[_FontConfigV2.Custom]:
            return self.root
    else:
        __root__: typing.Union[_FontConfigV2.Custom]

        def get_as_union(self) -> typing.Union[_FontConfigV2.Custom]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, custom: typing.Callable[[CustomFontConfig], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "custom":
            return custom(CustomFontConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _FontConfigV2:
    class Custom(CustomFontConfig):
        type: typing.Literal["custom"] = "custom"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(FontConfigV2)
