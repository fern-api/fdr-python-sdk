# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ......commons.types.url import Url
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FooterLink_Github(UniversalBaseModel):
    value: Url
    type: typing.Literal["github"] = "github"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Twitter(UniversalBaseModel):
    value: Url
    type: typing.Literal["twitter"] = "twitter"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_X(UniversalBaseModel):
    value: Url
    type: typing.Literal["x"] = "x"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Linkedin(UniversalBaseModel):
    value: Url
    type: typing.Literal["linkedin"] = "linkedin"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Youtube(UniversalBaseModel):
    value: Url
    type: typing.Literal["youtube"] = "youtube"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Instagram(UniversalBaseModel):
    value: Url
    type: typing.Literal["instagram"] = "instagram"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Facebook(UniversalBaseModel):
    value: Url
    type: typing.Literal["facebook"] = "facebook"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Discord(UniversalBaseModel):
    value: Url
    type: typing.Literal["discord"] = "discord"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Slack(UniversalBaseModel):
    value: Url
    type: typing.Literal["slack"] = "slack"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Hackernews(UniversalBaseModel):
    value: Url
    type: typing.Literal["hackernews"] = "hackernews"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Medium(UniversalBaseModel):
    value: Url
    type: typing.Literal["medium"] = "medium"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FooterLink_Website(UniversalBaseModel):
    value: Url
    type: typing.Literal["website"] = "website"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


FooterLink = typing.Union[
    FooterLink_Github,
    FooterLink_Twitter,
    FooterLink_X,
    FooterLink_Linkedin,
    FooterLink_Youtube,
    FooterLink_Instagram,
    FooterLink_Facebook,
    FooterLink_Discord,
    FooterLink_Slack,
    FooterLink_Hackernews,
    FooterLink_Medium,
    FooterLink_Website,
]
