# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......commons.types.url import Url
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def github(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Github(type="github", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Github(type="github", value=value))  # type: ignore

    def twitter(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Twitter(type="twitter", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Twitter(type="twitter", value=value))  # type: ignore

    def x(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.X(type="x", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.X(type="x", value=value))  # type: ignore

    def linkedin(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Linkedin(type="linkedin", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Linkedin(type="linkedin", value=value))  # type: ignore

    def youtube(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Youtube(type="youtube", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Youtube(type="youtube", value=value))  # type: ignore

    def instagram(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Instagram(type="instagram", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Instagram(type="instagram", value=value))  # type: ignore

    def facebook(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Facebook(type="facebook", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Facebook(type="facebook", value=value))  # type: ignore

    def discord(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Discord(type="discord", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Discord(type="discord", value=value))  # type: ignore

    def slack(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Slack(type="slack", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Slack(type="slack", value=value))  # type: ignore

    def hackernews(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Hackernews(type="hackernews", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Hackernews(type="hackernews", value=value))  # type: ignore

    def medium(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Medium(type="medium", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Medium(type="medium", value=value))  # type: ignore

    def website(self, value: Url) -> FooterLink:
        if IS_PYDANTIC_V2:
            return FooterLink(root=_FooterLink.Website(type="website", value=value))  # type: ignore
        else:
            return FooterLink(__root__=_FooterLink.Website(type="website", value=value))  # type: ignore


class FooterLink(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _FooterLink.Github,
                _FooterLink.Twitter,
                _FooterLink.X,
                _FooterLink.Linkedin,
                _FooterLink.Youtube,
                _FooterLink.Instagram,
                _FooterLink.Facebook,
                _FooterLink.Discord,
                _FooterLink.Slack,
                _FooterLink.Hackernews,
                _FooterLink.Medium,
                _FooterLink.Website,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _FooterLink.Github,
            _FooterLink.Twitter,
            _FooterLink.X,
            _FooterLink.Linkedin,
            _FooterLink.Youtube,
            _FooterLink.Instagram,
            _FooterLink.Facebook,
            _FooterLink.Discord,
            _FooterLink.Slack,
            _FooterLink.Hackernews,
            _FooterLink.Medium,
            _FooterLink.Website,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _FooterLink.Github,
                _FooterLink.Twitter,
                _FooterLink.X,
                _FooterLink.Linkedin,
                _FooterLink.Youtube,
                _FooterLink.Instagram,
                _FooterLink.Facebook,
                _FooterLink.Discord,
                _FooterLink.Slack,
                _FooterLink.Hackernews,
                _FooterLink.Medium,
                _FooterLink.Website,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _FooterLink.Github,
            _FooterLink.Twitter,
            _FooterLink.X,
            _FooterLink.Linkedin,
            _FooterLink.Youtube,
            _FooterLink.Instagram,
            _FooterLink.Facebook,
            _FooterLink.Discord,
            _FooterLink.Slack,
            _FooterLink.Hackernews,
            _FooterLink.Medium,
            _FooterLink.Website,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        github: typing.Callable[[Url], T_Result],
        twitter: typing.Callable[[Url], T_Result],
        x: typing.Callable[[Url], T_Result],
        linkedin: typing.Callable[[Url], T_Result],
        youtube: typing.Callable[[Url], T_Result],
        instagram: typing.Callable[[Url], T_Result],
        facebook: typing.Callable[[Url], T_Result],
        discord: typing.Callable[[Url], T_Result],
        slack: typing.Callable[[Url], T_Result],
        hackernews: typing.Callable[[Url], T_Result],
        medium: typing.Callable[[Url], T_Result],
        website: typing.Callable[[Url], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "github":
            return github(unioned_value.value)
        if unioned_value.type == "twitter":
            return twitter(unioned_value.value)
        if unioned_value.type == "x":
            return x(unioned_value.value)
        if unioned_value.type == "linkedin":
            return linkedin(unioned_value.value)
        if unioned_value.type == "youtube":
            return youtube(unioned_value.value)
        if unioned_value.type == "instagram":
            return instagram(unioned_value.value)
        if unioned_value.type == "facebook":
            return facebook(unioned_value.value)
        if unioned_value.type == "discord":
            return discord(unioned_value.value)
        if unioned_value.type == "slack":
            return slack(unioned_value.value)
        if unioned_value.type == "hackernews":
            return hackernews(unioned_value.value)
        if unioned_value.type == "medium":
            return medium(unioned_value.value)
        if unioned_value.type == "website":
            return website(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _FooterLink:
    class Github(UniversalBaseModel):
        type: typing.Literal["github"] = "github"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Twitter(UniversalBaseModel):
        type: typing.Literal["twitter"] = "twitter"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class X(UniversalBaseModel):
        type: typing.Literal["x"] = "x"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Linkedin(UniversalBaseModel):
        type: typing.Literal["linkedin"] = "linkedin"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Youtube(UniversalBaseModel):
        type: typing.Literal["youtube"] = "youtube"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Instagram(UniversalBaseModel):
        type: typing.Literal["instagram"] = "instagram"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Facebook(UniversalBaseModel):
        type: typing.Literal["facebook"] = "facebook"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Discord(UniversalBaseModel):
        type: typing.Literal["discord"] = "discord"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Slack(UniversalBaseModel):
        type: typing.Literal["slack"] = "slack"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Hackernews(UniversalBaseModel):
        type: typing.Literal["hackernews"] = "hackernews"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Medium(UniversalBaseModel):
        type: typing.Literal["medium"] = "medium"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Website(UniversalBaseModel):
        type: typing.Literal["website"] = "website"
        value: Url

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(FooterLink)
