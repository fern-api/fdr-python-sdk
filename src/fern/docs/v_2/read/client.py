# This file was auto-generated by Fern from our API Definition.

import typing

from ....commons.types.docs_config_id import DocsConfigId
from ....commons.types.org_id import OrgId
from ....commons.types.url import Url
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from .raw_client import AsyncRawReadClient, RawReadClient
from .types.docs_url_metadata import DocsUrlMetadata
from .types.get_docs_config_by_id_response import GetDocsConfigByIdResponse
from .types.list_all_docs_urls_response import ListAllDocsUrlsResponse
from .types.load_docs_for_url_response import LoadDocsForUrlResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReadClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawReadClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawReadClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawReadClient
        """
        return self._raw_client

    def get_organization_for_url(self, *, url: Url, request_options: typing.Optional[RequestOptions] = None) -> OrgId:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrgId

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.docs.v_2.read.get_organization_for_url(
            url="url",
        )
        """
        _response = self._raw_client.get_organization_for_url(url=url, request_options=request_options)
        return _response.data

    def get_docs_url_metadata(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> DocsUrlMetadata:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocsUrlMetadata

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.docs.v_2.read.get_docs_url_metadata(
            url="url",
        )
        """
        _response = self._raw_client.get_docs_url_metadata(url=url, request_options=request_options)
        return _response.data

    def get_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> LoadDocsForUrlResponse:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LoadDocsForUrlResponse

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.docs.v_2.read.get_docs_for_url(
            url="url",
        )
        """
        _response = self._raw_client.get_docs_for_url(url=url, request_options=request_options)
        return _response.data

    def get_private_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> LoadDocsForUrlResponse:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LoadDocsForUrlResponse

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.docs.v_2.read.get_private_docs_for_url(
            url="url",
        )
        """
        _response = self._raw_client.get_private_docs_for_url(url=url, request_options=request_options)
        return _response.data

    def list_all_docs_urls(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        custom: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListAllDocsUrlsResponse:
        """
        Returns a list of all public docs.

        Parameters
        ----------
        page : typing.Optional[int]

        limit : typing.Optional[int]

        custom : typing.Optional[bool]
            If true, filters to only docs with a custom URL.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAllDocsUrlsResponse

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.docs.v_2.read.list_all_docs_urls()
        """
        _response = self._raw_client.list_all_docs_urls(
            page=page, limit=limit, custom=custom, request_options=request_options
        )
        return _response.data

    def get_docs_config_by_id(
        self, docs_config_id: DocsConfigId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDocsConfigByIdResponse:
        """
        Loads the Docs Config and any referenced APIs by ID.

        Parameters
        ----------
        docs_config_id : DocsConfigId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDocsConfigByIdResponse

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.docs.v_2.read.get_docs_config_by_id(
            docs_config_id="docsConfigId",
        )
        """
        _response = self._raw_client.get_docs_config_by_id(docs_config_id, request_options=request_options)
        return _response.data

    def prepopulate_fdr_read_s_3_bucket(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Prepopulates the FDR read S3 bucket with docs definitions

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.docs.v_2.read.prepopulate_fdr_read_s_3_bucket()
        """
        _response = self._raw_client.prepopulate_fdr_read_s_3_bucket(request_options=request_options)
        return _response.data


class AsyncReadClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawReadClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawReadClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawReadClient
        """
        return self._raw_client

    async def get_organization_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> OrgId:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrgId

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_2.read.get_organization_for_url(
                url="url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_organization_for_url(url=url, request_options=request_options)
        return _response.data

    async def get_docs_url_metadata(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> DocsUrlMetadata:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DocsUrlMetadata

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_2.read.get_docs_url_metadata(
                url="url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_docs_url_metadata(url=url, request_options=request_options)
        return _response.data

    async def get_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> LoadDocsForUrlResponse:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LoadDocsForUrlResponse

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_2.read.get_docs_for_url(
                url="url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_docs_for_url(url=url, request_options=request_options)
        return _response.data

    async def get_private_docs_for_url(
        self, *, url: Url, request_options: typing.Optional[RequestOptions] = None
    ) -> LoadDocsForUrlResponse:
        """
        Parameters
        ----------
        url : Url

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LoadDocsForUrlResponse

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_2.read.get_private_docs_for_url(
                url="url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_private_docs_for_url(url=url, request_options=request_options)
        return _response.data

    async def list_all_docs_urls(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        custom: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListAllDocsUrlsResponse:
        """
        Returns a list of all public docs.

        Parameters
        ----------
        page : typing.Optional[int]

        limit : typing.Optional[int]

        custom : typing.Optional[bool]
            If true, filters to only docs with a custom URL.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListAllDocsUrlsResponse

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_2.read.list_all_docs_urls()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_all_docs_urls(
            page=page, limit=limit, custom=custom, request_options=request_options
        )
        return _response.data

    async def get_docs_config_by_id(
        self, docs_config_id: DocsConfigId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetDocsConfigByIdResponse:
        """
        Loads the Docs Config and any referenced APIs by ID.

        Parameters
        ----------
        docs_config_id : DocsConfigId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDocsConfigByIdResponse

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_2.read.get_docs_config_by_id(
                docs_config_id="docsConfigId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_docs_config_by_id(docs_config_id, request_options=request_options)
        return _response.data

    async def prepopulate_fdr_read_s_3_bucket(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Prepopulates the FDR read S3 bucket with docs definitions

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.docs.v_2.read.prepopulate_fdr_read_s_3_bucket()


        asyncio.run(main())
        """
        _response = await self._raw_client.prepopulate_fdr_read_s_3_bucket(request_options=request_options)
        return _response.data
