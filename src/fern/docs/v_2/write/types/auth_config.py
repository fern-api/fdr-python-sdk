# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .private_auth_config import PrivateAuthConfig
from .public_auth_config import PublicAuthConfig

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def public(self, value: PublicAuthConfig) -> AuthConfig:
        if IS_PYDANTIC_V2:
            return AuthConfig(root=_AuthConfig.Public(**value.dict(exclude_unset=True), type="public"))  # type: ignore
        else:
            return AuthConfig(__root__=_AuthConfig.Public(**value.dict(exclude_unset=True), type="public"))  # type: ignore

    def private(self, value: PrivateAuthConfig) -> AuthConfig:
        if IS_PYDANTIC_V2:
            return AuthConfig(root=_AuthConfig.Private(**value.dict(exclude_unset=True), type="private"))  # type: ignore
        else:
            return AuthConfig(__root__=_AuthConfig.Private(**value.dict(exclude_unset=True), type="private"))  # type: ignore


class AuthConfig(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_AuthConfig.Public, _AuthConfig.Private], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_AuthConfig.Public, _AuthConfig.Private]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_AuthConfig.Public, _AuthConfig.Private], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_AuthConfig.Public, _AuthConfig.Private]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        public: typing.Callable[[PublicAuthConfig], T_Result],
        private: typing.Callable[[PrivateAuthConfig], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "public":
            return public(PublicAuthConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "private":
            return private(PrivateAuthConfig(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _AuthConfig:
    class Public(PublicAuthConfig):
        type: typing.Literal["public"] = "public"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Private(PrivateAuthConfig):
        type: typing.Literal["private"] = "private"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(AuthConfig)
