# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ....commons.errors.domain_belongs_to_another_org_error import DomainBelongsToAnotherOrgError
from ....commons.errors.invalid_url_error import InvalidUrlError
from ....commons.errors.unauthorized_error import UnauthorizedError
from ....commons.errors.unavailable_error import UnavailableError
from ....commons.errors.user_not_in_org_error import UserNotInOrgError
from ....commons.types.api_id import ApiId
from ....commons.types.org_id import OrgId
from ....commons.types.url import Url
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.http_response import AsyncHttpResponse, HttpResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.pydantic_utilities import parse_obj_as
from ....core.request_options import RequestOptions
from ....core.serialization import convert_and_respect_annotation_metadata
from ...v_1.write.errors.docs_registration_id_not_found import DocsRegistrationIdNotFound
from ...v_1.write.types.docs_definition import DocsDefinition
from ...v_1.write.types.docs_registration_id import DocsRegistrationId
from ...v_1.write.types.file_path import FilePath
from ...v_1.write.types.start_docs_register_response import StartDocsRegisterResponse
from .errors.docs_not_found_error import DocsNotFoundError
from .errors.invalid_custom_domain_error import InvalidCustomDomainError
from .errors.invalid_domain_error import InvalidDomainError
from .types.auth_config import AuthConfig
from .types.image_file_path import ImageFilePath
from .types.start_docs_preview_register_response import StartDocsPreviewRegisterResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawWriteClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def start_docs_register(
        self,
        *,
        domain: str,
        custom_domains: typing.Sequence[str],
        org_id: OrgId,
        api_id: ApiId,
        filepaths: typing.Sequence[FilePath],
        auth_config: typing.Optional[AuthConfig] = OMIT,
        images: typing.Optional[typing.Sequence[ImageFilePath]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[StartDocsRegisterResponse]:
        """
        Parameters
        ----------
        domain : str
            A `buildwithfern.com` url

        custom_domains : typing.Sequence[str]

        org_id : OrgId

        api_id : ApiId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        auth_config : typing.Optional[AuthConfig]

        images : typing.Optional[typing.Sequence[ImageFilePath]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[StartDocsRegisterResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/v2/init",
            method="POST",
            json={
                "domain": domain,
                "customDomains": custom_domains,
                "authConfig": convert_and_respect_annotation_metadata(
                    object_=auth_config, annotation=AuthConfig, direction="write"
                ),
                "orgId": org_id,
                "apiId": api_id,
                "filepaths": filepaths,
                "images": convert_and_respect_annotation_metadata(
                    object_=images, annotation=typing.Sequence[ImageFilePath], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                StartDocsRegisterResponse,
                parse_obj_as(
                    type_=StartDocsRegisterResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidDomainError":
                raise InvalidDomainError(headers=dict(_response.headers))
            if _response_json["error"] == "InvalidCustomDomainError":
                raise InvalidCustomDomainError(headers=dict(_response.headers))
            if _response_json["error"] == "DomainBelongsToAnotherOrgError":
                raise DomainBelongsToAnotherOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidURLError":
                raise InvalidUrlError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def start_docs_preview_register(
        self,
        *,
        org_id: OrgId,
        filepaths: typing.Sequence[FilePath],
        base_path: typing.Optional[str] = OMIT,
        auth_config: typing.Optional[AuthConfig] = OMIT,
        images: typing.Optional[typing.Sequence[ImageFilePath]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[StartDocsPreviewRegisterResponse]:
        """
        Parameters
        ----------
        org_id : OrgId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        base_path : typing.Optional[str]

        auth_config : typing.Optional[AuthConfig]

        images : typing.Optional[typing.Sequence[ImageFilePath]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[StartDocsPreviewRegisterResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/preview/init",
            method="POST",
            json={
                "basePath": base_path,
                "orgId": org_id,
                "authConfig": convert_and_respect_annotation_metadata(
                    object_=auth_config, annotation=AuthConfig, direction="write"
                ),
                "filepaths": filepaths,
                "images": convert_and_respect_annotation_metadata(
                    object_=images, annotation=typing.Sequence[ImageFilePath], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                StartDocsPreviewRegisterResponse,
                parse_obj_as(
                    type_=StartDocsPreviewRegisterResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidDomainError":
                raise InvalidDomainError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def finish_docs_register(
        self,
        docs_registration_id: DocsRegistrationId,
        *,
        docs_definition: DocsDefinition,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        docs_registration_id : DocsRegistrationId

        docs_definition : DocsDefinition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/registry/docs/register/{jsonable_encoder(docs_registration_id)}",
            method="POST",
            json={
                "docsDefinition": convert_and_respect_annotation_metadata(
                    object_=docs_definition, annotation=DocsDefinition, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "DocsRegistrationIdNotFound":
                raise DocsRegistrationIdNotFound(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def transfer_ownership_of_domain(
        self, *, domain: str, to_org_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        domain : str

        to_org_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/transfer-ownership",
            method="POST",
            json={
                "domain": domain,
                "toOrgId": to_org_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "DocsNotFoundError":
                raise DocsNotFoundError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def set_is_archived(
        self, *, url: Url, is_archived: bool, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        url : Url

        is_archived : bool

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/set-is-archived",
            method="POST",
            json={
                "url": url,
                "isArchived": is_archived,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "DocsNotFoundError":
                raise DocsNotFoundError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def set_docs_url_metadata(
        self,
        *,
        url: Url,
        github_url: typing.Optional[Url] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        url : Url

        github_url : typing.Optional[Url]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/registry/docs/set-metadata-for-url",
            method="POST",
            json={
                "url": url,
                "githubUrl": github_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "DocsNotFoundError":
                raise DocsNotFoundError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawWriteClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def start_docs_register(
        self,
        *,
        domain: str,
        custom_domains: typing.Sequence[str],
        org_id: OrgId,
        api_id: ApiId,
        filepaths: typing.Sequence[FilePath],
        auth_config: typing.Optional[AuthConfig] = OMIT,
        images: typing.Optional[typing.Sequence[ImageFilePath]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[StartDocsRegisterResponse]:
        """
        Parameters
        ----------
        domain : str
            A `buildwithfern.com` url

        custom_domains : typing.Sequence[str]

        org_id : OrgId

        api_id : ApiId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        auth_config : typing.Optional[AuthConfig]

        images : typing.Optional[typing.Sequence[ImageFilePath]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[StartDocsRegisterResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/v2/init",
            method="POST",
            json={
                "domain": domain,
                "customDomains": custom_domains,
                "authConfig": convert_and_respect_annotation_metadata(
                    object_=auth_config, annotation=AuthConfig, direction="write"
                ),
                "orgId": org_id,
                "apiId": api_id,
                "filepaths": filepaths,
                "images": convert_and_respect_annotation_metadata(
                    object_=images, annotation=typing.Sequence[ImageFilePath], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                StartDocsRegisterResponse,
                parse_obj_as(
                    type_=StartDocsRegisterResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidDomainError":
                raise InvalidDomainError(headers=dict(_response.headers))
            if _response_json["error"] == "InvalidCustomDomainError":
                raise InvalidCustomDomainError(headers=dict(_response.headers))
            if _response_json["error"] == "DomainBelongsToAnotherOrgError":
                raise DomainBelongsToAnotherOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidURLError":
                raise InvalidUrlError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def start_docs_preview_register(
        self,
        *,
        org_id: OrgId,
        filepaths: typing.Sequence[FilePath],
        base_path: typing.Optional[str] = OMIT,
        auth_config: typing.Optional[AuthConfig] = OMIT,
        images: typing.Optional[typing.Sequence[ImageFilePath]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[StartDocsPreviewRegisterResponse]:
        """
        Parameters
        ----------
        org_id : OrgId

        filepaths : typing.Sequence[FilePath]
            Relative filepath from docs folder.

        base_path : typing.Optional[str]

        auth_config : typing.Optional[AuthConfig]

        images : typing.Optional[typing.Sequence[ImageFilePath]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[StartDocsPreviewRegisterResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/preview/init",
            method="POST",
            json={
                "basePath": base_path,
                "orgId": org_id,
                "authConfig": convert_and_respect_annotation_metadata(
                    object_=auth_config, annotation=AuthConfig, direction="write"
                ),
                "filepaths": filepaths,
                "images": convert_and_respect_annotation_metadata(
                    object_=images, annotation=typing.Sequence[ImageFilePath], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                StartDocsPreviewRegisterResponse,
                parse_obj_as(
                    type_=StartDocsPreviewRegisterResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidDomainError":
                raise InvalidDomainError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def finish_docs_register(
        self,
        docs_registration_id: DocsRegistrationId,
        *,
        docs_definition: DocsDefinition,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        docs_registration_id : DocsRegistrationId

        docs_definition : DocsDefinition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/registry/docs/register/{jsonable_encoder(docs_registration_id)}",
            method="POST",
            json={
                "docsDefinition": convert_and_respect_annotation_metadata(
                    object_=docs_definition, annotation=DocsDefinition, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "DocsRegistrationIdNotFound":
                raise DocsRegistrationIdNotFound(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def transfer_ownership_of_domain(
        self, *, domain: str, to_org_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        domain : str

        to_org_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/transfer-ownership",
            method="POST",
            json={
                "domain": domain,
                "toOrgId": to_org_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "DocsNotFoundError":
                raise DocsNotFoundError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def set_is_archived(
        self, *, url: Url, is_archived: bool, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        url : Url

        is_archived : bool

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/set-is-archived",
            method="POST",
            json={
                "url": url,
                "isArchived": is_archived,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "DocsNotFoundError":
                raise DocsNotFoundError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def set_docs_url_metadata(
        self,
        *,
        url: Url,
        github_url: typing.Optional[Url] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        url : Url

        github_url : typing.Optional[Url]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/registry/docs/set-metadata-for-url",
            method="POST",
            json={
                "url": url,
                "githubUrl": github_url,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if "error" in _response_json:
            if _response_json["error"] == "DocsNotFoundError":
                raise DocsNotFoundError(headers=dict(_response.headers))
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
