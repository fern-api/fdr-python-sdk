# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2
from .....core.serialization import FieldMetadata
from .....navigation.latest.types.breadcrumb_item import BreadcrumbItem
from .....navigation.latest.types.slug import Slug
from ...commons.types.file_id_or_url import FileIdOrUrl
from ...seo.types.with_json_ld_breadcrumbs import WithJsonLdBreadcrumbs
from ...seo.types.with_metadata_config import WithMetadataConfig
from .layout import Layout
from .logo import Logo


class Frontmatter(WithMetadataConfig, WithJsonLdBreadcrumbs):
    layout: typing.Optional[Layout] = pydantic.Field(default=None)
    """
    The layout of the page. This will determine the width of the content.
    """

    slug: typing.Optional[Slug] = pydantic.Field(default=None)
    """
    if provided, the frontmatter slug will be used instead of tying to piece it together from the navigation hierarchy.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    The title of the page. If not set, the title will inherit from what's set in the sidebar.
    This is also used for the <title> tag in the HTML.
    """

    headline: typing.Optional[str] = pydantic.Field(default=None)
    """
    The SEO title of the page. If not set, the title will inherit what's set in the sidebar.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the page. This is used for the <meta name="description"> tag in the HTML.
    """

    subtitle: typing.Optional[str] = pydantic.Field(default=None)
    """
    The subtitle of the page. This is a markdown string that is rendered below the title.
    If `description` is not set, this will be used for the <meta name="description"> tag in the HTML.
    """

    logo: typing.Optional[Logo] = pydantic.Field(default=None)
    """
    The logo for this page.
    """

    image: typing.Optional[FileIdOrUrl] = pydantic.Field(default=None)
    """
    The URL to this page's image. This is currently an alias for `og:image`, but its purpose may change to a be a cover-image (pre-title).
    """

    edit_this_page_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="edit-this-page-url")] = (
        pydantic.Field(default=None)
    )
    """
    Reners an "Edit this page" link at the bottom of the page.
    """

    hide_toc: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hide-toc")] = pydantic.Field(
        default=None
    )
    """
    Hides the table of contents.
    """

    force_toc: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="force-toc")] = pydantic.Field(
        default=None
    )
    """
    Forces the table of contents to be generated for steps, accordions, and tabs.
    """

    hide_nav_links: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hide-nav-links")] = (
        pydantic.Field(default=None)
    )
    """
    Hides the (prev, next) navigation links at the bottom of the page.
    """

    max_toc_depth: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="max-toc-depth")] = (
        pydantic.Field(default=None)
    )
    """
    The maximum depth of the table of contents.
    """

    hide_feedback: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="hide-feedback")] = (
        pydantic.Field(default=None)
    )
    """
    Hides the feedback form at the bottom of the page
    """

    no_image_zoom: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="no-image-zoom")] = (
        pydantic.Field(default=None)
    )
    """
    Disables click-to-zoom on all imgages on this page.
    """

    breadcrumb: typing.Optional[typing.List[BreadcrumbItem]] = pydantic.Field(default=None)
    """
    By default, this is inferred from docs.yml, but can be overridden.
    """

    excerpt: typing.Optional[str] = pydantic.Field(default=None)
    """
    Use subtitle instead.
    """

    canonical_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="canonical-url")] = (
        pydantic.Field(default=None)
    )
    """
    The canonical URL of the page. This is used for the <link rel="canonical"> tag in the HTML.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
