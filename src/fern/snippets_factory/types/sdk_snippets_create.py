# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...snippets.types.csharp_sdk import CsharpSdk
from ...snippets.types.go_sdk import GoSdk
from ...snippets.types.java_sdk import JavaSdk
from ...snippets.types.python_sdk import PythonSdk
from ...snippets.types.ruby_sdk import RubySdk
from ...snippets.types.type_script_sdk import TypeScriptSdk
from .single_csharp_snippet_create import SingleCsharpSnippetCreate
from .single_go_snippet_create import SingleGoSnippetCreate
from .single_java_snippet_create import SingleJavaSnippetCreate
from .single_python_snippet_create import SinglePythonSnippetCreate
from .single_ruby_snippet_create import SingleRubySnippetCreate
from .single_typescript_snippet_create import SingleTypescriptSnippetCreate


class SdkSnippetsCreate_Typescript(UniversalBaseModel):
    type: typing.Literal["typescript"] = "typescript"
    sdk: TypeScriptSdk
    snippets: typing.List[SingleTypescriptSnippetCreate]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SdkSnippetsCreate_Python(UniversalBaseModel):
    type: typing.Literal["python"] = "python"
    sdk: PythonSdk
    snippets: typing.List[SinglePythonSnippetCreate]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SdkSnippetsCreate_Go(UniversalBaseModel):
    type: typing.Literal["go"] = "go"
    sdk: GoSdk
    snippets: typing.List[SingleGoSnippetCreate]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SdkSnippetsCreate_Java(UniversalBaseModel):
    type: typing.Literal["java"] = "java"
    sdk: JavaSdk
    snippets: typing.List[SingleJavaSnippetCreate]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SdkSnippetsCreate_Ruby(UniversalBaseModel):
    type: typing.Literal["ruby"] = "ruby"
    sdk: RubySdk
    snippets: typing.List[SingleRubySnippetCreate]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SdkSnippetsCreate_Csharp(UniversalBaseModel):
    type: typing.Literal["csharp"] = "csharp"
    sdk: CsharpSdk
    snippets: typing.List[SingleCsharpSnippetCreate]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


SdkSnippetsCreate = typing.Union[
    SdkSnippetsCreate_Typescript,
    SdkSnippetsCreate_Python,
    SdkSnippetsCreate_Go,
    SdkSnippetsCreate_Java,
    SdkSnippetsCreate_Ruby,
    SdkSnippetsCreate_Csharp,
]
