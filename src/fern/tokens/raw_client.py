# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.types.org_id import OrgId
from ..commons.types.token_id import TokenId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.generate_token_response import GenerateTokenResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate(
        self, *, org_id: OrgId, scope: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GenerateTokenResponse]:
        """
        Generate a token

        Parameters
        ----------
        org_id : OrgId
            The organization to generate a token for.

        scope : str
            The scope of the token. Valid scopes include:
              - admin
              - sdk:read:{package_name}

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GenerateTokenResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "tokens/generate",
            method="POST",
            json={
                "orgId": org_id,
                "scope": scope,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GenerateTokenResponse,
                parse_obj_as(
                    type_=GenerateTokenResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def revoke(
        self, *, org_id: OrgId, token_id: TokenId, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Revoke a token

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        token_id : TokenId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "tokens/revoke",
            method="POST",
            json={
                "orgId": org_id,
                "tokenId": token_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate(
        self, *, org_id: OrgId, scope: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GenerateTokenResponse]:
        """
        Generate a token

        Parameters
        ----------
        org_id : OrgId
            The organization to generate a token for.

        scope : str
            The scope of the token. Valid scopes include:
              - admin
              - sdk:read:{package_name}

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GenerateTokenResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "tokens/generate",
            method="POST",
            json={
                "orgId": org_id,
                "scope": scope,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                GenerateTokenResponse,
                parse_obj_as(
                    type_=GenerateTokenResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def revoke(
        self, *, org_id: OrgId, token_id: TokenId, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Revoke a token

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        token_id : TokenId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "tokens/revoke",
            method="POST",
            json={
                "orgId": org_id,
                "tokenId": token_id,
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
