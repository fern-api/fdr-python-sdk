# This file was auto-generated by Fern from our API Definition.

import typing

from ..commons.types.org_id import OrgId
from ..commons.types.token_id import TokenId
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawTokensClient, RawTokensClient
from .types.generate_token_response import GenerateTokenResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTokensClient
        """
        return self._raw_client

    def generate(
        self, *, org_id: OrgId, scope: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GenerateTokenResponse:
        """
        Generate a token

        Parameters
        ----------
        org_id : OrgId
            The organization to generate a token for.

        scope : str
            The scope of the token. Valid scopes include:
              - admin
              - sdk:read:{package_name}

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTokenResponse

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.tokens.generate(
            org_id="orgId",
            scope="scope",
        )
        """
        _response = self._raw_client.generate(org_id=org_id, scope=scope, request_options=request_options)
        return _response.data

    def revoke(
        self, *, org_id: OrgId, token_id: TokenId, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Revoke a token

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        token_id : TokenId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.tokens.revoke(
            org_id="orgId",
            token_id="tokenId",
        )
        """
        _response = self._raw_client.revoke(org_id=org_id, token_id=token_id, request_options=request_options)
        return _response.data


class AsyncTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTokensClient
        """
        return self._raw_client

    async def generate(
        self, *, org_id: OrgId, scope: str, request_options: typing.Optional[RequestOptions] = None
    ) -> GenerateTokenResponse:
        """
        Generate a token

        Parameters
        ----------
        org_id : OrgId
            The organization to generate a token for.

        scope : str
            The scope of the token. Valid scopes include:
              - admin
              - sdk:read:{package_name}

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GenerateTokenResponse

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.tokens.generate(
                org_id="orgId",
                scope="scope",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate(org_id=org_id, scope=scope, request_options=request_options)
        return _response.data

    async def revoke(
        self, *, org_id: OrgId, token_id: TokenId, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Revoke a token

        Parameters
        ----------
        org_id : OrgId
            The organization to create snippets for.

        token_id : TokenId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.tokens.revoke(
                org_id="orgId",
                token_id="tokenId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.revoke(org_id=org_id, token_id=token_id, request_options=request_options)
        return _response.data
