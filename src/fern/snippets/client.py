# This file was auto-generated by Fern from our API Definition.

import typing

from ..commons.types.api_id import ApiId
from ..commons.types.endpoint_identifier import EndpointIdentifier
from ..commons.types.org_id import OrgId
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawSnippetsClient, RawSnippetsClient
from .types.custom_snippet_payload import CustomSnippetPayload
from .types.sdk_request import SdkRequest
from .types.snippet import Snippet
from .types.snippets_page import SnippetsPage

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SnippetsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSnippetsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSnippetsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSnippetsClient
        """
        return self._raw_client

    def get(
        self,
        *,
        endpoint: EndpointIdentifier,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        example_identifier: typing.Optional[str] = OMIT,
        payload: typing.Optional[CustomSnippetPayload] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Snippet]:
        """
        Get snippet by endpoint method and path

        Parameters
        ----------
        endpoint : EndpointIdentifier

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        example_identifier : typing.Optional[str]
            The identifier of the example to fetch the snippet for, this is ignored if a payload is passed in.

        payload : typing.Optional[CustomSnippetPayload]
            The JSON payload to be used as the input for the code snippet. This should just be thought of as the
            request body you'd be sending to the endpoint as a cURL. If not specified then the default payload will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Snippet]

        Examples
        --------
        from fern.commons import EndpointIdentifier

        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.snippets.get(
            endpoint=EndpointIdentifier(
                method="GET",
                path="/v1/search",
            ),
        )
        """
        _response = self._raw_client.get(
            endpoint=endpoint,
            org_id=org_id,
            api_id=api_id,
            sdks=sdks,
            example_identifier=example_identifier,
            payload=payload,
            request_options=request_options,
        )
        return _response.data

    def load(
        self,
        *,
        page: typing.Optional[int] = None,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnippetsPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnippetsPage

        Examples
        --------
        from fern.snippets import SdkRequest_Python

        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.snippets.load(
            page=1,
            org_id="vellum",
            api_id="vellum-ai",
            sdks=[
                SdkRequest_Python(
                    package="vellum-ai",
                )
            ],
        )
        """
        _response = self._raw_client.load(
            page=page, org_id=org_id, api_id=api_id, sdks=sdks, request_options=request_options
        )
        return _response.data


class AsyncSnippetsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSnippetsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSnippetsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSnippetsClient
        """
        return self._raw_client

    async def get(
        self,
        *,
        endpoint: EndpointIdentifier,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        example_identifier: typing.Optional[str] = OMIT,
        payload: typing.Optional[CustomSnippetPayload] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Snippet]:
        """
        Get snippet by endpoint method and path

        Parameters
        ----------
        endpoint : EndpointIdentifier

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        example_identifier : typing.Optional[str]
            The identifier of the example to fetch the snippet for, this is ignored if a payload is passed in.

        payload : typing.Optional[CustomSnippetPayload]
            The JSON payload to be used as the input for the code snippet. This should just be thought of as the
            request body you'd be sending to the endpoint as a cURL. If not specified then the default payload will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Snippet]

        Examples
        --------
        import asyncio

        from fern.commons import EndpointIdentifier

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snippets.get(
                endpoint=EndpointIdentifier(
                    method="GET",
                    path="/v1/search",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            endpoint=endpoint,
            org_id=org_id,
            api_id=api_id,
            sdks=sdks,
            example_identifier=example_identifier,
            payload=payload,
            request_options=request_options,
        )
        return _response.data

    async def load(
        self,
        *,
        page: typing.Optional[int] = None,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SnippetsPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SnippetsPage

        Examples
        --------
        import asyncio

        from fern.snippets import SdkRequest_Python

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.snippets.load(
                page=1,
                org_id="vellum",
                api_id="vellum-ai",
                sdks=[
                    SdkRequest_Python(
                        package="vellum-ai",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.load(
            page=page, org_id=org_id, api_id=api_id, sdks=sdks, request_options=request_options
        )
        return _response.data
