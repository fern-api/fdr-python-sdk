# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .basic_auth_payload import BasicAuthPayload
from .bearer_token_auth_payload import BearerTokenAuthPayload

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def bearer(self, value: BearerTokenAuthPayload) -> AuthPayload:
        if IS_PYDANTIC_V2:
            return AuthPayload(root=_AuthPayload.Bearer(**value.dict(exclude_unset=True), type="bearer"))  # type: ignore
        else:
            return AuthPayload(__root__=_AuthPayload.Bearer(**value.dict(exclude_unset=True), type="bearer"))  # type: ignore

    def basic(self, value: BasicAuthPayload) -> AuthPayload:
        if IS_PYDANTIC_V2:
            return AuthPayload(root=_AuthPayload.Basic(**value.dict(exclude_unset=True), type="basic"))  # type: ignore
        else:
            return AuthPayload(__root__=_AuthPayload.Basic(**value.dict(exclude_unset=True), type="basic"))  # type: ignore


class AuthPayload(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_AuthPayload.Bearer, _AuthPayload.Basic], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_AuthPayload.Bearer, _AuthPayload.Basic]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_AuthPayload.Bearer, _AuthPayload.Basic], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_AuthPayload.Bearer, _AuthPayload.Basic]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        bearer: typing.Callable[[BearerTokenAuthPayload], T_Result],
        basic: typing.Callable[[BasicAuthPayload], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "bearer":
            return bearer(BearerTokenAuthPayload(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "basic":
            return basic(BasicAuthPayload(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _AuthPayload:
    class Bearer(BearerTokenAuthPayload):
        type: typing.Literal["bearer"] = "bearer"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Basic(BasicAuthPayload):
        type: typing.Literal["basic"] = "basic"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(AuthPayload)
