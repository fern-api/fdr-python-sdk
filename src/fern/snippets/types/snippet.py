# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .csharp_sdk import CsharpSdk
from .go_sdk import GoSdk
from .java_sdk import JavaSdk
from .python_sdk import PythonSdk
from .ruby_sdk import RubySdk
from .type_script_sdk import TypeScriptSdk


class Base(UniversalBaseModel):
    example_identifier: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="exampleIdentifier")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Snippet_Typescript(Base):
    type: typing.Literal["typescript"] = "typescript"
    sdk: TypeScriptSdk
    client: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Snippet_Python(Base):
    type: typing.Literal["python"] = "python"
    sdk: PythonSdk
    async_client: str
    sync_client: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Snippet_Java(Base):
    type: typing.Literal["java"] = "java"
    sdk: JavaSdk
    async_client: str
    sync_client: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Snippet_Go(Base):
    type: typing.Literal["go"] = "go"
    sdk: GoSdk
    client: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Snippet_Ruby(Base):
    type: typing.Literal["ruby"] = "ruby"
    sdk: RubySdk
    client: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Snippet_Csharp(Base):
    type: typing.Literal["csharp"] = "csharp"
    sdk: CsharpSdk
    client: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Snippet = typing.Union[Snippet_Typescript, Snippet_Python, Snippet_Java, Snippet_Go, Snippet_Ruby, Snippet_Csharp]
