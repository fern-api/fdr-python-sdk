# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.errors.unauthorized_error import UnauthorizedError
from ..commons.errors.unavailable_error import UnavailableError
from ..commons.errors.user_not_in_org_error import UserNotInOrgError
from ..commons.types.api_id import ApiId
from ..commons.types.endpoint_identifier import EndpointIdentifier
from ..commons.types.org_id import OrgId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from .errors.api_id_required_error import ApiIdRequiredError
from .errors.endpoint_not_found import EndpointNotFound
from .errors.invalid_page_error import InvalidPageError
from .errors.org_id_and_api_id_not_found import OrgIdAndApiIdNotFound
from .errors.org_id_not_found import OrgIdNotFound
from .errors.org_id_required_error import OrgIdRequiredError
from .errors.sdk_not_found import SdkNotFound
from .types.custom_snippet_payload import CustomSnippetPayload
from .types.sdk_request import SdkRequest
from .types.snippet import Snippet
from .types.snippets_page import SnippetsPage

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawSnippetsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self,
        *,
        endpoint: EndpointIdentifier,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        example_identifier: typing.Optional[str] = OMIT,
        payload: typing.Optional[CustomSnippetPayload] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Snippet]]:
        """
        Get snippet by endpoint method and path

        Parameters
        ----------
        endpoint : EndpointIdentifier

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        example_identifier : typing.Optional[str]
            The identifier of the example to fetch the snippet for, this is ignored if a payload is passed in.

        payload : typing.Optional[CustomSnippetPayload]
            The JSON payload to be used as the input for the code snippet. This should just be thought of as the
            request body you'd be sending to the endpoint as a cURL. If not specified then the default payload will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Snippet]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "snippets",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "sdks": convert_and_respect_annotation_metadata(
                    object_=sdks, annotation=typing.Sequence[SdkRequest], direction="write"
                ),
                "endpoint": convert_and_respect_annotation_metadata(
                    object_=endpoint, annotation=EndpointIdentifier, direction="write"
                ),
                "exampleIdentifier": example_identifier,
                "payload": convert_and_respect_annotation_metadata(
                    object_=payload, annotation=CustomSnippetPayload, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.List[Snippet],
                parse_obj_as(
                    type_=typing.List[Snippet],  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "ApiIdRequiredError":
                raise ApiIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdRequiredError":
                raise OrgIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdAndApiIdNotFound":
                raise OrgIdAndApiIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "EndpointNotFound":
                raise EndpointNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def load(
        self,
        *,
        page: typing.Optional[int] = None,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SnippetsPage]:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SnippetsPage]
        """
        _response = self._client_wrapper.httpx_client.request(
            "snippets/load",
            method="POST",
            params={
                "page": page,
            },
            json={
                "orgId": org_id,
                "apiId": api_id,
                "sdks": convert_and_respect_annotation_metadata(
                    object_=sdks, annotation=typing.Sequence[SdkRequest], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                SnippetsPage,
                parse_obj_as(
                    type_=SnippetsPage,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidPageError":
                raise InvalidPageError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "ApiIdRequiredError":
                raise ApiIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdRequiredError":
                raise OrgIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdAndApiIdNotFound":
                raise OrgIdAndApiIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSnippetsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self,
        *,
        endpoint: EndpointIdentifier,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        example_identifier: typing.Optional[str] = OMIT,
        payload: typing.Optional[CustomSnippetPayload] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Snippet]]:
        """
        Get snippet by endpoint method and path

        Parameters
        ----------
        endpoint : EndpointIdentifier

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        example_identifier : typing.Optional[str]
            The identifier of the example to fetch the snippet for, this is ignored if a payload is passed in.

        payload : typing.Optional[CustomSnippetPayload]
            The JSON payload to be used as the input for the code snippet. This should just be thought of as the
            request body you'd be sending to the endpoint as a cURL. If not specified then the default payload will be used.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Snippet]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snippets",
            method="POST",
            json={
                "orgId": org_id,
                "apiId": api_id,
                "sdks": convert_and_respect_annotation_metadata(
                    object_=sdks, annotation=typing.Sequence[SdkRequest], direction="write"
                ),
                "endpoint": convert_and_respect_annotation_metadata(
                    object_=endpoint, annotation=EndpointIdentifier, direction="write"
                ),
                "exampleIdentifier": example_identifier,
                "payload": convert_and_respect_annotation_metadata(
                    object_=payload, annotation=CustomSnippetPayload, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.List[Snippet],
                parse_obj_as(
                    type_=typing.List[Snippet],  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "ApiIdRequiredError":
                raise ApiIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdRequiredError":
                raise OrgIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdAndApiIdNotFound":
                raise OrgIdAndApiIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "EndpointNotFound":
                raise EndpointNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def load(
        self,
        *,
        page: typing.Optional[int] = None,
        org_id: typing.Optional[OrgId] = OMIT,
        api_id: typing.Optional[ApiId] = OMIT,
        sdks: typing.Optional[typing.Sequence[SdkRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SnippetsPage]:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        org_id : typing.Optional[OrgId]
            If the same API is defined across multiple organization,
            you must specify an organization ID.

        api_id : typing.Optional[ApiId]
            If you have more than one API, you must specify its ID.

        sdks : typing.Optional[typing.Sequence[SdkRequest]]
            The SDKs for which to load snippets. If unspecified,
            snippets for the latest published SDKs will be returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SnippetsPage]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "snippets/load",
            method="POST",
            params={
                "page": page,
            },
            json={
                "orgId": org_id,
                "apiId": api_id,
                "sdks": convert_and_respect_annotation_metadata(
                    object_=sdks, annotation=typing.Sequence[SdkRequest], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                SnippetsPage,
                parse_obj_as(
                    type_=SnippetsPage,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "error" in _response_json:
            if _response_json["error"] == "UnauthorizedError":
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UserNotInOrgError":
                raise UserNotInOrgError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "UnavailableError":
                raise UnavailableError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "InvalidPageError":
                raise InvalidPageError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "ApiIdRequiredError":
                raise ApiIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdRequiredError":
                raise OrgIdRequiredError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdAndApiIdNotFound":
                raise OrgIdAndApiIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "OrgIdNotFound":
                raise OrgIdNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["error"] == "SDKNotFound":
                raise SdkNotFound(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        str,
                        parse_obj_as(
                            type_=str,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
