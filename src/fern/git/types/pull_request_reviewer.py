# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .github_team import GithubTeam
from .github_user import GithubUser

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def user(self, value: GithubUser) -> PullRequestReviewer:
        if IS_PYDANTIC_V2:
            return PullRequestReviewer(root=_PullRequestReviewer.User(**value.dict(exclude_unset=True), type="user"))  # type: ignore
        else:
            return PullRequestReviewer(
                __root__=_PullRequestReviewer.User(**value.dict(exclude_unset=True), type="user")
            )  # type: ignore

    def team(self, value: GithubTeam) -> PullRequestReviewer:
        if IS_PYDANTIC_V2:
            return PullRequestReviewer(root=_PullRequestReviewer.Team(**value.dict(exclude_unset=True), type="team"))  # type: ignore
        else:
            return PullRequestReviewer(
                __root__=_PullRequestReviewer.Team(**value.dict(exclude_unset=True), type="team")
            )  # type: ignore


class PullRequestReviewer(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_PullRequestReviewer.User, _PullRequestReviewer.Team], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_PullRequestReviewer.User, _PullRequestReviewer.Team]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_PullRequestReviewer.User, _PullRequestReviewer.Team], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_PullRequestReviewer.User, _PullRequestReviewer.Team]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self, user: typing.Callable[[GithubUser], T_Result], team: typing.Callable[[GithubTeam], T_Result]
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "user":
            return user(GithubUser(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "team":
            return team(GithubTeam(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _PullRequestReviewer:
    class User(GithubUser):
        type: typing.Literal["user"] = "user"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Team(GithubTeam):
        type: typing.Literal["team"] = "team"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(PullRequestReviewer)
