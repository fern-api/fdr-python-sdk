# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ....core.serialization import FieldMetadata
from ...types.generator_id import GeneratorId


class BaseGeneratorRelease(UniversalBaseModel):
    generator_id: typing_extensions.Annotated[GeneratorId, FieldMetadata(alias="generatorId")]
    ir_version: typing_extensions.Annotated[int, FieldMetadata(alias="irVersion")] = pydantic.Field()
    """
    The major version of the IR that this generator version consumes.
    """

    migration: typing.Optional[str] = pydantic.Field(default=None)
    """
    The TypeScript file for the migration to run when upgrading to this version. Ideally this would be typed as a file, but we don't support file upload in the express generator.
    """

    custom_config_schema: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="customConfigSchema")
    ] = pydantic.Field(default=None)
    """
    The JSON schema (stringified) for the custom config that this generator version supports.
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Tags to categorize the Generator release.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
