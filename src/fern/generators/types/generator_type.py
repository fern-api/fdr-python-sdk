# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .model_generator import ModelGenerator
from .other_generator import OtherGenerator
from .sdk_generator import SdkGenerator
from .server_generator import ServerGenerator

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def sdk(self, value: SdkGenerator) -> GeneratorType:
        if IS_PYDANTIC_V2:
            return GeneratorType(root=_GeneratorType.Sdk(**value.dict(exclude_unset=True), type="sdk"))  # type: ignore
        else:
            return GeneratorType(__root__=_GeneratorType.Sdk(**value.dict(exclude_unset=True), type="sdk"))  # type: ignore

    def model(self, value: ModelGenerator) -> GeneratorType:
        if IS_PYDANTIC_V2:
            return GeneratorType(root=_GeneratorType.Model(**value.dict(exclude_unset=True), type="model"))  # type: ignore
        else:
            return GeneratorType(__root__=_GeneratorType.Model(**value.dict(exclude_unset=True), type="model"))  # type: ignore

    def server(self, value: ServerGenerator) -> GeneratorType:
        if IS_PYDANTIC_V2:
            return GeneratorType(root=_GeneratorType.Server(**value.dict(exclude_unset=True), type="server"))  # type: ignore
        else:
            return GeneratorType(__root__=_GeneratorType.Server(**value.dict(exclude_unset=True), type="server"))  # type: ignore

    def other(self, value: OtherGenerator) -> GeneratorType:
        if IS_PYDANTIC_V2:
            return GeneratorType(root=_GeneratorType.Other(**value.dict(exclude_unset=True), type="other"))  # type: ignore
        else:
            return GeneratorType(__root__=_GeneratorType.Other(**value.dict(exclude_unset=True), type="other"))  # type: ignore


class GeneratorType(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_GeneratorType.Sdk, _GeneratorType.Model, _GeneratorType.Server, _GeneratorType.Other],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_GeneratorType.Sdk, _GeneratorType.Model, _GeneratorType.Server, _GeneratorType.Other]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_GeneratorType.Sdk, _GeneratorType.Model, _GeneratorType.Server, _GeneratorType.Other],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_GeneratorType.Sdk, _GeneratorType.Model, _GeneratorType.Server, _GeneratorType.Other]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        sdk: typing.Callable[[SdkGenerator], T_Result],
        model: typing.Callable[[ModelGenerator], T_Result],
        server: typing.Callable[[ServerGenerator], T_Result],
        other: typing.Callable[[OtherGenerator], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "sdk":
            return sdk(SdkGenerator(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "model":
            return model(ModelGenerator(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "server":
            return server(ServerGenerator(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "other":
            return other(OtherGenerator(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _GeneratorType:
    class Sdk(SdkGenerator):
        type: typing.Literal["sdk"] = "sdk"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Model(ModelGenerator):
        type: typing.Literal["model"] = "model"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Server(ServerGenerator):
        type: typing.Literal["server"] = "server"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Other(OtherGenerator):
        type: typing.Literal["other"] = "other"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(GeneratorType)
