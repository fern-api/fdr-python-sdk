# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .enum_type import EnumType

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def alias(self, value: TypeReference) -> TypeShape:
        if IS_PYDANTIC_V2:
            return TypeShape(root=_TypeShape.Alias(type="alias", value=value))  # type: ignore
        else:
            return TypeShape(__root__=_TypeShape.Alias(type="alias", value=value))  # type: ignore

    def enum(self, value: EnumType) -> TypeShape:
        if IS_PYDANTIC_V2:
            return TypeShape(root=_TypeShape.Enum(**value.dict(exclude_unset=True), type="enum"))  # type: ignore
        else:
            return TypeShape(__root__=_TypeShape.Enum(**value.dict(exclude_unset=True), type="enum"))  # type: ignore

    def undiscriminated_union(self, value: UndiscriminatedUnionType) -> TypeShape:
        if IS_PYDANTIC_V2:
            return TypeShape(
                root=_TypeShape.UndiscriminatedUnion(**value.dict(exclude_unset=True), type="undiscriminatedUnion")
            )  # type: ignore
        else:
            return TypeShape(
                __root__=_TypeShape.UndiscriminatedUnion(**value.dict(exclude_unset=True), type="undiscriminatedUnion")
            )  # type: ignore

    def discriminated_union(self, value: DiscriminatedUnionType) -> TypeShape:
        if IS_PYDANTIC_V2:
            return TypeShape(
                root=_TypeShape.DiscriminatedUnion(**value.dict(exclude_unset=True), type="discriminatedUnion")
            )  # type: ignore
        else:
            return TypeShape(
                __root__=_TypeShape.DiscriminatedUnion(**value.dict(exclude_unset=True), type="discriminatedUnion")
            )  # type: ignore

    def object(self, value: ObjectType) -> TypeShape:
        if IS_PYDANTIC_V2:
            return TypeShape(root=_TypeShape.Object(**value.dict(exclude_unset=True), type="object"))  # type: ignore
        else:
            return TypeShape(__root__=_TypeShape.Object(**value.dict(exclude_unset=True), type="object"))  # type: ignore


class TypeShape(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _TypeShape.Alias,
                _TypeShape.Enum,
                _TypeShape.UndiscriminatedUnion,
                _TypeShape.DiscriminatedUnion,
                _TypeShape.Object,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _TypeShape.Alias,
            _TypeShape.Enum,
            _TypeShape.UndiscriminatedUnion,
            _TypeShape.DiscriminatedUnion,
            _TypeShape.Object,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _TypeShape.Alias,
                _TypeShape.Enum,
                _TypeShape.UndiscriminatedUnion,
                _TypeShape.DiscriminatedUnion,
                _TypeShape.Object,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _TypeShape.Alias,
            _TypeShape.Enum,
            _TypeShape.UndiscriminatedUnion,
            _TypeShape.DiscriminatedUnion,
            _TypeShape.Object,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        alias: typing.Callable[["TypeReference"], T_Result],
        enum: typing.Callable[[EnumType], T_Result],
        undiscriminated_union: typing.Callable[["UndiscriminatedUnionType"], T_Result],
        discriminated_union: typing.Callable[["DiscriminatedUnionType"], T_Result],
        object: typing.Callable[["ObjectType"], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "alias":
            return alias(unioned_value.value)
        if unioned_value.type == "enum":
            return enum(EnumType(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "undiscriminatedUnion":
            return undiscriminated_union(
                UndiscriminatedUnionType(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "discriminatedUnion":
            return discriminated_union(
                DiscriminatedUnionType(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "object":
            return object(ObjectType(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


from .type_reference import TypeReference  # noqa: E402, F401, I001
from .undiscriminated_union_type import UndiscriminatedUnionType  # noqa: E402, F401, I001
from .discriminated_union_type import DiscriminatedUnionType  # noqa: E402, F401, I001
from .object_type import ObjectType  # noqa: E402, F401, I001
from .discriminated_union_variant import DiscriminatedUnionVariant  # noqa: E402, F401, I001
from .list_type import ListType  # noqa: E402, F401, I001
from .map_type import MapType  # noqa: E402, F401, I001
from .nullable_type import NullableType  # noqa: E402, F401, I001
from .object_property import ObjectProperty  # noqa: E402, F401, I001
from .optional_type import OptionalType  # noqa: E402, F401, I001
from .set_type import SetType  # noqa: E402, F401, I001
from .undiscriminated_union_variant import UndiscriminatedUnionVariant  # noqa: E402, F401, I001


class _TypeShape:
    class Alias(UniversalBaseModel):
        type: typing.Literal["alias"] = "alias"
        value: TypeReference

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Enum(EnumType):
        type: typing.Literal["enum"] = "enum"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class UndiscriminatedUnion(UndiscriminatedUnionType):
        type: typing.Literal["undiscriminatedUnion"] = "undiscriminatedUnion"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class DiscriminatedUnion(DiscriminatedUnionType):
        type: typing.Literal["discriminatedUnion"] = "discriminatedUnion"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Object(ObjectType):
        type: typing.Literal["object"] = "object"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(_TypeShape.Alias)
update_forward_refs(_TypeShape.UndiscriminatedUnion)
update_forward_refs(_TypeShape.DiscriminatedUnion)
update_forward_refs(_TypeShape.Object)
update_forward_refs(TypeShape)
