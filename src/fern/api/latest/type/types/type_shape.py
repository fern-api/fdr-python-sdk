# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.property_key import PropertyKey
from .....commons.types.type_id import TypeId
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from .....core.serialization import FieldMetadata
from .enum_value import EnumValue


class TypeShape_Alias(UniversalBaseModel):
    value: "TypeReference"
    type: typing.Literal["alias"] = "alias"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class TypeShape_Enum(UniversalBaseModel):
    type: typing.Literal["enum"] = "enum"
    default: typing.Optional[str] = None
    values: typing.List[EnumValue]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeShape_UndiscriminatedUnion(UniversalBaseModel):
    type: typing.Literal["undiscriminatedUnion"] = "undiscriminatedUnion"
    variants: typing.List["UndiscriminatedUnionVariant"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeShape_DiscriminatedUnion(UniversalBaseModel):
    type: typing.Literal["discriminatedUnion"] = "discriminatedUnion"
    discriminant: PropertyKey
    variants: typing.List["DiscriminatedUnionVariant"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeShape_Object(UniversalBaseModel):
    type: typing.Literal["object"] = "object"
    extends: typing.List[TypeId]
    properties: typing.List["ObjectProperty"]
    extra_properties: typing_extensions.Annotated[
        typing.Optional["TypeReference"], FieldMetadata(alias="extraProperties")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .discriminated_union_type import DiscriminatedUnionType  # noqa: E402, F401, I001
from .list_type import ListType  # noqa: E402, F401, I001
from .map_type import MapType  # noqa: E402, F401, I001
from .nullable_type import NullableType  # noqa: E402, F401, I001
from .object_type import ObjectType  # noqa: E402, F401, I001
from .optional_type import OptionalType  # noqa: E402, F401, I001
from .set_type import SetType  # noqa: E402, F401, I001
from .undiscriminated_union_type import UndiscriminatedUnionType  # noqa: E402, F401, I001

TypeShape = typing.Union[
    TypeShape_Alias, TypeShape_Enum, TypeShape_UndiscriminatedUnion, TypeShape_DiscriminatedUnion, TypeShape_Object
]
from .type_reference import TypeReference  # noqa: E402, F401, I001
from .discriminated_union_variant import DiscriminatedUnionVariant  # noqa: E402, F401, I001
from .object_property import ObjectProperty  # noqa: E402, F401, I001
from .undiscriminated_union_variant import UndiscriminatedUnionVariant  # noqa: E402, F401, I001

update_forward_refs(TypeShape_Alias)
update_forward_refs(TypeShape_UndiscriminatedUnion)
update_forward_refs(TypeShape_DiscriminatedUnion)
update_forward_refs(TypeShape_Object)
