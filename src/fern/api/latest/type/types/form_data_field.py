# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.availability import Availability
from .....commons.types.property_key import PropertyKey
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from .....core.serialization import FieldMetadata
from .content_type import ContentType
from .object_property_access import ObjectPropertyAccess


class FormDataField_File(UniversalBaseModel):
    type: typing.Literal["file"] = "file"
    key: PropertyKey
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    content_type: typing_extensions.Annotated[typing.Optional[ContentType], FieldMetadata(alias="contentType")] = None
    description: typing.Optional[str] = None
    availability: typing.Optional[Availability] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FormDataField_Files(UniversalBaseModel):
    type: typing.Literal["files"] = "files"
    key: PropertyKey
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    content_type: typing_extensions.Annotated[typing.Optional[ContentType], FieldMetadata(alias="contentType")] = None
    description: typing.Optional[str] = None
    availability: typing.Optional[Availability] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FormDataField_Property(UniversalBaseModel):
    type: typing.Literal["property"] = "property"
    content_type: typing_extensions.Annotated[typing.Optional[ContentType], FieldMetadata(alias="contentType")] = None
    exploded: typing.Optional[bool] = None
    key: PropertyKey
    value_shape: typing_extensions.Annotated["TypeShape", FieldMetadata(alias="valueShape")]
    property_access: typing_extensions.Annotated[
        typing.Optional[ObjectPropertyAccess], FieldMetadata(alias="propertyAccess")
    ] = None
    description: typing.Optional[str] = None
    availability: typing.Optional[Availability] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .discriminated_union_type import DiscriminatedUnionType  # noqa: E402, F401, I001
from .discriminated_union_variant import DiscriminatedUnionVariant  # noqa: E402, F401, I001
from .list_type import ListType  # noqa: E402, F401, I001
from .map_type import MapType  # noqa: E402, F401, I001
from .nullable_type import NullableType  # noqa: E402, F401, I001
from .object_property import ObjectProperty  # noqa: E402, F401, I001
from .object_type import ObjectType  # noqa: E402, F401, I001
from .optional_type import OptionalType  # noqa: E402, F401, I001
from .set_type import SetType  # noqa: E402, F401, I001
from .undiscriminated_union_type import UndiscriminatedUnionType  # noqa: E402, F401, I001
from .undiscriminated_union_variant import UndiscriminatedUnionVariant  # noqa: E402, F401, I001
from .type_shape import TypeShape  # noqa: E402, F401, I001

FormDataField = typing.Union[FormDataField_File, FormDataField_Files, FormDataField_Property]
update_forward_refs(FormDataField_Property)
