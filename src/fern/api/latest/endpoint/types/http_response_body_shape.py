# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.type_id import TypeId
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from .....core.serialization import FieldMetadata


class HttpResponseBodyShape_Empty(UniversalBaseModel):
    type: typing.Literal["empty"] = "empty"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HttpResponseBodyShape_Object(UniversalBaseModel):
    type: typing.Literal["object"] = "object"
    extends: typing.List[TypeId]
    properties: typing.List["ObjectProperty"]
    extra_properties: typing_extensions.Annotated[
        typing.Optional["TypeReference"], FieldMetadata(alias="extraProperties")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...type.types.type_reference import TypeReference  # noqa: E402, F401, I001


class HttpResponseBodyShape_Alias(UniversalBaseModel):
    value: TypeReference
    type: typing.Literal["alias"] = "alias"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class HttpResponseBodyShape_FileDownload(UniversalBaseModel):
    type: typing.Literal["fileDownload"] = "fileDownload"
    content_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contentType")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HttpResponseBodyShape_StreamingText(UniversalBaseModel):
    type: typing.Literal["streamingText"] = "streamingText"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HttpResponseBodyShape_Stream(UniversalBaseModel):
    type: typing.Literal["stream"] = "stream"
    terminator: typing.Optional[str] = None
    shape: "TypeShape"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...type.types.discriminated_union_type import DiscriminatedUnionType  # noqa: E402, F401, I001
from ...type.types.discriminated_union_variant import DiscriminatedUnionVariant  # noqa: E402, F401, I001
from ...type.types.list_type import ListType  # noqa: E402, F401, I001
from ...type.types.map_type import MapType  # noqa: E402, F401, I001
from ...type.types.nullable_type import NullableType  # noqa: E402, F401, I001
from ...type.types.object_property import ObjectProperty  # noqa: E402, F401, I001
from ...type.types.object_type import ObjectType  # noqa: E402, F401, I001
from ...type.types.optional_type import OptionalType  # noqa: E402, F401, I001
from ...type.types.set_type import SetType  # noqa: E402, F401, I001
from ...type.types.undiscriminated_union_type import UndiscriminatedUnionType  # noqa: E402, F401, I001
from ...type.types.undiscriminated_union_variant import UndiscriminatedUnionVariant  # noqa: E402, F401, I001
from ...type.types.type_shape import TypeShape  # noqa: E402, F401, I001

HttpResponseBodyShape = typing.Union[
    HttpResponseBodyShape_Empty,
    HttpResponseBodyShape_Object,
    HttpResponseBodyShape_Alias,
    HttpResponseBodyShape_FileDownload,
    HttpResponseBodyShape_StreamingText,
    HttpResponseBodyShape_Stream,
]
update_forward_refs(HttpResponseBodyShape_Object)
update_forward_refs(HttpResponseBodyShape_Stream)
