# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from .....commons.types.property_key import PropertyKey
from .....core.pydantic_utilities import IS_PYDANTIC_V2
from .....core.serialization import FieldMetadata
from ...commons.types.with_description import WithDescription
from .code_snippet import CodeSnippet
from .example_endpoint_request import ExampleEndpointRequest
from .example_endpoint_response import ExampleEndpointResponse
from .language import Language


class ExampleEndpointCall(WithDescription):
    path: str
    response_status_code: typing_extensions.Annotated[int, FieldMetadata(alias="responseStatusCode")]
    name: typing.Optional[str] = None
    path_parameters: typing_extensions.Annotated[
        typing.Optional[typing.Dict[PropertyKey, typing.Optional[typing.Any]]], FieldMetadata(alias="pathParameters")
    ] = None
    query_parameters: typing_extensions.Annotated[
        typing.Optional[typing.Dict[PropertyKey, typing.Optional[typing.Any]]], FieldMetadata(alias="queryParameters")
    ] = None
    headers: typing.Optional[typing.Dict[PropertyKey, typing.Optional[typing.Any]]] = None
    request_body: typing_extensions.Annotated[
        typing.Optional[ExampleEndpointRequest], FieldMetadata(alias="requestBody")
    ] = None
    response_body: typing_extensions.Annotated[
        typing.Optional[ExampleEndpointResponse], FieldMetadata(alias="responseBody")
    ] = None
    snippets: typing.Optional[typing.Dict[Language, typing.List[CodeSnippet]]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
