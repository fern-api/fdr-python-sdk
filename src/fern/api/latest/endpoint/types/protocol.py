# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .grpc_protocol import GrpcProtocol
from .open_rpc_protocol import OpenRpcProtocol
from .rest_protocol import RestProtocol

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def rest(self, value: RestProtocol) -> Protocol:
        if IS_PYDANTIC_V2:
            return Protocol(root=_Protocol.Rest(**value.dict(exclude_unset=True), type="rest"))  # type: ignore
        else:
            return Protocol(__root__=_Protocol.Rest(**value.dict(exclude_unset=True), type="rest"))  # type: ignore

    def openrpc(self, value: OpenRpcProtocol) -> Protocol:
        if IS_PYDANTIC_V2:
            return Protocol(root=_Protocol.Openrpc(**value.dict(exclude_unset=True), type="openrpc"))  # type: ignore
        else:
            return Protocol(__root__=_Protocol.Openrpc(**value.dict(exclude_unset=True), type="openrpc"))  # type: ignore

    def grpc(self, value: GrpcProtocol) -> Protocol:
        if IS_PYDANTIC_V2:
            return Protocol(root=_Protocol.Grpc(**value.dict(exclude_unset=True), type="grpc"))  # type: ignore
        else:
            return Protocol(__root__=_Protocol.Grpc(**value.dict(exclude_unset=True), type="grpc"))  # type: ignore


class Protocol(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Protocol.Rest, _Protocol.Openrpc, _Protocol.Grpc], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Protocol.Rest, _Protocol.Openrpc, _Protocol.Grpc]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Protocol.Rest, _Protocol.Openrpc, _Protocol.Grpc], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Protocol.Rest, _Protocol.Openrpc, _Protocol.Grpc]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        rest: typing.Callable[[RestProtocol], T_Result],
        openrpc: typing.Callable[[OpenRpcProtocol], T_Result],
        grpc: typing.Callable[[GrpcProtocol], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "rest":
            return rest(RestProtocol(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "openrpc":
            return openrpc(OpenRpcProtocol(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "grpc":
            return grpc(GrpcProtocol(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _Protocol:
    class Rest(RestProtocol):
        type: typing.Literal["rest"] = "rest"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Openrpc(OpenRpcProtocol):
        type: typing.Literal["openrpc"] = "openrpc"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Grpc(GrpcProtocol):
        type: typing.Literal["grpc"] = "grpc"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(Protocol)
