# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.environment_id import EnvironmentId
from .....commons.types.web_socket_id import WebSocketId
from .....core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from .....core.serialization import FieldMetadata
from ...auth.types.auth_scheme_id import AuthSchemeId
from ...commons.types.environment import Environment
from ...commons.types.path_part import PathPart
from ...commons.types.with_availability import WithAvailability
from ...commons.types.with_description import WithDescription
from ...commons.types.with_namespace import WithNamespace
from .example_web_socket_session import ExampleWebSocketSession
from .web_socket_message import WebSocketMessage


class WebSocketChannel(WithDescription, WithAvailability, WithNamespace):
    id: WebSocketId
    display_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="displayName")] = None
    operation_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="operationId")] = None
    path: typing.List[PathPart]
    messages: typing.List[WebSocketMessage] = pydantic.Field()
    """
    The messages that can be sent and received on this channel
    """

    auth: typing.Optional[typing.List[AuthSchemeId]] = None
    default_environment: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="defaultEnvironment")
    ] = None
    environments: typing.Optional[typing.List[Environment]] = None
    path_parameters: typing_extensions.Annotated[
        typing.Optional[typing.List["ObjectProperty"]], FieldMetadata(alias="pathParameters")
    ] = None
    query_parameters: typing_extensions.Annotated[
        typing.Optional[typing.List["ObjectProperty"]], FieldMetadata(alias="queryParameters")
    ] = None
    request_headers: typing_extensions.Annotated[
        typing.Optional[typing.List["ObjectProperty"]], FieldMetadata(alias="requestHeaders")
    ] = None
    examples: typing.Optional[typing.List[ExampleWebSocketSession]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...type.types.object_property import ObjectProperty  # noqa: E402, F401, I001

update_forward_refs(WebSocketChannel)
