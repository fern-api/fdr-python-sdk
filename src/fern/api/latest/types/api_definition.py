# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....commons.types.api_definition_id import ApiDefinitionId
from ....commons.types.endpoint_id import EndpointId
from ....commons.types.type_id import TypeId
from ....commons.types.web_socket_id import WebSocketId
from ....commons.types.webhook_id import WebhookId
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ....core.serialization import FieldMetadata
from ...v_1.register.types.snippets_config import SnippetsConfig
from ..auth.types.auth_scheme import AuthScheme
from ..auth.types.auth_scheme_id import AuthSchemeId
from ..commons.types.subpackage_id import SubpackageId
from ..commons.types.subpackage_metadata import SubpackageMetadata
from ..endpoint.types.endpoint_definition import EndpointDefinition
from ..type.types.type_definition import TypeDefinition
from ..webhook.types.webhook_definition import WebhookDefinition
from ..websocket.types.web_socket_channel import WebSocketChannel


class ApiDefinition(UniversalBaseModel):
    id: ApiDefinitionId
    endpoints: typing.Dict[EndpointId, EndpointDefinition]
    websockets: typing.Dict[WebSocketId, WebSocketChannel]
    webhooks: typing.Dict[WebhookId, WebhookDefinition]
    types: typing.Dict[TypeId, TypeDefinition]
    subpackages: typing.Dict[SubpackageId, SubpackageMetadata]
    auths: typing.Dict[AuthSchemeId, AuthScheme]
    global_headers: typing_extensions.Annotated[
        typing.Optional[typing.List["ObjectProperty"]], FieldMetadata(alias="globalHeaders")
    ] = None
    snippets_configuration: typing_extensions.Annotated[
        typing.Optional[SnippetsConfig], FieldMetadata(alias="snippetsConfiguration")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ..type.types.discriminated_union_type import DiscriminatedUnionType  # noqa: E402, F401, I001
from ..type.types.discriminated_union_variant import DiscriminatedUnionVariant  # noqa: E402, F401, I001
from ..type.types.list_type import ListType  # noqa: E402, F401, I001
from ..type.types.map_type import MapType  # noqa: E402, F401, I001
from ..type.types.nullable_type import NullableType  # noqa: E402, F401, I001
from ..type.types.object_property import ObjectProperty  # noqa: E402, F401, I001
from ..type.types.object_type import ObjectType  # noqa: E402, F401, I001
from ..type.types.optional_type import OptionalType  # noqa: E402, F401, I001
from ..type.types.set_type import SetType  # noqa: E402, F401, I001
from ..type.types.undiscriminated_union_type import UndiscriminatedUnionType  # noqa: E402, F401, I001
from ..type.types.undiscriminated_union_variant import UndiscriminatedUnionVariant  # noqa: E402, F401, I001

update_forward_refs(ApiDefinition)
