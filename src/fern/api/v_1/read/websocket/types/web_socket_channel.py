# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ......commons.types.environment_id import EnvironmentId
from ......commons.types.web_socket_id import WebSocketId
from ......core.pydantic_utilities import IS_PYDANTIC_V2
from ......core.serialization import FieldMetadata
from ....commons.types.environment import Environment
from ....commons.types.with_availability import WithAvailability
from ....commons.types.with_description import WithDescription
from ...endpoint.types.endpoint_path import EndpointPath
from ...endpoint.types.header import Header
from ...endpoint.types.query_parameter import QueryParameter
from .example_web_socket_session import ExampleWebSocketSession
from .web_socket_message import WebSocketMessage


class WebSocketChannel(WithDescription, WithAvailability):
    url_slug: typing_extensions.Annotated[str, FieldMetadata(alias="urlSlug")]
    id: WebSocketId
    auth: bool
    name: typing.Optional[str] = None
    default_environment: typing_extensions.Annotated[
        typing.Optional[EnvironmentId], FieldMetadata(alias="defaultEnvironment")
    ] = None
    environments: typing.List[Environment]
    path: EndpointPath
    headers: typing.List[Header]
    query_parameters: typing_extensions.Annotated[typing.List[QueryParameter], FieldMetadata(alias="queryParameters")]
    messages: typing.List[WebSocketMessage] = pydantic.Field()
    """
    The messages that can be sent and received on this channel
    """

    examples: typing.List[ExampleWebSocketSession]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
