# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......commons.types.availability import Availability
from ......commons.types.property_key import PropertyKey
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ......core.serialization import FieldMetadata
from .content_type import ContentType


class FormDataFileProperty_File(UniversalBaseModel):
    type: typing.Literal["file"] = "file"
    key: PropertyKey
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    content_type: typing_extensions.Annotated[typing.Optional[ContentType], FieldMetadata(alias="contentType")] = None
    description: typing.Optional[str] = None
    availability: typing.Optional[Availability] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FormDataFileProperty_FileArray(UniversalBaseModel):
    type: typing.Literal["fileArray"] = "fileArray"
    key: PropertyKey
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    content_type: typing_extensions.Annotated[typing.Optional[ContentType], FieldMetadata(alias="contentType")] = None
    description: typing.Optional[str] = None
    availability: typing.Optional[Availability] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FormDataFileProperty = typing.Union[FormDataFileProperty_File, FormDataFileProperty_FileArray]
