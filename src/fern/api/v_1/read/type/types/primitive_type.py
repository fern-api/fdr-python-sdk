# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing
import uuid

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ......core.serialization import FieldMetadata


class PrimitiveType_Integer(UniversalBaseModel):
    type: typing.Literal["integer"] = "integer"
    minimum: typing.Optional[int] = None
    maximum: typing.Optional[int] = None
    default: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Double(UniversalBaseModel):
    type: typing.Literal["double"] = "double"
    minimum: typing.Optional[float] = None
    maximum: typing.Optional[float] = None
    default: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_String(UniversalBaseModel):
    type: typing.Literal["string"] = "string"
    format: typing.Optional[str] = None
    regex: typing.Optional[str] = None
    min_length: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="minLength")] = None
    max_length: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="maxLength")] = None
    default: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Long(UniversalBaseModel):
    type: typing.Literal["long"] = "long"
    minimum: typing.Optional[int] = None
    maximum: typing.Optional[int] = None
    default: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Boolean(UniversalBaseModel):
    type: typing.Literal["boolean"] = "boolean"
    default: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Datetime(UniversalBaseModel):
    type: typing.Literal["datetime"] = "datetime"
    default: typing.Optional[dt.datetime] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Uuid(UniversalBaseModel):
    type: typing.Literal["uuid"] = "uuid"
    default: typing.Optional[uuid.UUID] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Base64(UniversalBaseModel):
    type: typing.Literal["base64"] = "base64"
    default: typing.Optional[str] = None
    mime_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="mimeType")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Date(UniversalBaseModel):
    type: typing.Literal["date"] = "date"
    default: typing.Optional[dt.date] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_BigInteger(UniversalBaseModel):
    type: typing.Literal["bigInteger"] = "bigInteger"
    default: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Uint(UniversalBaseModel):
    type: typing.Literal["uint"] = "uint"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class PrimitiveType_Uint64(UniversalBaseModel):
    type: typing.Literal["uint64"] = "uint64"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


PrimitiveType = typing.Union[
    PrimitiveType_Integer,
    PrimitiveType_Double,
    PrimitiveType_String,
    PrimitiveType_Long,
    PrimitiveType_Boolean,
    PrimitiveType_Datetime,
    PrimitiveType_Uuid,
    PrimitiveType_Base64,
    PrimitiveType_Date,
    PrimitiveType_BigInteger,
    PrimitiveType_Uint,
    PrimitiveType_Uint64,
]
