# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.endpoint_id import EndpointId
from .....commons.types.web_socket_id import WebSocketId
from .....commons.types.webhook_id import WebhookId
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from .....core.serialization import FieldMetadata
from ...commons.types.subpackage_id import SubpackageId


class ApiNavigationConfigItem_Subpackage(UniversalBaseModel):
    type: typing.Literal["subpackage"] = "subpackage"
    subpackage_id: typing_extensions.Annotated[SubpackageId, FieldMetadata(alias="subpackageId")]
    items: typing.List["ApiNavigationConfigItem"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .api_navigation_config_subpackage import ApiNavigationConfigSubpackage  # noqa: E402, F401, I001


class ApiNavigationConfigItem_EndpointId(UniversalBaseModel):
    value: EndpointId
    type: typing.Literal["endpointId"] = "endpointId"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class ApiNavigationConfigItem_WebsocketId(UniversalBaseModel):
    value: WebSocketId
    type: typing.Literal["websocketId"] = "websocketId"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class ApiNavigationConfigItem_WebhookId(UniversalBaseModel):
    value: WebhookId
    type: typing.Literal["webhookId"] = "webhookId"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


ApiNavigationConfigItem = typing.Union[
    ApiNavigationConfigItem_Subpackage,
    ApiNavigationConfigItem_EndpointId,
    ApiNavigationConfigItem_WebsocketId,
    ApiNavigationConfigItem_WebhookId,
]
update_forward_refs(ApiNavigationConfigItem_Subpackage)
