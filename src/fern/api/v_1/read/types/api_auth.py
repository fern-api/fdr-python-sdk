# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .....core.serialization import FieldMetadata
from .o_auth import OAuth


class ApiAuth_BearerAuth(UniversalBaseModel):
    type: typing.Literal["bearerAuth"] = "bearerAuth"
    token_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="tokenName")] = None
    description: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ApiAuth_BasicAuth(UniversalBaseModel):
    type: typing.Literal["basicAuth"] = "basicAuth"
    username_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="usernameName")] = None
    password_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="passwordName")] = None
    description: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ApiAuth_Header(UniversalBaseModel):
    type: typing.Literal["header"] = "header"
    name_override: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="nameOverride")] = None
    header_wire_value: typing_extensions.Annotated[str, FieldMetadata(alias="headerWireValue")]
    prefix: typing.Optional[str] = None
    description: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ApiAuth_OAuth(UniversalBaseModel):
    value: OAuth
    type: typing.Literal["oAuth"] = "oAuth"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


ApiAuth = typing.Union[ApiAuth_BearerAuth, ApiAuth_BasicAuth, ApiAuth_Header, ApiAuth_OAuth]
