# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def json(self, value: typing.Optional[typing.Any]) -> ExampleErrorResponse:
        if IS_PYDANTIC_V2:
            return ExampleErrorResponse(root=_ExampleErrorResponse.Json(type="json", value=value))  # type: ignore
        else:
            return ExampleErrorResponse(__root__=_ExampleErrorResponse.Json(type="json", value=value))  # type: ignore


class ExampleErrorResponse(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_ExampleErrorResponse.Json]

        def get_as_union(self) -> typing.Union[_ExampleErrorResponse.Json]:
            return self.root
    else:
        __root__: typing.Union[_ExampleErrorResponse.Json]

        def get_as_union(self) -> typing.Union[_ExampleErrorResponse.Json]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, json: typing.Callable[[typing.Optional[typing.Any]], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "json":
            return json(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _ExampleErrorResponse:
    class Json(UniversalBaseModel):
        type: typing.Literal["json"] = "json"
        value: typing.Optional[typing.Any] = None

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(ExampleErrorResponse)
