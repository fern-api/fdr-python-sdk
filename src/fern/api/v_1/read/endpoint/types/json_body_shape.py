# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......commons.types.type_id import TypeId
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ......core.serialization import FieldMetadata
from ...type.types.object_property import ObjectProperty


class JsonBodyShape_Object(UniversalBaseModel):
    type: typing.Literal["object"] = "object"
    extends: typing.List[TypeId]
    properties: typing.List[ObjectProperty]
    extra_properties: typing_extensions.Annotated[
        typing.Optional["TypeReference"], FieldMetadata(alias="extraProperties")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...type.types.list_type import ListType  # noqa: E402, F401, I001
from ...type.types.map_type import MapType  # noqa: E402, F401, I001
from ...type.types.nullable_type import NullableType  # noqa: E402, F401, I001
from ...type.types.optional_type import OptionalType  # noqa: E402, F401, I001
from ...type.types.set_type import SetType  # noqa: E402, F401, I001
from ...type.types.type_reference import TypeReference  # noqa: E402, F401, I001


class JsonBodyShape_Reference(UniversalBaseModel):
    value: TypeReference
    type: typing.Literal["reference"] = "reference"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


JsonBodyShape = typing.Union[JsonBodyShape_Object, JsonBodyShape_Reference]
update_forward_refs(JsonBodyShape_Object)
