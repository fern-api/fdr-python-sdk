# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from ...type.types.bytes_request import BytesRequest
from ...type.types.form_data_request import FormDataRequest
from ...type.types.object_type import ObjectType

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def object(self, value: ObjectType) -> HttpRequestBodyShape:
        if IS_PYDANTIC_V2:
            return HttpRequestBodyShape(
                root=_HttpRequestBodyShape.Object(**value.dict(exclude_unset=True), type="object")
            )  # type: ignore
        else:
            return HttpRequestBodyShape(
                __root__=_HttpRequestBodyShape.Object(**value.dict(exclude_unset=True), type="object")
            )  # type: ignore

    def reference(self, value: TypeReference) -> HttpRequestBodyShape:
        if IS_PYDANTIC_V2:
            return HttpRequestBodyShape(root=_HttpRequestBodyShape.Reference(type="reference", value=value))  # type: ignore
        else:
            return HttpRequestBodyShape(__root__=_HttpRequestBodyShape.Reference(type="reference", value=value))  # type: ignore

    def bytes(self, value: BytesRequest) -> HttpRequestBodyShape:
        if IS_PYDANTIC_V2:
            return HttpRequestBodyShape(
                root=_HttpRequestBodyShape.Bytes(**value.dict(exclude_unset=True), type="bytes")
            )  # type: ignore
        else:
            return HttpRequestBodyShape(
                __root__=_HttpRequestBodyShape.Bytes(**value.dict(exclude_unset=True), type="bytes")
            )  # type: ignore

    def form_data(self, value: FormDataRequest) -> HttpRequestBodyShape:
        if IS_PYDANTIC_V2:
            return HttpRequestBodyShape(
                root=_HttpRequestBodyShape.FormData(**value.dict(exclude_unset=True), type="formData")
            )  # type: ignore
        else:
            return HttpRequestBodyShape(
                __root__=_HttpRequestBodyShape.FormData(**value.dict(exclude_unset=True), type="formData")
            )  # type: ignore

    def file_upload(self, value: typing.Optional[FormDataRequest]) -> HttpRequestBodyShape:
        if IS_PYDANTIC_V2:
            return HttpRequestBodyShape(root=_HttpRequestBodyShape.FileUpload(type="fileUpload", value=value))  # type: ignore
        else:
            return HttpRequestBodyShape(__root__=_HttpRequestBodyShape.FileUpload(type="fileUpload", value=value))  # type: ignore


class HttpRequestBodyShape(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _HttpRequestBodyShape.Object,
                _HttpRequestBodyShape.Reference,
                _HttpRequestBodyShape.Bytes,
                _HttpRequestBodyShape.FormData,
                _HttpRequestBodyShape.FileUpload,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _HttpRequestBodyShape.Object,
            _HttpRequestBodyShape.Reference,
            _HttpRequestBodyShape.Bytes,
            _HttpRequestBodyShape.FormData,
            _HttpRequestBodyShape.FileUpload,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _HttpRequestBodyShape.Object,
                _HttpRequestBodyShape.Reference,
                _HttpRequestBodyShape.Bytes,
                _HttpRequestBodyShape.FormData,
                _HttpRequestBodyShape.FileUpload,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _HttpRequestBodyShape.Object,
            _HttpRequestBodyShape.Reference,
            _HttpRequestBodyShape.Bytes,
            _HttpRequestBodyShape.FormData,
            _HttpRequestBodyShape.FileUpload,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        object: typing.Callable[[ObjectType], T_Result],
        reference: typing.Callable[["TypeReference"], T_Result],
        bytes: typing.Callable[[BytesRequest], T_Result],
        form_data: typing.Callable[[FormDataRequest], T_Result],
        file_upload: typing.Callable[[typing.Optional[FormDataRequest]], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "object":
            return object(ObjectType(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "reference":
            return reference(unioned_value.value)
        if unioned_value.type == "bytes":
            return bytes(BytesRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "formData":
            return form_data(FormDataRequest(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "fileUpload":
            return file_upload(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


from ...type.types.type_reference import TypeReference  # noqa: E402, F401, I001


class _HttpRequestBodyShape:
    class Object(ObjectType):
        type: typing.Literal["object"] = "object"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Reference(UniversalBaseModel):
        type: typing.Literal["reference"] = "reference"
        value: TypeReference

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Bytes(BytesRequest):
        type: typing.Literal["bytes"] = "bytes"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class FormData(FormDataRequest):
        type: typing.Literal["formData"] = "formData"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class FileUpload(UniversalBaseModel):
        type: typing.Literal["fileUpload"] = "fileUpload"
        value: typing.Optional[FormDataRequest] = None

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(HttpRequestBodyShape)
