# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ......core.serialization import FieldMetadata
from .csharp_snippet import CsharpSnippet
from .go_snippet import GoSnippet
from .python_snippet import PythonSnippet
from .ruby_snippet import RubySnippet
from .typescript_snippet import TypescriptSnippet


class CodeExamples(UniversalBaseModel):
    node_axios: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="nodeAxios")] = None
    python_sdk: typing_extensions.Annotated[typing.Optional[PythonSnippet], FieldMetadata(alias="pythonSdk")] = None
    typescript_sdk: typing_extensions.Annotated[
        typing.Optional[TypescriptSnippet], FieldMetadata(alias="typescriptSdk")
    ] = None
    go_sdk: typing_extensions.Annotated[typing.Optional[GoSnippet], FieldMetadata(alias="goSdk")] = None
    ruby_sdk: typing_extensions.Annotated[typing.Optional[RubySnippet], FieldMetadata(alias="rubySdk")] = None
    csharp_sdk: typing_extensions.Annotated[typing.Optional[CsharpSnippet], FieldMetadata(alias="csharpSdk")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
