# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from .....commons.types.grpc_method import GrpcMethod
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .....core.serialization import FieldMetadata


class Protocol_Rest(UniversalBaseModel):
    type: typing.Literal["rest"] = "rest"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Protocol_Openrpc(UniversalBaseModel):
    type: typing.Literal["openrpc"] = "openrpc"
    method_name: typing_extensions.Annotated[str, FieldMetadata(alias="methodName")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Protocol_Grpc(UniversalBaseModel):
    type: typing.Literal["grpc"] = "grpc"
    method_name: typing_extensions.Annotated[str, FieldMetadata(alias="methodName")]
    method_type: typing_extensions.Annotated[typing.Optional[GrpcMethod], FieldMetadata(alias="methodType")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


Protocol = typing.Union[Protocol_Rest, Protocol_Openrpc, Protocol_Grpc]
