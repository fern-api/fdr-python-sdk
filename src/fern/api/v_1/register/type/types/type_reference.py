# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......commons.types.type_id import TypeId
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ......core.serialization import FieldMetadata
from .literal_type import LiteralType
from .primitive_type import PrimitiveType
from .type_reference_id_default import TypeReferenceIdDefault


class TypeReference_Id(UniversalBaseModel):
    type: typing.Literal["id"] = "id"
    value: TypeId
    default: typing.Optional[TypeReferenceIdDefault] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeReference_Primitive(UniversalBaseModel):
    value: PrimitiveType
    type: typing.Literal["primitive"] = "primitive"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class TypeReference_Optional(UniversalBaseModel):
    type: typing.Literal["optional"] = "optional"
    item_type: typing_extensions.Annotated["TypeReference", FieldMetadata(alias="itemType")]
    default_value: typing_extensions.Annotated[
        typing.Optional[typing.Optional[typing.Any]], FieldMetadata(alias="defaultValue")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeReference_Nullable(UniversalBaseModel):
    type: typing.Literal["nullable"] = "nullable"
    item_type: typing_extensions.Annotated["TypeReference", FieldMetadata(alias="itemType")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeReference_List(UniversalBaseModel):
    type: typing.Literal["list"] = "list"
    item_type: typing_extensions.Annotated["TypeReference", FieldMetadata(alias="itemType")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeReference_Set(UniversalBaseModel):
    type: typing.Literal["set"] = "set"
    item_type: typing_extensions.Annotated["TypeReference", FieldMetadata(alias="itemType")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TypeReference_Map(UniversalBaseModel):
    type: typing.Literal["map"] = "map"
    key_type: typing_extensions.Annotated["TypeReference", FieldMetadata(alias="keyType")]
    value_type: typing_extensions.Annotated["TypeReference", FieldMetadata(alias="valueType")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .list_type import ListType  # noqa: E402, F401, I001
from .map_type import MapType  # noqa: E402, F401, I001
from .nullable_type import NullableType  # noqa: E402, F401, I001
from .optional_type import OptionalType  # noqa: E402, F401, I001
from .set_type import SetType  # noqa: E402, F401, I001


class TypeReference_Literal(UniversalBaseModel):
    value: LiteralType
    type: typing.Literal["literal"] = "literal"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class TypeReference_Unknown(UniversalBaseModel):
    type: typing.Literal["unknown"] = "unknown"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


TypeReference = typing.Union[
    TypeReference_Id,
    TypeReference_Primitive,
    TypeReference_Optional,
    TypeReference_Nullable,
    TypeReference_List,
    TypeReference_Set,
    TypeReference_Map,
    TypeReference_Literal,
    TypeReference_Unknown,
]
update_forward_refs(TypeReference_Optional)
update_forward_refs(TypeReference_Nullable)
update_forward_refs(TypeReference_List)
update_forward_refs(TypeReference_Set)
update_forward_refs(TypeReference_Map)
