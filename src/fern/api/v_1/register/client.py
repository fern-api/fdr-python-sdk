# This file was auto-generated by Fern from our API Definition.

import typing

from ....commons.types.api_id import ApiId
from ....commons.types.org_id import OrgId
from ....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ....core.request_options import RequestOptions
from ...latest.types.api_definition import ApiDefinition as api_latest_types_api_definition_ApiDefinition
from .raw_client import AsyncRawRegisterClient, RawRegisterClient
from .types.api_definition import ApiDefinition as api_v_1_register_types_api_definition_ApiDefinition
from .types.dynamic_ir import DynamicIr
from .types.register_api_definition_response import RegisterApiDefinitionResponse
from .types.source import Source
from .types.source_id import SourceId

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RegisterClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawRegisterClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawRegisterClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawRegisterClient
        """
        return self._raw_client

    def register_api_definition(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        definition: typing.Optional[api_v_1_register_types_api_definition_ApiDefinition] = OMIT,
        definition_v_2: typing.Optional[api_latest_types_api_definition_ApiDefinition] = OMIT,
        sources: typing.Optional[typing.Dict[SourceId, Source]] = OMIT,
        dynamic_i_rs: typing.Optional[typing.Dict[str, DynamicIr]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RegisterApiDefinitionResponse:
        """
        Parameters
        ----------
        org_id : OrgId

        api_id : ApiId

        definition : typing.Optional[api_v_1_register_types_api_definition_ApiDefinition]

        definition_v_2 : typing.Optional[api_latest_types_api_definition_ApiDefinition]

        sources : typing.Optional[typing.Dict[SourceId, Source]]

        dynamic_i_rs : typing.Optional[typing.Dict[str, DynamicIr]]
            A mapping of languages to dynamic IR.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegisterApiDefinitionResponse

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.api.v_1.register.register_api_definition(
            org_id="orgId",
            api_id="apiId",
        )
        """
        _response = self._raw_client.register_api_definition(
            org_id=org_id,
            api_id=api_id,
            definition=definition,
            definition_v_2=definition_v_2,
            sources=sources,
            dynamic_i_rs=dynamic_i_rs,
            request_options=request_options,
        )
        return _response.data


class AsyncRegisterClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawRegisterClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawRegisterClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawRegisterClient
        """
        return self._raw_client

    async def register_api_definition(
        self,
        *,
        org_id: OrgId,
        api_id: ApiId,
        definition: typing.Optional[api_v_1_register_types_api_definition_ApiDefinition] = OMIT,
        definition_v_2: typing.Optional[api_latest_types_api_definition_ApiDefinition] = OMIT,
        sources: typing.Optional[typing.Dict[SourceId, Source]] = OMIT,
        dynamic_i_rs: typing.Optional[typing.Dict[str, DynamicIr]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RegisterApiDefinitionResponse:
        """
        Parameters
        ----------
        org_id : OrgId

        api_id : ApiId

        definition : typing.Optional[api_v_1_register_types_api_definition_ApiDefinition]

        definition_v_2 : typing.Optional[api_latest_types_api_definition_ApiDefinition]

        sources : typing.Optional[typing.Dict[SourceId, Source]]

        dynamic_i_rs : typing.Optional[typing.Dict[str, DynamicIr]]
            A mapping of languages to dynamic IR.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegisterApiDefinitionResponse

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.api.v_1.register.register_api_definition(
                org_id="orgId",
                api_id="apiId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.register_api_definition(
            org_id=org_id,
            api_id=api_id,
            definition=definition,
            definition_v_2=definition_v_2,
            sources=sources,
            dynamic_i_rs=dynamic_i_rs,
            request_options=request_options,
        )
        return _response.data
