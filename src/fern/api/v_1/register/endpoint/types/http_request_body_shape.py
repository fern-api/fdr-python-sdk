# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......commons.types.availability import Availability
from ......commons.types.type_id import TypeId
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ......core.serialization import FieldMetadata
from ...type.types.form_data_property import FormDataProperty
from ...type.types.form_data_request import FormDataRequest
from ...type.types.object_property import ObjectProperty
from .json_body_shape import JsonBodyShape


class HttpRequestBodyShape_Json(UniversalBaseModel):
    type: typing.Literal["json"] = "json"
    content_type: typing_extensions.Annotated[str, FieldMetadata(alias="contentType")]
    shape: JsonBodyShape

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HttpRequestBodyShape_FormData(UniversalBaseModel):
    type: typing.Literal["formData"] = "formData"
    name: str
    properties: typing.List[FormDataProperty]
    description: typing.Optional[str] = None
    availability: typing.Optional[Availability] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HttpRequestBodyShape_Bytes(UniversalBaseModel):
    type: typing.Literal["bytes"] = "bytes"
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    content_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contentType")] = None
    description: typing.Optional[str] = None
    availability: typing.Optional[Availability] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class HttpRequestBodyShape_Object(UniversalBaseModel):
    type: typing.Literal["object"] = "object"
    extends: typing.List[TypeId]
    properties: typing.List[ObjectProperty]
    extra_properties: typing_extensions.Annotated[
        typing.Optional["TypeReference"], FieldMetadata(alias="extraProperties")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...type.types.list_type import ListType  # noqa: E402, F401, I001
from ...type.types.map_type import MapType  # noqa: E402, F401, I001
from ...type.types.nullable_type import NullableType  # noqa: E402, F401, I001
from ...type.types.optional_type import OptionalType  # noqa: E402, F401, I001
from ...type.types.set_type import SetType  # noqa: E402, F401, I001
from ...type.types.type_reference import TypeReference  # noqa: E402, F401, I001


class HttpRequestBodyShape_Reference(UniversalBaseModel):
    value: TypeReference
    type: typing.Literal["reference"] = "reference"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class HttpRequestBodyShape_FileUpload(UniversalBaseModel):
    value: typing.Optional[FormDataRequest] = None
    type: typing.Literal["fileUpload"] = "fileUpload"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


HttpRequestBodyShape = typing.Union[
    HttpRequestBodyShape_Json,
    HttpRequestBodyShape_FormData,
    HttpRequestBodyShape_Bytes,
    HttpRequestBodyShape_Object,
    HttpRequestBodyShape_Reference,
    HttpRequestBodyShape_FileUpload,
]
update_forward_refs(HttpRequestBodyShape_Json)
update_forward_refs(HttpRequestBodyShape_FormData)
update_forward_refs(HttpRequestBodyShape_Object)
