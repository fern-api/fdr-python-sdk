# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ......commons.types.file_id import FileId
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .filename_with_data import FilenameWithData


class FormValue_Json(UniversalBaseModel):
    value: typing.Optional[typing.Any] = None
    type: typing.Literal["json"] = "json"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FormValue_Filename(UniversalBaseModel):
    value: str
    type: typing.Literal["filename"] = "filename"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FormValue_Filenames(UniversalBaseModel):
    value: typing.List[str]
    type: typing.Literal["filenames"] = "filenames"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FormValue_FilenameWithData(UniversalBaseModel):
    type: typing.Literal["filenameWithData"] = "filenameWithData"
    filename: str
    data: FileId

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FormValue_FilenamesWithData(UniversalBaseModel):
    value: typing.List[FilenameWithData]
    type: typing.Literal["filenamesWithData"] = "filenamesWithData"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FormValue_Exploded(UniversalBaseModel):
    value: typing.List[typing.Optional[typing.Any]]
    type: typing.Literal["exploded"] = "exploded"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


FormValue = typing.Union[
    FormValue_Json,
    FormValue_Filename,
    FormValue_Filenames,
    FormValue_FilenameWithData,
    FormValue_FilenamesWithData,
    FormValue_Exploded,
]
