# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2
from ......core.serialization import FieldMetadata
from ....commons.types.with_availability import WithAvailability
from ....commons.types.with_description import WithDescription
from ...type.types.type_shape import TypeShape
from .error_example import ErrorExample


class ErrorDeclarationV2(WithDescription, WithAvailability):
    type: typing.Optional[TypeShape] = None
    status_code: typing_extensions.Annotated[int, FieldMetadata(alias="statusCode")]
    name: typing.Optional[str] = None
    examples: typing.Optional[typing.List[ErrorExample]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
