# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ......commons.types.property_key import PropertyKey
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def boolean_request_property(self, value: PropertyKey) -> StreamCondition:
        if IS_PYDANTIC_V2:
            return StreamCondition(
                root=_StreamCondition.BooleanRequestProperty(type="booleanRequestProperty", value=value)
            )  # type: ignore
        else:
            return StreamCondition(
                __root__=_StreamCondition.BooleanRequestProperty(type="booleanRequestProperty", value=value)
            )  # type: ignore


class StreamCondition(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_StreamCondition.BooleanRequestProperty]

        def get_as_union(self) -> typing.Union[_StreamCondition.BooleanRequestProperty]:
            return self.root
    else:
        __root__: typing.Union[_StreamCondition.BooleanRequestProperty]

        def get_as_union(self) -> typing.Union[_StreamCondition.BooleanRequestProperty]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, boolean_request_property: typing.Callable[[PropertyKey], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "booleanRequestProperty":
            return boolean_request_property(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _StreamCondition:
    class BooleanRequestProperty(UniversalBaseModel):
        type: typing.Literal["booleanRequestProperty"] = "booleanRequestProperty"
        value: PropertyKey

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(StreamCondition)
