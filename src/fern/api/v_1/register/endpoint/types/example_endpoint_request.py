# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .bytes_value import BytesValue
from .form_value import FormValue

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def json(self, value: typing.Optional[typing.Any]) -> ExampleEndpointRequest:
        if IS_PYDANTIC_V2:
            return ExampleEndpointRequest(root=_ExampleEndpointRequest.Json(type="json", value=value))  # type: ignore
        else:
            return ExampleEndpointRequest(__root__=_ExampleEndpointRequest.Json(type="json", value=value))  # type: ignore

    def form(self, value: typing.Dict[str, FormValue]) -> ExampleEndpointRequest:
        if IS_PYDANTIC_V2:
            return ExampleEndpointRequest(root=_ExampleEndpointRequest.Form(type="form", value=value))  # type: ignore
        else:
            return ExampleEndpointRequest(__root__=_ExampleEndpointRequest.Form(type="form", value=value))  # type: ignore

    def bytes(self, value: BytesValue) -> ExampleEndpointRequest:
        if IS_PYDANTIC_V2:
            return ExampleEndpointRequest(root=_ExampleEndpointRequest.Bytes(type="bytes", value=value))  # type: ignore
        else:
            return ExampleEndpointRequest(__root__=_ExampleEndpointRequest.Bytes(type="bytes", value=value))  # type: ignore


class ExampleEndpointRequest(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_ExampleEndpointRequest.Json, _ExampleEndpointRequest.Form, _ExampleEndpointRequest.Bytes],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_ExampleEndpointRequest.Json, _ExampleEndpointRequest.Form, _ExampleEndpointRequest.Bytes]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_ExampleEndpointRequest.Json, _ExampleEndpointRequest.Form, _ExampleEndpointRequest.Bytes],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_ExampleEndpointRequest.Json, _ExampleEndpointRequest.Form, _ExampleEndpointRequest.Bytes]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        json: typing.Callable[[typing.Optional[typing.Any]], T_Result],
        form: typing.Callable[[typing.Dict[str, FormValue]], T_Result],
        bytes: typing.Callable[[BytesValue], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "json":
            return json(unioned_value.value)
        if unioned_value.type == "form":
            return form(unioned_value.value)
        if unioned_value.type == "bytes":
            return bytes(unioned_value.value)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _ExampleEndpointRequest:
    class Json(UniversalBaseModel):
        type: typing.Literal["json"] = "json"
        value: typing.Optional[typing.Any] = None

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Form(UniversalBaseModel):
        type: typing.Literal["form"] = "form"
        value: typing.Dict[str, FormValue]

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Bytes(UniversalBaseModel):
        type: typing.Literal["bytes"] = "bytes"
        value: BytesValue

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(ExampleEndpointRequest)
