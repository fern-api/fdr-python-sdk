# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawVersionsClient, RawVersionsClient
from .types.computed_semantic_version_response import ComputedSemanticVersionResponse
from .types.language import Language

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VersionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawVersionsClient
        """
        return self._raw_client

    def compute_semantic_version(
        self,
        *,
        package: str,
        language: Language,
        github_repository: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComputedSemanticVersionResponse:
        """
        Computes a semantic version for the SDK to be relesed on.
        The endpoint tries to find existing versions by looking up against
        registries and github repositories. If none are found an error is thrown.
        If a version is found, a new semantic version is returned.

        Parameters
        ----------
        package : str
            The name of the package (e.g. `@org/sdk` or `com.org:org-java`)

        language : Language

        github_repository : typing.Optional[str]
            The name of the GitHub repository (e.g. `owner/repo`).
            The repositories latest release will be queried to find the existing
            package version.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComputedSemanticVersionResponse

        Examples
        --------
        from fern import FernRegistry

        client = FernRegistry(
            token="YOUR_TOKEN",
        )
        client.sdks.versions.compute_semantic_version(
            package="package",
            language="Go",
        )
        """
        _response = self._raw_client.compute_semantic_version(
            package=package, language=language, github_repository=github_repository, request_options=request_options
        )
        return _response.data


class AsyncVersionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawVersionsClient
        """
        return self._raw_client

    async def compute_semantic_version(
        self,
        *,
        package: str,
        language: Language,
        github_repository: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComputedSemanticVersionResponse:
        """
        Computes a semantic version for the SDK to be relesed on.
        The endpoint tries to find existing versions by looking up against
        registries and github repositories. If none are found an error is thrown.
        If a version is found, a new semantic version is returned.

        Parameters
        ----------
        package : str
            The name of the package (e.g. `@org/sdk` or `com.org:org-java`)

        language : Language

        github_repository : typing.Optional[str]
            The name of the GitHub repository (e.g. `owner/repo`).
            The repositories latest release will be queried to find the existing
            package version.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComputedSemanticVersionResponse

        Examples
        --------
        import asyncio

        from fern import AsyncFernRegistry

        client = AsyncFernRegistry(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sdks.versions.compute_semantic_version(
                package="package",
                language="Go",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.compute_semantic_version(
            package=package, language=language, github_repository=github_repository, request_options=request_options
        )
        return _response.data
