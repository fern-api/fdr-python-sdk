# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..commons.types.api_definition_id import ApiDefinitionId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.api_diff import ApiDiff


class RawDiffClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def diff(
        self,
        *,
        previous_api_definition_id: ApiDefinitionId,
        current_api_definition_id: ApiDefinitionId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ApiDiff]:
        """
        Parameters
        ----------
        previous_api_definition_id : ApiDefinitionId
            The id of the previous version of the api definition

        current_api_definition_id : ApiDefinitionId
            The id of the current version of the api definition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ApiDiff]
            The diff between the previous and current api definitions
        """
        _response = self._client_wrapper.httpx_client.request(
            "registry/diff",
            method="GET",
            params={
                "previousApiDefinitionId": previous_api_definition_id,
                "currentApiDefinitionId": current_api_definition_id,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                ApiDiff,
                parse_obj_as(
                    type_=ApiDiff,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawDiffClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def diff(
        self,
        *,
        previous_api_definition_id: ApiDefinitionId,
        current_api_definition_id: ApiDefinitionId,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ApiDiff]:
        """
        Parameters
        ----------
        previous_api_definition_id : ApiDefinitionId
            The id of the previous version of the api definition

        current_api_definition_id : ApiDefinitionId
            The id of the current version of the api definition

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ApiDiff]
            The diff between the previous and current api definitions
        """
        _response = await self._client_wrapper.httpx_client.request(
            "registry/diff",
            method="GET",
            params={
                "previousApiDefinitionId": previous_api_definition_id,
                "currentApiDefinitionId": current_api_definition_id,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                ApiDiff,
                parse_obj_as(
                    type_=ApiDiff,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
