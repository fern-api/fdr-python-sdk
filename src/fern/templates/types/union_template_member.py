# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs


class UnionTemplateMember(UniversalBaseModel):
    type: "TypeReference"
    template: "Template"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...api.v_1.read.type.types.list_type import ListType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.map_type import MapType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.nullable_type import NullableType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.optional_type import OptionalType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.set_type import SetType  # noqa: E402, F401, I001
from .dict_template import DictTemplate  # noqa: E402, F401, I001
from .discriminated_union_template import DiscriminatedUnionTemplate  # noqa: E402, F401, I001
from .generic_template import GenericTemplate  # noqa: E402, F401, I001
from .iterable_template import IterableTemplate  # noqa: E402, F401, I001
from .union_template import UnionTemplate  # noqa: E402, F401, I001
from .union_template_v_2 import UnionTemplateV2  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.type_reference import TypeReference  # noqa: E402, F401, I001
from .template import Template  # noqa: E402, F401, I001

update_forward_refs(UnionTemplateMember)
