# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ...core.serialization import FieldMetadata
from .payload_input import PayloadInput


class Template_Generic(UniversalBaseModel):
    type: typing.Literal["generic"] = "generic"
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    template_string: typing_extensions.Annotated[str, FieldMetadata(alias="templateString")]
    template_inputs: typing_extensions.Annotated[
        typing.Optional[typing.List["TemplateInput"]], FieldMetadata(alias="templateInputs")
    ] = None
    input_delimiter: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputDelimiter")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Template_Enum(UniversalBaseModel):
    type: typing.Literal["enum"] = "enum"
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    template_string: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="templateString")] = None
    values: typing.Dict[str, str]
    template_input: typing_extensions.Annotated[typing.Optional[PayloadInput], FieldMetadata(alias="templateInput")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Template_DiscriminatedUnion(UniversalBaseModel):
    type: typing.Literal["discriminatedUnion"] = "discriminatedUnion"
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    template_string: typing_extensions.Annotated[str, FieldMetadata(alias="templateString")]
    discriminant_field: typing_extensions.Annotated[str, FieldMetadata(alias="discriminantField")]
    members: typing.Dict[str, "Template"]
    template_input: typing_extensions.Annotated[typing.Optional[PayloadInput], FieldMetadata(alias="templateInput")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Template_Union(UniversalBaseModel):
    type: typing.Literal["union"] = "union"
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    template_string: typing_extensions.Annotated[str, FieldMetadata(alias="templateString")]
    members: typing.Dict[str, "Template"]
    template_input: typing_extensions.Annotated[typing.Optional[PayloadInput], FieldMetadata(alias="templateInput")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Template_UnionV2(UniversalBaseModel):
    type: typing.Literal["union_v2"] = "union_v2"
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    template_string: typing_extensions.Annotated[str, FieldMetadata(alias="templateString")]
    members: typing.List["UnionTemplateMember"]
    template_input: typing_extensions.Annotated[typing.Optional[PayloadInput], FieldMetadata(alias="templateInput")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Template_Dict(UniversalBaseModel):
    type: typing.Literal["dict"] = "dict"
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    container_template_string: typing_extensions.Annotated[str, FieldMetadata(alias="containerTemplateString")]
    delimiter: str
    key_template: typing_extensions.Annotated["Template", FieldMetadata(alias="keyTemplate")]
    value_template: typing_extensions.Annotated["Template", FieldMetadata(alias="valueTemplate")]
    key_value_separator: typing_extensions.Annotated[str, FieldMetadata(alias="keyValueSeparator")]
    template_input: typing_extensions.Annotated[typing.Optional[PayloadInput], FieldMetadata(alias="templateInput")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Template_Iterable(UniversalBaseModel):
    type: typing.Literal["iterable"] = "iterable"
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")]
    container_template_string: typing_extensions.Annotated[str, FieldMetadata(alias="containerTemplateString")]
    delimiter: str
    inner_template: typing_extensions.Annotated["Template", FieldMetadata(alias="innerTemplate")]
    template_input: typing_extensions.Annotated[typing.Optional[PayloadInput], FieldMetadata(alias="templateInput")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...api.v_1.read.type.types.list_type import ListType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.map_type import MapType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.nullable_type import NullableType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.optional_type import OptionalType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.set_type import SetType  # noqa: E402, F401, I001
from .dict_template import DictTemplate  # noqa: E402, F401, I001
from .discriminated_union_template import DiscriminatedUnionTemplate  # noqa: E402, F401, I001
from .generic_template import GenericTemplate  # noqa: E402, F401, I001
from .iterable_template import IterableTemplate  # noqa: E402, F401, I001
from .union_template import UnionTemplate  # noqa: E402, F401, I001
from .union_template_v_2 import UnionTemplateV2  # noqa: E402, F401, I001

Template = typing.Union[
    Template_Generic,
    Template_Enum,
    Template_DiscriminatedUnion,
    Template_Union,
    Template_UnionV2,
    Template_Dict,
    Template_Iterable,
]
from .union_template_member import UnionTemplateMember  # noqa: E402, F401, I001
from .template_input import TemplateInput  # noqa: E402, F401, I001

update_forward_refs(Template_Generic)
update_forward_refs(Template_DiscriminatedUnion)
update_forward_refs(Template_Union)
update_forward_refs(Template_UnionV2)
update_forward_refs(Template_Dict)
update_forward_refs(Template_Iterable)
