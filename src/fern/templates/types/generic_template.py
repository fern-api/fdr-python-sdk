# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ...core.serialization import FieldMetadata


class GenericTemplate(UniversalBaseModel):
    imports: typing.Optional[typing.List[str]] = None
    is_optional: typing_extensions.Annotated[bool, FieldMetadata(alias="isOptional")] = pydantic.Field()
    """
    We might not need this, but the idea here is to be able to omit if it's optional and undefined,
    or default if omitted and required.
    """

    template_string: typing_extensions.Annotated[str, FieldMetadata(alias="templateString")]
    template_inputs: typing_extensions.Annotated[
        typing.Optional[typing.List["TemplateInput"]], FieldMetadata(alias="templateInputs")
    ] = pydantic.Field(default=None)
    """
    An ordered list of inputs to the template.
    """

    input_delimiter: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="inputDelimiter")] = (
        pydantic.Field(default=None)
    )
    """
    In the event you have multiple template inputs, how do you concat them together
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...api.v_1.read.type.types.list_type import ListType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.map_type import MapType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.nullable_type import NullableType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.optional_type import OptionalType  # noqa: E402, F401, I001
from ...api.v_1.read.type.types.set_type import SetType  # noqa: E402, F401, I001
from .dict_template import DictTemplate  # noqa: E402, F401, I001
from .discriminated_union_template import DiscriminatedUnionTemplate  # noqa: E402, F401, I001
from .iterable_template import IterableTemplate  # noqa: E402, F401, I001
from .union_template import UnionTemplate  # noqa: E402, F401, I001
from .union_template_member import UnionTemplateMember  # noqa: E402, F401, I001
from .union_template_v_2 import UnionTemplateV2  # noqa: E402, F401, I001
from .template_input import TemplateInput  # noqa: E402, F401, I001

update_forward_refs(GenericTemplate)
